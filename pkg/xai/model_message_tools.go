/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageTools type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageTools{}

// MessageTools struct for MessageTools
type MessageTools struct {
	CacheControl interface{} `json:"cache_control,omitempty"`
	// Description of the tool.
	Description string `json:"description"`
	// Input schema allowed by the tool.
	InputSchema MessageToolInputSchema `json:"input_schema"`
	// Name of the tool.
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _MessageTools MessageTools

// NewMessageTools instantiates a new MessageTools object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageTools(description string, inputSchema MessageToolInputSchema, name string) *MessageTools {
	this := MessageTools{}
	this.Description = description
	this.InputSchema = inputSchema
	this.Name = name
	return &this
}

// NewMessageToolsWithDefaults instantiates a new MessageTools object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageToolsWithDefaults() *MessageTools {
	this := MessageTools{}
	return &this
}

// GetCacheControl returns the CacheControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageTools) GetCacheControl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CacheControl
}

// GetCacheControlOk returns a tuple with the CacheControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageTools) GetCacheControlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CacheControl) {
		return nil, false
	}
	return &o.CacheControl, true
}

// HasCacheControl returns a boolean if a field has been set.
func (o *MessageTools) HasCacheControl() bool {
	if o != nil && !IsNil(o.CacheControl) {
		return true
	}

	return false
}

// SetCacheControl gets a reference to the given interface{} and assigns it to the CacheControl field.
func (o *MessageTools) SetCacheControl(v interface{}) {
	o.CacheControl = v
}

// GetDescription returns the Description field value
func (o *MessageTools) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MessageTools) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MessageTools) SetDescription(v string) {
	o.Description = v
}

// GetInputSchema returns the InputSchema field value
func (o *MessageTools) GetInputSchema() MessageToolInputSchema {
	if o == nil {
		var ret MessageToolInputSchema
		return ret
	}

	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value
// and a boolean to check if the value has been set.
func (o *MessageTools) GetInputSchemaOk() (*MessageToolInputSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputSchema, true
}

// SetInputSchema sets field value
func (o *MessageTools) SetInputSchema(v MessageToolInputSchema) {
	o.InputSchema = v
}

// GetName returns the Name field value
func (o *MessageTools) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MessageTools) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MessageTools) SetName(v string) {
	o.Name = v
}

func (o MessageTools) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageTools) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CacheControl != nil {
		toSerialize["cache_control"] = o.CacheControl
	}
	toSerialize["description"] = o.Description
	toSerialize["input_schema"] = o.InputSchema
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageTools) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"input_schema",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageTools := _MessageTools{}

	err = json.Unmarshal(data, &varMessageTools)

	if err != nil {
		return err
	}

	*o = MessageTools(varMessageTools)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cache_control")
		delete(additionalProperties, "description")
		delete(additionalProperties, "input_schema")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageTools struct {
	value *MessageTools
	isSet bool
}

func (v NullableMessageTools) Get() *MessageTools {
	return v.value
}

func (v *NullableMessageTools) Set(val *MessageTools) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageTools) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageTools) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageTools(val *MessageTools) *NullableMessageTools {
	return &NullableMessageTools{value: val, isSet: true}
}

func (v NullableMessageTools) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageTools) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
