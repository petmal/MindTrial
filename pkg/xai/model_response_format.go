/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ResponseFormat - Response format parameter for structured outputs.
type ResponseFormat struct {
	ResponseFormatOneOf  *ResponseFormatOneOf
	ResponseFormatOneOf1 *ResponseFormatOneOf1
	ResponseFormatOneOf2 *ResponseFormatOneOf2
}

// ResponseFormatOneOfAsResponseFormat is a convenience function that returns ResponseFormatOneOf wrapped in ResponseFormat
func ResponseFormatOneOfAsResponseFormat(v *ResponseFormatOneOf) ResponseFormat {
	return ResponseFormat{
		ResponseFormatOneOf: v,
	}
}

// ResponseFormatOneOf1AsResponseFormat is a convenience function that returns ResponseFormatOneOf1 wrapped in ResponseFormat
func ResponseFormatOneOf1AsResponseFormat(v *ResponseFormatOneOf1) ResponseFormat {
	return ResponseFormat{
		ResponseFormatOneOf1: v,
	}
}

// ResponseFormatOneOf2AsResponseFormat is a convenience function that returns ResponseFormatOneOf2 wrapped in ResponseFormat
func ResponseFormatOneOf2AsResponseFormat(v *ResponseFormatOneOf2) ResponseFormat {
	return ResponseFormat{
		ResponseFormatOneOf2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseFormat) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ResponseFormatOneOf
	err = newStrictDecoder(data).Decode(&dst.ResponseFormatOneOf)
	if err == nil {
		jsonResponseFormatOneOf, _ := json.Marshal(dst.ResponseFormatOneOf)
		if string(jsonResponseFormatOneOf) == "{}" { // empty struct
			dst.ResponseFormatOneOf = nil
		} else {
			if err = validator.Validate(dst.ResponseFormatOneOf); err != nil {
				dst.ResponseFormatOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseFormatOneOf = nil
	}

	// try to unmarshal data into ResponseFormatOneOf1
	err = newStrictDecoder(data).Decode(&dst.ResponseFormatOneOf1)
	if err == nil {
		jsonResponseFormatOneOf1, _ := json.Marshal(dst.ResponseFormatOneOf1)
		if string(jsonResponseFormatOneOf1) == "{}" { // empty struct
			dst.ResponseFormatOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ResponseFormatOneOf1); err != nil {
				dst.ResponseFormatOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseFormatOneOf1 = nil
	}

	// try to unmarshal data into ResponseFormatOneOf2
	err = newStrictDecoder(data).Decode(&dst.ResponseFormatOneOf2)
	if err == nil {
		jsonResponseFormatOneOf2, _ := json.Marshal(dst.ResponseFormatOneOf2)
		if string(jsonResponseFormatOneOf2) == "{}" { // empty struct
			dst.ResponseFormatOneOf2 = nil
		} else {
			if err = validator.Validate(dst.ResponseFormatOneOf2); err != nil {
				dst.ResponseFormatOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseFormatOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ResponseFormatOneOf = nil
		dst.ResponseFormatOneOf1 = nil
		dst.ResponseFormatOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseFormat)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseFormat)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseFormat) MarshalJSON() ([]byte, error) {
	if src.ResponseFormatOneOf != nil {
		return json.Marshal(&src.ResponseFormatOneOf)
	}

	if src.ResponseFormatOneOf1 != nil {
		return json.Marshal(&src.ResponseFormatOneOf1)
	}

	if src.ResponseFormatOneOf2 != nil {
		return json.Marshal(&src.ResponseFormatOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseFormat) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ResponseFormatOneOf != nil {
		return obj.ResponseFormatOneOf
	}

	if obj.ResponseFormatOneOf1 != nil {
		return obj.ResponseFormatOneOf1
	}

	if obj.ResponseFormatOneOf2 != nil {
		return obj.ResponseFormatOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ResponseFormat) GetActualInstanceValue() interface{} {
	if obj.ResponseFormatOneOf != nil {
		return *obj.ResponseFormatOneOf
	}

	if obj.ResponseFormatOneOf1 != nil {
		return *obj.ResponseFormatOneOf1
	}

	if obj.ResponseFormatOneOf2 != nil {
		return *obj.ResponseFormatOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableResponseFormat struct {
	value *ResponseFormat
	isSet bool
}

func (v NullableResponseFormat) Get() *ResponseFormat {
	return v.value
}

func (v *NullableResponseFormat) Set(val *ResponseFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseFormat(val *ResponseFormat) *NullableResponseFormat {
	return &NullableResponseFormat{value: val, isSet: true}
}

func (v NullableResponseFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
