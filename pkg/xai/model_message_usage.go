/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageUsage{}

// MessageUsage struct for MessageUsage
type MessageUsage struct {
	// (Unsupported) Number of tokens written to the cache when creating a new entry.
	CacheCreationInputTokens int32 `json:"cache_creation_input_tokens"`
	// Number of tokens retrieved from the cache for this request.
	CacheReadInputTokens int32 `json:"cache_read_input_tokens"`
	// Number of input tokens used
	InputTokens int32 `json:"input_tokens"`
	// Number of output tokens used
	OutputTokens         int32 `json:"output_tokens"`
	AdditionalProperties map[string]interface{}
}

type _MessageUsage MessageUsage

// NewMessageUsage instantiates a new MessageUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageUsage(cacheCreationInputTokens int32, cacheReadInputTokens int32, inputTokens int32, outputTokens int32) *MessageUsage {
	this := MessageUsage{}
	this.CacheCreationInputTokens = cacheCreationInputTokens
	this.CacheReadInputTokens = cacheReadInputTokens
	this.InputTokens = inputTokens
	this.OutputTokens = outputTokens
	return &this
}

// NewMessageUsageWithDefaults instantiates a new MessageUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageUsageWithDefaults() *MessageUsage {
	this := MessageUsage{}
	return &this
}

// GetCacheCreationInputTokens returns the CacheCreationInputTokens field value
func (o *MessageUsage) GetCacheCreationInputTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CacheCreationInputTokens
}

// GetCacheCreationInputTokensOk returns a tuple with the CacheCreationInputTokens field value
// and a boolean to check if the value has been set.
func (o *MessageUsage) GetCacheCreationInputTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheCreationInputTokens, true
}

// SetCacheCreationInputTokens sets field value
func (o *MessageUsage) SetCacheCreationInputTokens(v int32) {
	o.CacheCreationInputTokens = v
}

// GetCacheReadInputTokens returns the CacheReadInputTokens field value
func (o *MessageUsage) GetCacheReadInputTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CacheReadInputTokens
}

// GetCacheReadInputTokensOk returns a tuple with the CacheReadInputTokens field value
// and a boolean to check if the value has been set.
func (o *MessageUsage) GetCacheReadInputTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheReadInputTokens, true
}

// SetCacheReadInputTokens sets field value
func (o *MessageUsage) SetCacheReadInputTokens(v int32) {
	o.CacheReadInputTokens = v
}

// GetInputTokens returns the InputTokens field value
func (o *MessageUsage) GetInputTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InputTokens
}

// GetInputTokensOk returns a tuple with the InputTokens field value
// and a boolean to check if the value has been set.
func (o *MessageUsage) GetInputTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputTokens, true
}

// SetInputTokens sets field value
func (o *MessageUsage) SetInputTokens(v int32) {
	o.InputTokens = v
}

// GetOutputTokens returns the OutputTokens field value
func (o *MessageUsage) GetOutputTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OutputTokens
}

// GetOutputTokensOk returns a tuple with the OutputTokens field value
// and a boolean to check if the value has been set.
func (o *MessageUsage) GetOutputTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutputTokens, true
}

// SetOutputTokens sets field value
func (o *MessageUsage) SetOutputTokens(v int32) {
	o.OutputTokens = v
}

func (o MessageUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cache_creation_input_tokens"] = o.CacheCreationInputTokens
	toSerialize["cache_read_input_tokens"] = o.CacheReadInputTokens
	toSerialize["input_tokens"] = o.InputTokens
	toSerialize["output_tokens"] = o.OutputTokens

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cache_creation_input_tokens",
		"cache_read_input_tokens",
		"input_tokens",
		"output_tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageUsage := _MessageUsage{}

	err = json.Unmarshal(data, &varMessageUsage)

	if err != nil {
		return err
	}

	*o = MessageUsage(varMessageUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cache_creation_input_tokens")
		delete(additionalProperties, "cache_read_input_tokens")
		delete(additionalProperties, "input_tokens")
		delete(additionalProperties, "output_tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageUsage struct {
	value *MessageUsage
	isSet bool
}

func (v NullableMessageUsage) Get() *MessageUsage {
	return v.value
}

func (v *NullableMessageUsage) Set(val *MessageUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageUsage(val *MessageUsage) *NullableMessageUsage {
	return &NullableMessageUsage{value: val, isSet: true}
}

func (v NullableMessageUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
