/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ImageUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageUrl{}

// ImageUrl Image URL object of Image prompt
type ImageUrl struct {
	// Specifies the detail level of the image.
	Detail NullableString `json:"detail,omitempty"`
	// URL of the image.
	Url                  string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _ImageUrl ImageUrl

// NewImageUrl instantiates a new ImageUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageUrl(url string) *ImageUrl {
	this := ImageUrl{}
	this.Url = url
	return &this
}

// NewImageUrlWithDefaults instantiates a new ImageUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageUrlWithDefaults() *ImageUrl {
	this := ImageUrl{}
	return &this
}

// GetDetail returns the Detail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageUrl) GetDetail() string {
	if o == nil || IsNil(o.Detail.Get()) {
		var ret string
		return ret
	}
	return *o.Detail.Get()
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageUrl) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Detail.Get(), o.Detail.IsSet()
}

// HasDetail returns a boolean if a field has been set.
func (o *ImageUrl) HasDetail() bool {
	if o != nil && o.Detail.IsSet() {
		return true
	}

	return false
}

// SetDetail gets a reference to the given NullableString and assigns it to the Detail field.
func (o *ImageUrl) SetDetail(v string) {
	o.Detail.Set(&v)
}

// SetDetailNil sets the value for Detail to be an explicit nil
func (o *ImageUrl) SetDetailNil() {
	o.Detail.Set(nil)
}

// UnsetDetail ensures that no value is present for Detail, not even an explicit nil
func (o *ImageUrl) UnsetDetail() {
	o.Detail.Unset()
}

// GetUrl returns the Url field value
func (o *ImageUrl) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ImageUrl) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ImageUrl) SetUrl(v string) {
	o.Url = v
}

func (o ImageUrl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Detail.IsSet() {
		toSerialize["detail"] = o.Detail.Get()
	}
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImageUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageUrl := _ImageUrl{}

	err = json.Unmarshal(data, &varImageUrl)

	if err != nil {
		return err
	}

	*o = ImageUrl(varImageUrl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detail")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImageUrl struct {
	value *ImageUrl
	isSet bool
}

func (v NullableImageUrl) Get() *ImageUrl {
	return v.value
}

func (v *NullableImageUrl) Set(val *ImageUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableImageUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableImageUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageUrl(val *ImageUrl) *NullableImageUrl {
	return &NullableImageUrl{value: val, isSet: true}
}

func (v NullableImageUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
