/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the TopLogProb type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopLogProb{}

// TopLogProb struct for TopLogProb
type TopLogProb struct {
	// The ASCII encoding of the output character.
	Bytes []int32 `json:"bytes,omitempty"`
	// The log probability of returning this token.
	Logprob float32 `json:"logprob"`
	// The token.
	Token                string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _TopLogProb TopLogProb

// NewTopLogProb instantiates a new TopLogProb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopLogProb(logprob float32, token string) *TopLogProb {
	this := TopLogProb{}
	this.Logprob = logprob
	this.Token = token
	return &this
}

// NewTopLogProbWithDefaults instantiates a new TopLogProb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopLogProbWithDefaults() *TopLogProb {
	this := TopLogProb{}
	return &this
}

// GetBytes returns the Bytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TopLogProb) GetBytes() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TopLogProb) GetBytesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Bytes) {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *TopLogProb) HasBytes() bool {
	if o != nil && !IsNil(o.Bytes) {
		return true
	}

	return false
}

// SetBytes gets a reference to the given []int32 and assigns it to the Bytes field.
func (o *TopLogProb) SetBytes(v []int32) {
	o.Bytes = v
}

// GetLogprob returns the Logprob field value
func (o *TopLogProb) GetLogprob() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Logprob
}

// GetLogprobOk returns a tuple with the Logprob field value
// and a boolean to check if the value has been set.
func (o *TopLogProb) GetLogprobOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logprob, true
}

// SetLogprob sets field value
func (o *TopLogProb) SetLogprob(v float32) {
	o.Logprob = v
}

// GetToken returns the Token field value
func (o *TopLogProb) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *TopLogProb) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *TopLogProb) SetToken(v string) {
	o.Token = v
}

func (o TopLogProb) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopLogProb) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bytes != nil {
		toSerialize["bytes"] = o.Bytes
	}
	toSerialize["logprob"] = o.Logprob
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TopLogProb) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logprob",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTopLogProb := _TopLogProb{}

	err = json.Unmarshal(data, &varTopLogProb)

	if err != nil {
		return err
	}

	*o = TopLogProb(varTopLogProb)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bytes")
		delete(additionalProperties, "logprob")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTopLogProb struct {
	value *TopLogProb
	isSet bool
}

func (v NullableTopLogProb) Get() *TopLogProb {
	return v.value
}

func (v *NullableTopLogProb) Set(val *TopLogProb) {
	v.value = val
	v.isSet = true
}

func (v NullableTopLogProb) IsSet() bool {
	return v.isSet
}

func (v *NullableTopLogProb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopLogProb(val *TopLogProb) *NullableTopLogProb {
	return &NullableTopLogProb{value: val, isSet: true}
}

func (v NullableTopLogProb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopLogProb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
