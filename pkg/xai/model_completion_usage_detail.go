/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the CompletionUsageDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionUsageDetail{}

// CompletionUsageDetail Details of completion usage.
type CompletionUsageDetail struct {
	// The number of tokens in the prediction that appeared in the completion.
	AcceptedPredictionTokens int32 `json:"accepted_prediction_tokens"`
	// Audio input tokens generated by the model.
	AudioTokens int32 `json:"audio_tokens"`
	// Tokens generated by the model for reasoning.
	ReasoningTokens int32 `json:"reasoning_tokens"`
	// The number of tokens in the prediction that did not appear in the completion.
	RejectedPredictionTokens int32 `json:"rejected_prediction_tokens"`
	AdditionalProperties     map[string]interface{}
}

type _CompletionUsageDetail CompletionUsageDetail

// NewCompletionUsageDetail instantiates a new CompletionUsageDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionUsageDetail(acceptedPredictionTokens int32, audioTokens int32, reasoningTokens int32, rejectedPredictionTokens int32) *CompletionUsageDetail {
	this := CompletionUsageDetail{}
	this.AcceptedPredictionTokens = acceptedPredictionTokens
	this.AudioTokens = audioTokens
	this.ReasoningTokens = reasoningTokens
	this.RejectedPredictionTokens = rejectedPredictionTokens
	return &this
}

// NewCompletionUsageDetailWithDefaults instantiates a new CompletionUsageDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionUsageDetailWithDefaults() *CompletionUsageDetail {
	this := CompletionUsageDetail{}
	return &this
}

// GetAcceptedPredictionTokens returns the AcceptedPredictionTokens field value
func (o *CompletionUsageDetail) GetAcceptedPredictionTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AcceptedPredictionTokens
}

// GetAcceptedPredictionTokensOk returns a tuple with the AcceptedPredictionTokens field value
// and a boolean to check if the value has been set.
func (o *CompletionUsageDetail) GetAcceptedPredictionTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedPredictionTokens, true
}

// SetAcceptedPredictionTokens sets field value
func (o *CompletionUsageDetail) SetAcceptedPredictionTokens(v int32) {
	o.AcceptedPredictionTokens = v
}

// GetAudioTokens returns the AudioTokens field value
func (o *CompletionUsageDetail) GetAudioTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AudioTokens
}

// GetAudioTokensOk returns a tuple with the AudioTokens field value
// and a boolean to check if the value has been set.
func (o *CompletionUsageDetail) GetAudioTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioTokens, true
}

// SetAudioTokens sets field value
func (o *CompletionUsageDetail) SetAudioTokens(v int32) {
	o.AudioTokens = v
}

// GetReasoningTokens returns the ReasoningTokens field value
func (o *CompletionUsageDetail) GetReasoningTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReasoningTokens
}

// GetReasoningTokensOk returns a tuple with the ReasoningTokens field value
// and a boolean to check if the value has been set.
func (o *CompletionUsageDetail) GetReasoningTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasoningTokens, true
}

// SetReasoningTokens sets field value
func (o *CompletionUsageDetail) SetReasoningTokens(v int32) {
	o.ReasoningTokens = v
}

// GetRejectedPredictionTokens returns the RejectedPredictionTokens field value
func (o *CompletionUsageDetail) GetRejectedPredictionTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RejectedPredictionTokens
}

// GetRejectedPredictionTokensOk returns a tuple with the RejectedPredictionTokens field value
// and a boolean to check if the value has been set.
func (o *CompletionUsageDetail) GetRejectedPredictionTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectedPredictionTokens, true
}

// SetRejectedPredictionTokens sets field value
func (o *CompletionUsageDetail) SetRejectedPredictionTokens(v int32) {
	o.RejectedPredictionTokens = v
}

func (o CompletionUsageDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionUsageDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accepted_prediction_tokens"] = o.AcceptedPredictionTokens
	toSerialize["audio_tokens"] = o.AudioTokens
	toSerialize["reasoning_tokens"] = o.ReasoningTokens
	toSerialize["rejected_prediction_tokens"] = o.RejectedPredictionTokens

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompletionUsageDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accepted_prediction_tokens",
		"audio_tokens",
		"reasoning_tokens",
		"rejected_prediction_tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletionUsageDetail := _CompletionUsageDetail{}

	err = json.Unmarshal(data, &varCompletionUsageDetail)

	if err != nil {
		return err
	}

	*o = CompletionUsageDetail(varCompletionUsageDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accepted_prediction_tokens")
		delete(additionalProperties, "audio_tokens")
		delete(additionalProperties, "reasoning_tokens")
		delete(additionalProperties, "rejected_prediction_tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompletionUsageDetail struct {
	value *CompletionUsageDetail
	isSet bool
}

func (v NullableCompletionUsageDetail) Get() *CompletionUsageDetail {
	return v.value
}

func (v *NullableCompletionUsageDetail) Set(val *CompletionUsageDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionUsageDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionUsageDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionUsageDetail(val *CompletionUsageDetail) *NullableCompletionUsageDetail {
	return &NullableCompletionUsageDetail{value: val, isSet: true}
}

func (v NullableCompletionUsageDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionUsageDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
