/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MessageResponseContent - struct for MessageResponseContent
type MessageResponseContent struct {
	MessageResponseContentOneOf  *MessageResponseContentOneOf
	MessageResponseContentOneOf1 *MessageResponseContentOneOf1
	MessageResponseContentOneOf2 *MessageResponseContentOneOf2
	MessageResponseContentOneOf3 *MessageResponseContentOneOf3
}

// MessageResponseContentOneOfAsMessageResponseContent is a convenience function that returns MessageResponseContentOneOf wrapped in MessageResponseContent
func MessageResponseContentOneOfAsMessageResponseContent(v *MessageResponseContentOneOf) MessageResponseContent {
	return MessageResponseContent{
		MessageResponseContentOneOf: v,
	}
}

// MessageResponseContentOneOf1AsMessageResponseContent is a convenience function that returns MessageResponseContentOneOf1 wrapped in MessageResponseContent
func MessageResponseContentOneOf1AsMessageResponseContent(v *MessageResponseContentOneOf1) MessageResponseContent {
	return MessageResponseContent{
		MessageResponseContentOneOf1: v,
	}
}

// MessageResponseContentOneOf2AsMessageResponseContent is a convenience function that returns MessageResponseContentOneOf2 wrapped in MessageResponseContent
func MessageResponseContentOneOf2AsMessageResponseContent(v *MessageResponseContentOneOf2) MessageResponseContent {
	return MessageResponseContent{
		MessageResponseContentOneOf2: v,
	}
}

// MessageResponseContentOneOf3AsMessageResponseContent is a convenience function that returns MessageResponseContentOneOf3 wrapped in MessageResponseContent
func MessageResponseContentOneOf3AsMessageResponseContent(v *MessageResponseContentOneOf3) MessageResponseContent {
	return MessageResponseContent{
		MessageResponseContentOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageResponseContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageResponseContentOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageResponseContentOneOf)
	if err == nil {
		jsonMessageResponseContentOneOf, _ := json.Marshal(dst.MessageResponseContentOneOf)
		if string(jsonMessageResponseContentOneOf) == "{}" { // empty struct
			dst.MessageResponseContentOneOf = nil
		} else {
			if err = validator.Validate(dst.MessageResponseContentOneOf); err != nil {
				dst.MessageResponseContentOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageResponseContentOneOf = nil
	}

	// try to unmarshal data into MessageResponseContentOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageResponseContentOneOf1)
	if err == nil {
		jsonMessageResponseContentOneOf1, _ := json.Marshal(dst.MessageResponseContentOneOf1)
		if string(jsonMessageResponseContentOneOf1) == "{}" { // empty struct
			dst.MessageResponseContentOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MessageResponseContentOneOf1); err != nil {
				dst.MessageResponseContentOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageResponseContentOneOf1 = nil
	}

	// try to unmarshal data into MessageResponseContentOneOf2
	err = newStrictDecoder(data).Decode(&dst.MessageResponseContentOneOf2)
	if err == nil {
		jsonMessageResponseContentOneOf2, _ := json.Marshal(dst.MessageResponseContentOneOf2)
		if string(jsonMessageResponseContentOneOf2) == "{}" { // empty struct
			dst.MessageResponseContentOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MessageResponseContentOneOf2); err != nil {
				dst.MessageResponseContentOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageResponseContentOneOf2 = nil
	}

	// try to unmarshal data into MessageResponseContentOneOf3
	err = newStrictDecoder(data).Decode(&dst.MessageResponseContentOneOf3)
	if err == nil {
		jsonMessageResponseContentOneOf3, _ := json.Marshal(dst.MessageResponseContentOneOf3)
		if string(jsonMessageResponseContentOneOf3) == "{}" { // empty struct
			dst.MessageResponseContentOneOf3 = nil
		} else {
			if err = validator.Validate(dst.MessageResponseContentOneOf3); err != nil {
				dst.MessageResponseContentOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageResponseContentOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageResponseContentOneOf = nil
		dst.MessageResponseContentOneOf1 = nil
		dst.MessageResponseContentOneOf2 = nil
		dst.MessageResponseContentOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageResponseContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageResponseContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageResponseContent) MarshalJSON() ([]byte, error) {
	if src.MessageResponseContentOneOf != nil {
		return json.Marshal(&src.MessageResponseContentOneOf)
	}

	if src.MessageResponseContentOneOf1 != nil {
		return json.Marshal(&src.MessageResponseContentOneOf1)
	}

	if src.MessageResponseContentOneOf2 != nil {
		return json.Marshal(&src.MessageResponseContentOneOf2)
	}

	if src.MessageResponseContentOneOf3 != nil {
		return json.Marshal(&src.MessageResponseContentOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageResponseContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageResponseContentOneOf != nil {
		return obj.MessageResponseContentOneOf
	}

	if obj.MessageResponseContentOneOf1 != nil {
		return obj.MessageResponseContentOneOf1
	}

	if obj.MessageResponseContentOneOf2 != nil {
		return obj.MessageResponseContentOneOf2
	}

	if obj.MessageResponseContentOneOf3 != nil {
		return obj.MessageResponseContentOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MessageResponseContent) GetActualInstanceValue() interface{} {
	if obj.MessageResponseContentOneOf != nil {
		return *obj.MessageResponseContentOneOf
	}

	if obj.MessageResponseContentOneOf1 != nil {
		return *obj.MessageResponseContentOneOf1
	}

	if obj.MessageResponseContentOneOf2 != nil {
		return *obj.MessageResponseContentOneOf2
	}

	if obj.MessageResponseContentOneOf3 != nil {
		return *obj.MessageResponseContentOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableMessageResponseContent struct {
	value *MessageResponseContent
	isSet bool
}

func (v NullableMessageResponseContent) Get() *MessageResponseContent {
	return v.value
}

func (v *NullableMessageResponseContent) Set(val *MessageResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageResponseContent(val *MessageResponseContent) *NullableMessageResponseContent {
	return &NullableMessageResponseContent{value: val, isSet: true}
}

func (v NullableMessageResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
