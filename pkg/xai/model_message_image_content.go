/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MessageImageContent - struct for MessageImageContent
type MessageImageContent struct {
	MessageImageContentOneOf  *MessageImageContentOneOf
	MessageImageContentOneOf1 *MessageImageContentOneOf1
}

// MessageImageContentOneOfAsMessageImageContent is a convenience function that returns MessageImageContentOneOf wrapped in MessageImageContent
func MessageImageContentOneOfAsMessageImageContent(v *MessageImageContentOneOf) MessageImageContent {
	return MessageImageContent{
		MessageImageContentOneOf: v,
	}
}

// MessageImageContentOneOf1AsMessageImageContent is a convenience function that returns MessageImageContentOneOf1 wrapped in MessageImageContent
func MessageImageContentOneOf1AsMessageImageContent(v *MessageImageContentOneOf1) MessageImageContent {
	return MessageImageContent{
		MessageImageContentOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageImageContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageImageContentOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageImageContentOneOf)
	if err == nil {
		jsonMessageImageContentOneOf, _ := json.Marshal(dst.MessageImageContentOneOf)
		if string(jsonMessageImageContentOneOf) == "{}" { // empty struct
			dst.MessageImageContentOneOf = nil
		} else {
			if err = validator.Validate(dst.MessageImageContentOneOf); err != nil {
				dst.MessageImageContentOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageImageContentOneOf = nil
	}

	// try to unmarshal data into MessageImageContentOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageImageContentOneOf1)
	if err == nil {
		jsonMessageImageContentOneOf1, _ := json.Marshal(dst.MessageImageContentOneOf1)
		if string(jsonMessageImageContentOneOf1) == "{}" { // empty struct
			dst.MessageImageContentOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MessageImageContentOneOf1); err != nil {
				dst.MessageImageContentOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageImageContentOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageImageContentOneOf = nil
		dst.MessageImageContentOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageImageContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageImageContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageImageContent) MarshalJSON() ([]byte, error) {
	if src.MessageImageContentOneOf != nil {
		return json.Marshal(&src.MessageImageContentOneOf)
	}

	if src.MessageImageContentOneOf1 != nil {
		return json.Marshal(&src.MessageImageContentOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageImageContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageImageContentOneOf != nil {
		return obj.MessageImageContentOneOf
	}

	if obj.MessageImageContentOneOf1 != nil {
		return obj.MessageImageContentOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MessageImageContent) GetActualInstanceValue() interface{} {
	if obj.MessageImageContentOneOf != nil {
		return *obj.MessageImageContentOneOf
	}

	if obj.MessageImageContentOneOf1 != nil {
		return *obj.MessageImageContentOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableMessageImageContent struct {
	value *MessageImageContent
	isSet bool
}

func (v NullableMessageImageContent) Get() *MessageImageContent {
	return v.value
}

func (v *NullableMessageImageContent) Set(val *MessageImageContent) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageImageContent) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageImageContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageImageContent(val *MessageImageContent) *NullableMessageImageContent {
	return &NullableMessageImageContent{value: val, isSet: true}
}

func (v NullableMessageImageContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageImageContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
