/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the EditImageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditImageRequest{}

// EditImageRequest Request for editing image
type EditImageRequest struct {
	// Input image to perform edit on.
	Image ImageUrl         `json:"image"`
	Mask  NullableImageUrl `json:"mask,omitempty"`
	// Model to be used.
	Model NullableString `json:"model,omitempty"`
	// Number of image edits to be generated.
	N NullableInt32 `json:"n,omitempty"`
	// Prompt for image editing.
	Prompt string `json:"prompt"`
	// Response format to return the image in. Can be `url` or `b64_json`. If `b64_json` is specified, the image will be returned as a base64-encoded string instead of a url to the generated image file.
	ResponseFormat NullableString `json:"response_format,omitempty"`
	// (Not supported) Size of the image.
	Size NullableString `json:"size,omitempty"`
	// (Not supported) Style of the image.
	Style NullableString `json:"style,omitempty"`
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	User                 NullableString `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EditImageRequest EditImageRequest

// NewEditImageRequest instantiates a new EditImageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditImageRequest(image ImageUrl, prompt string) *EditImageRequest {
	this := EditImageRequest{}
	this.Image = image
	this.Prompt = prompt
	var responseFormat string = "url"
	this.ResponseFormat = *NewNullableString(&responseFormat)
	return &this
}

// NewEditImageRequestWithDefaults instantiates a new EditImageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditImageRequestWithDefaults() *EditImageRequest {
	this := EditImageRequest{}
	var responseFormat string = "url"
	this.ResponseFormat = *NewNullableString(&responseFormat)
	return &this
}

// GetImage returns the Image field value
func (o *EditImageRequest) GetImage() ImageUrl {
	if o == nil {
		var ret ImageUrl
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *EditImageRequest) GetImageOk() (*ImageUrl, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *EditImageRequest) SetImage(v ImageUrl) {
	o.Image = v
}

// GetMask returns the Mask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetMask() ImageUrl {
	if o == nil || IsNil(o.Mask.Get()) {
		var ret ImageUrl
		return ret
	}
	return *o.Mask.Get()
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetMaskOk() (*ImageUrl, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mask.Get(), o.Mask.IsSet()
}

// HasMask returns a boolean if a field has been set.
func (o *EditImageRequest) HasMask() bool {
	if o != nil && o.Mask.IsSet() {
		return true
	}

	return false
}

// SetMask gets a reference to the given NullableImageUrl and assigns it to the Mask field.
func (o *EditImageRequest) SetMask(v ImageUrl) {
	o.Mask.Set(&v)
}

// SetMaskNil sets the value for Mask to be an explicit nil
func (o *EditImageRequest) SetMaskNil() {
	o.Mask.Set(nil)
}

// UnsetMask ensures that no value is present for Mask, not even an explicit nil
func (o *EditImageRequest) UnsetMask() {
	o.Mask.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetModel() string {
	if o == nil || IsNil(o.Model.Get()) {
		var ret string
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *EditImageRequest) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableString and assigns it to the Model field.
func (o *EditImageRequest) SetModel(v string) {
	o.Model.Set(&v)
}

// SetModelNil sets the value for Model to be an explicit nil
func (o *EditImageRequest) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *EditImageRequest) UnsetModel() {
	o.Model.Unset()
}

// GetN returns the N field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetN() int32 {
	if o == nil || IsNil(o.N.Get()) {
		var ret int32
		return ret
	}
	return *o.N.Get()
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetNOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.N.Get(), o.N.IsSet()
}

// HasN returns a boolean if a field has been set.
func (o *EditImageRequest) HasN() bool {
	if o != nil && o.N.IsSet() {
		return true
	}

	return false
}

// SetN gets a reference to the given NullableInt32 and assigns it to the N field.
func (o *EditImageRequest) SetN(v int32) {
	o.N.Set(&v)
}

// SetNNil sets the value for N to be an explicit nil
func (o *EditImageRequest) SetNNil() {
	o.N.Set(nil)
}

// UnsetN ensures that no value is present for N, not even an explicit nil
func (o *EditImageRequest) UnsetN() {
	o.N.Unset()
}

// GetPrompt returns the Prompt field value
func (o *EditImageRequest) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *EditImageRequest) GetPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *EditImageRequest) SetPrompt(v string) {
	o.Prompt = v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetResponseFormat() string {
	if o == nil || IsNil(o.ResponseFormat.Get()) {
		var ret string
		return ret
	}
	return *o.ResponseFormat.Get()
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetResponseFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponseFormat.Get(), o.ResponseFormat.IsSet()
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *EditImageRequest) HasResponseFormat() bool {
	if o != nil && o.ResponseFormat.IsSet() {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given NullableString and assigns it to the ResponseFormat field.
func (o *EditImageRequest) SetResponseFormat(v string) {
	o.ResponseFormat.Set(&v)
}

// SetResponseFormatNil sets the value for ResponseFormat to be an explicit nil
func (o *EditImageRequest) SetResponseFormatNil() {
	o.ResponseFormat.Set(nil)
}

// UnsetResponseFormat ensures that no value is present for ResponseFormat, not even an explicit nil
func (o *EditImageRequest) UnsetResponseFormat() {
	o.ResponseFormat.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetSize() string {
	if o == nil || IsNil(o.Size.Get()) {
		var ret string
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *EditImageRequest) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableString and assigns it to the Size field.
func (o *EditImageRequest) SetSize(v string) {
	o.Size.Set(&v)
}

// SetSizeNil sets the value for Size to be an explicit nil
func (o *EditImageRequest) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *EditImageRequest) UnsetSize() {
	o.Size.Unset()
}

// GetStyle returns the Style field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetStyle() string {
	if o == nil || IsNil(o.Style.Get()) {
		var ret string
		return ret
	}
	return *o.Style.Get()
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetStyleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Style.Get(), o.Style.IsSet()
}

// HasStyle returns a boolean if a field has been set.
func (o *EditImageRequest) HasStyle() bool {
	if o != nil && o.Style.IsSet() {
		return true
	}

	return false
}

// SetStyle gets a reference to the given NullableString and assigns it to the Style field.
func (o *EditImageRequest) SetStyle(v string) {
	o.Style.Set(&v)
}

// SetStyleNil sets the value for Style to be an explicit nil
func (o *EditImageRequest) SetStyleNil() {
	o.Style.Set(nil)
}

// UnsetStyle ensures that no value is present for Style, not even an explicit nil
func (o *EditImageRequest) UnsetStyle() {
	o.Style.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditImageRequest) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditImageRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *EditImageRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *EditImageRequest) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *EditImageRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *EditImageRequest) UnsetUser() {
	o.User.Unset()
}

func (o EditImageRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditImageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	if o.Mask.IsSet() {
		toSerialize["mask"] = o.Mask.Get()
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if o.N.IsSet() {
		toSerialize["n"] = o.N.Get()
	}
	toSerialize["prompt"] = o.Prompt
	if o.ResponseFormat.IsSet() {
		toSerialize["response_format"] = o.ResponseFormat.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.Style.IsSet() {
		toSerialize["style"] = o.Style.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EditImageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"prompt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditImageRequest := _EditImageRequest{}

	err = json.Unmarshal(data, &varEditImageRequest)

	if err != nil {
		return err
	}

	*o = EditImageRequest(varEditImageRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image")
		delete(additionalProperties, "mask")
		delete(additionalProperties, "model")
		delete(additionalProperties, "n")
		delete(additionalProperties, "prompt")
		delete(additionalProperties, "response_format")
		delete(additionalProperties, "size")
		delete(additionalProperties, "style")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEditImageRequest struct {
	value *EditImageRequest
	isSet bool
}

func (v NullableEditImageRequest) Get() *EditImageRequest {
	return v.value
}

func (v *NullableEditImageRequest) Set(val *EditImageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditImageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditImageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditImageRequest(val *EditImageRequest) *NullableEditImageRequest {
	return &NullableEditImageRequest{value: val, isSet: true}
}

func (v NullableEditImageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditImageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
