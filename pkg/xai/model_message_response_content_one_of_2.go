/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageResponseContentOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageResponseContentOneOf2{}

// MessageResponseContentOneOf2 Redacted thinking response for the model
type MessageResponseContentOneOf2 struct {
	// Signature of the content
	Data                 string `json:"data"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageResponseContentOneOf2 MessageResponseContentOneOf2

// NewMessageResponseContentOneOf2 instantiates a new MessageResponseContentOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageResponseContentOneOf2(data string, type_ string) *MessageResponseContentOneOf2 {
	this := MessageResponseContentOneOf2{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewMessageResponseContentOneOf2WithDefaults instantiates a new MessageResponseContentOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageResponseContentOneOf2WithDefaults() *MessageResponseContentOneOf2 {
	this := MessageResponseContentOneOf2{}
	return &this
}

// GetData returns the Data field value
func (o *MessageResponseContentOneOf2) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf2) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MessageResponseContentOneOf2) SetData(v string) {
	o.Data = v
}

// GetType returns the Type field value
func (o *MessageResponseContentOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageResponseContentOneOf2) SetType(v string) {
	o.Type = v
}

func (o MessageResponseContentOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageResponseContentOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageResponseContentOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageResponseContentOneOf2 := _MessageResponseContentOneOf2{}

	err = json.Unmarshal(data, &varMessageResponseContentOneOf2)

	if err != nil {
		return err
	}

	*o = MessageResponseContentOneOf2(varMessageResponseContentOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageResponseContentOneOf2 struct {
	value *MessageResponseContentOneOf2
	isSet bool
}

func (v NullableMessageResponseContentOneOf2) Get() *MessageResponseContentOneOf2 {
	return v.value
}

func (v *NullableMessageResponseContentOneOf2) Set(val *MessageResponseContentOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageResponseContentOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageResponseContentOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageResponseContentOneOf2(val *MessageResponseContentOneOf2) *NullableMessageResponseContentOneOf2 {
	return &NullableMessageResponseContentOneOf2{value: val, isSet: true}
}

func (v NullableMessageResponseContentOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageResponseContentOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
