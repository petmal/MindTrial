/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbeddingInputOneOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingInputOneOf3{}

// EmbeddingInputOneOf3 An array of tokens in integers to be embedded
type EmbeddingInputOneOf3 struct {
	// An array of tokens in integers to be embedded
	IntsArray            [][]int32 `json:"IntsArray"`
	AdditionalProperties map[string]interface{}
}

type _EmbeddingInputOneOf3 EmbeddingInputOneOf3

// NewEmbeddingInputOneOf3 instantiates a new EmbeddingInputOneOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingInputOneOf3(intsArray [][]int32) *EmbeddingInputOneOf3 {
	this := EmbeddingInputOneOf3{}
	this.IntsArray = intsArray
	return &this
}

// NewEmbeddingInputOneOf3WithDefaults instantiates a new EmbeddingInputOneOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingInputOneOf3WithDefaults() *EmbeddingInputOneOf3 {
	this := EmbeddingInputOneOf3{}
	return &this
}

// GetIntsArray returns the IntsArray field value
func (o *EmbeddingInputOneOf3) GetIntsArray() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.IntsArray
}

// GetIntsArrayOk returns a tuple with the IntsArray field value
// and a boolean to check if the value has been set.
func (o *EmbeddingInputOneOf3) GetIntsArrayOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntsArray, true
}

// SetIntsArray sets field value
func (o *EmbeddingInputOneOf3) SetIntsArray(v [][]int32) {
	o.IntsArray = v
}

func (o EmbeddingInputOneOf3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingInputOneOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["IntsArray"] = o.IntsArray

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbeddingInputOneOf3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IntsArray",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingInputOneOf3 := _EmbeddingInputOneOf3{}

	err = json.Unmarshal(data, &varEmbeddingInputOneOf3)

	if err != nil {
		return err
	}

	*o = EmbeddingInputOneOf3(varEmbeddingInputOneOf3)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "IntsArray")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbeddingInputOneOf3 struct {
	value *EmbeddingInputOneOf3
	isSet bool
}

func (v NullableEmbeddingInputOneOf3) Get() *EmbeddingInputOneOf3 {
	return v.value
}

func (v *NullableEmbeddingInputOneOf3) Set(val *EmbeddingInputOneOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingInputOneOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingInputOneOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingInputOneOf3(val *EmbeddingInputOneOf3) *NullableEmbeddingInputOneOf3 {
	return &NullableEmbeddingInputOneOf3{value: val, isSet: true}
}

func (v NullableEmbeddingInputOneOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingInputOneOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
