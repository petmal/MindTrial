/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageResponseContentOneOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageResponseContentOneOf3{}

// MessageResponseContentOneOf3 Request by the model to invoke a tool call.
type MessageResponseContentOneOf3 struct {
	// Tool call ID.
	Id    string      `json:"id"`
	Input interface{} `json:"input"`
	// Name of the tool call to be used.
	Name                 string `json:"name"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageResponseContentOneOf3 MessageResponseContentOneOf3

// NewMessageResponseContentOneOf3 instantiates a new MessageResponseContentOneOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageResponseContentOneOf3(id string, input interface{}, name string, type_ string) *MessageResponseContentOneOf3 {
	this := MessageResponseContentOneOf3{}
	this.Id = id
	this.Input = input
	this.Name = name
	this.Type = type_
	return &this
}

// NewMessageResponseContentOneOf3WithDefaults instantiates a new MessageResponseContentOneOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageResponseContentOneOf3WithDefaults() *MessageResponseContentOneOf3 {
	this := MessageResponseContentOneOf3{}
	return &this
}

// GetId returns the Id field value
func (o *MessageResponseContentOneOf3) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf3) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MessageResponseContentOneOf3) SetId(v string) {
	o.Id = v
}

// GetInput returns the Input field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MessageResponseContentOneOf3) GetInput() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageResponseContentOneOf3) GetInputOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *MessageResponseContentOneOf3) SetInput(v interface{}) {
	o.Input = v
}

// GetName returns the Name field value
func (o *MessageResponseContentOneOf3) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf3) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MessageResponseContentOneOf3) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *MessageResponseContentOneOf3) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf3) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageResponseContentOneOf3) SetType(v string) {
	o.Type = v
}

func (o MessageResponseContentOneOf3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageResponseContentOneOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageResponseContentOneOf3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"input",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageResponseContentOneOf3 := _MessageResponseContentOneOf3{}

	err = json.Unmarshal(data, &varMessageResponseContentOneOf3)

	if err != nil {
		return err
	}

	*o = MessageResponseContentOneOf3(varMessageResponseContentOneOf3)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "input")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageResponseContentOneOf3 struct {
	value *MessageResponseContentOneOf3
	isSet bool
}

func (v NullableMessageResponseContentOneOf3) Get() *MessageResponseContentOneOf3 {
	return v.value
}

func (v *NullableMessageResponseContentOneOf3) Set(val *MessageResponseContentOneOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageResponseContentOneOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageResponseContentOneOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageResponseContentOneOf3(val *MessageResponseContentOneOf3) *NullableMessageResponseContentOneOf3 {
	return &NullableMessageResponseContentOneOf3{value: val, isSet: true}
}

func (v NullableMessageResponseContentOneOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageResponseContentOneOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
