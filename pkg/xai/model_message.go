/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Message - Chat message objects.
type Message struct {
	MessageOneOf  *MessageOneOf
	MessageOneOf1 *MessageOneOf1
	MessageOneOf2 *MessageOneOf2
	MessageOneOf3 *MessageOneOf3
	MessageOneOf4 *MessageOneOf4
}

// MessageOneOfAsMessage is a convenience function that returns MessageOneOf wrapped in Message
func MessageOneOfAsMessage(v *MessageOneOf) Message {
	return Message{
		MessageOneOf: v,
	}
}

// MessageOneOf1AsMessage is a convenience function that returns MessageOneOf1 wrapped in Message
func MessageOneOf1AsMessage(v *MessageOneOf1) Message {
	return Message{
		MessageOneOf1: v,
	}
}

// MessageOneOf2AsMessage is a convenience function that returns MessageOneOf2 wrapped in Message
func MessageOneOf2AsMessage(v *MessageOneOf2) Message {
	return Message{
		MessageOneOf2: v,
	}
}

// MessageOneOf3AsMessage is a convenience function that returns MessageOneOf3 wrapped in Message
func MessageOneOf3AsMessage(v *MessageOneOf3) Message {
	return Message{
		MessageOneOf3: v,
	}
}

// MessageOneOf4AsMessage is a convenience function that returns MessageOneOf4 wrapped in Message
func MessageOneOf4AsMessage(v *MessageOneOf4) Message {
	return Message{
		MessageOneOf4: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Message) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageOneOf)
	if err == nil {
		jsonMessageOneOf, _ := json.Marshal(dst.MessageOneOf)
		if string(jsonMessageOneOf) == "{}" { // empty struct
			dst.MessageOneOf = nil
		} else {
			if err = validator.Validate(dst.MessageOneOf); err != nil {
				dst.MessageOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOneOf = nil
	}

	// try to unmarshal data into MessageOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageOneOf1)
	if err == nil {
		jsonMessageOneOf1, _ := json.Marshal(dst.MessageOneOf1)
		if string(jsonMessageOneOf1) == "{}" { // empty struct
			dst.MessageOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MessageOneOf1); err != nil {
				dst.MessageOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOneOf1 = nil
	}

	// try to unmarshal data into MessageOneOf2
	err = newStrictDecoder(data).Decode(&dst.MessageOneOf2)
	if err == nil {
		jsonMessageOneOf2, _ := json.Marshal(dst.MessageOneOf2)
		if string(jsonMessageOneOf2) == "{}" { // empty struct
			dst.MessageOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MessageOneOf2); err != nil {
				dst.MessageOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOneOf2 = nil
	}

	// try to unmarshal data into MessageOneOf3
	err = newStrictDecoder(data).Decode(&dst.MessageOneOf3)
	if err == nil {
		jsonMessageOneOf3, _ := json.Marshal(dst.MessageOneOf3)
		if string(jsonMessageOneOf3) == "{}" { // empty struct
			dst.MessageOneOf3 = nil
		} else {
			if err = validator.Validate(dst.MessageOneOf3); err != nil {
				dst.MessageOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOneOf3 = nil
	}

	// try to unmarshal data into MessageOneOf4
	err = newStrictDecoder(data).Decode(&dst.MessageOneOf4)
	if err == nil {
		jsonMessageOneOf4, _ := json.Marshal(dst.MessageOneOf4)
		if string(jsonMessageOneOf4) == "{}" { // empty struct
			dst.MessageOneOf4 = nil
		} else {
			if err = validator.Validate(dst.MessageOneOf4); err != nil {
				dst.MessageOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageOneOf = nil
		dst.MessageOneOf1 = nil
		dst.MessageOneOf2 = nil
		dst.MessageOneOf3 = nil
		dst.MessageOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Message)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Message)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Message) MarshalJSON() ([]byte, error) {
	if src.MessageOneOf != nil {
		return json.Marshal(&src.MessageOneOf)
	}

	if src.MessageOneOf1 != nil {
		return json.Marshal(&src.MessageOneOf1)
	}

	if src.MessageOneOf2 != nil {
		return json.Marshal(&src.MessageOneOf2)
	}

	if src.MessageOneOf3 != nil {
		return json.Marshal(&src.MessageOneOf3)
	}

	if src.MessageOneOf4 != nil {
		return json.Marshal(&src.MessageOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Message) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageOneOf != nil {
		return obj.MessageOneOf
	}

	if obj.MessageOneOf1 != nil {
		return obj.MessageOneOf1
	}

	if obj.MessageOneOf2 != nil {
		return obj.MessageOneOf2
	}

	if obj.MessageOneOf3 != nil {
		return obj.MessageOneOf3
	}

	if obj.MessageOneOf4 != nil {
		return obj.MessageOneOf4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Message) GetActualInstanceValue() interface{} {
	if obj.MessageOneOf != nil {
		return *obj.MessageOneOf
	}

	if obj.MessageOneOf1 != nil {
		return *obj.MessageOneOf1
	}

	if obj.MessageOneOf2 != nil {
		return *obj.MessageOneOf2
	}

	if obj.MessageOneOf3 != nil {
		return *obj.MessageOneOf3
	}

	if obj.MessageOneOf4 != nil {
		return *obj.MessageOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
