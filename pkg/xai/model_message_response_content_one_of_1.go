/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageResponseContentOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageResponseContentOneOf1{}

// MessageResponseContentOneOf1 Thinking response for the model
type MessageResponseContentOneOf1 struct {
	// Signature of the content
	Signature string `json:"signature"`
	// Thinking content
	Thinking             string `json:"thinking"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageResponseContentOneOf1 MessageResponseContentOneOf1

// NewMessageResponseContentOneOf1 instantiates a new MessageResponseContentOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageResponseContentOneOf1(signature string, thinking string, type_ string) *MessageResponseContentOneOf1 {
	this := MessageResponseContentOneOf1{}
	this.Signature = signature
	this.Thinking = thinking
	this.Type = type_
	return &this
}

// NewMessageResponseContentOneOf1WithDefaults instantiates a new MessageResponseContentOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageResponseContentOneOf1WithDefaults() *MessageResponseContentOneOf1 {
	this := MessageResponseContentOneOf1{}
	return &this
}

// GetSignature returns the Signature field value
func (o *MessageResponseContentOneOf1) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf1) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *MessageResponseContentOneOf1) SetSignature(v string) {
	o.Signature = v
}

// GetThinking returns the Thinking field value
func (o *MessageResponseContentOneOf1) GetThinking() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Thinking
}

// GetThinkingOk returns a tuple with the Thinking field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf1) GetThinkingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thinking, true
}

// SetThinking sets field value
func (o *MessageResponseContentOneOf1) SetThinking(v string) {
	o.Thinking = v
}

// GetType returns the Type field value
func (o *MessageResponseContentOneOf1) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageResponseContentOneOf1) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageResponseContentOneOf1) SetType(v string) {
	o.Type = v
}

func (o MessageResponseContentOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageResponseContentOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signature"] = o.Signature
	toSerialize["thinking"] = o.Thinking
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageResponseContentOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signature",
		"thinking",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageResponseContentOneOf1 := _MessageResponseContentOneOf1{}

	err = json.Unmarshal(data, &varMessageResponseContentOneOf1)

	if err != nil {
		return err
	}

	*o = MessageResponseContentOneOf1(varMessageResponseContentOneOf1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "signature")
		delete(additionalProperties, "thinking")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageResponseContentOneOf1 struct {
	value *MessageResponseContentOneOf1
	isSet bool
}

func (v NullableMessageResponseContentOneOf1) Get() *MessageResponseContentOneOf1 {
	return v.value
}

func (v *NullableMessageResponseContentOneOf1) Set(val *MessageResponseContentOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageResponseContentOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageResponseContentOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageResponseContentOneOf1(val *MessageResponseContentOneOf1) *NullableMessageResponseContentOneOf1 {
	return &NullableMessageResponseContentOneOf1{value: val, isSet: true}
}

func (v NullableMessageResponseContentOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageResponseContentOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
