/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchSourceOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchSourceOneOf2{}

// SearchSourceOneOf2 struct for SearchSourceOneOf2
type SearchSourceOneOf2 struct {
	// ISO alpha-2 code of the country. If the country is set, only data coming from this country will be considered. See https://en.wikipedia.org/wiki/ISO_3166-2.
	Country NullableString `json:"country,omitempty"`
	// List of website to exclude from the search results without protocol specification or subdomains. A maximum of 5 websites can be excluded.
	ExcludedWebsites []string `json:"excluded_websites,omitempty"`
	// If set to true, mature content won't be considered during the search. Default to `true`.
	SafeSearch           NullableBool `json:"safe_search,omitempty"`
	Type                 string       `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _SearchSourceOneOf2 SearchSourceOneOf2

// NewSearchSourceOneOf2 instantiates a new SearchSourceOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSourceOneOf2(type_ string) *SearchSourceOneOf2 {
	this := SearchSourceOneOf2{}
	this.Type = type_
	return &this
}

// NewSearchSourceOneOf2WithDefaults instantiates a new SearchSourceOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSourceOneOf2WithDefaults() *SearchSourceOneOf2 {
	this := SearchSourceOneOf2{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf2) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf2) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *SearchSourceOneOf2) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *SearchSourceOneOf2) SetCountry(v string) {
	o.Country.Set(&v)
}

// SetCountryNil sets the value for Country to be an explicit nil
func (o *SearchSourceOneOf2) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *SearchSourceOneOf2) UnsetCountry() {
	o.Country.Unset()
}

// GetExcludedWebsites returns the ExcludedWebsites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf2) GetExcludedWebsites() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedWebsites
}

// GetExcludedWebsitesOk returns a tuple with the ExcludedWebsites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf2) GetExcludedWebsitesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedWebsites) {
		return nil, false
	}
	return o.ExcludedWebsites, true
}

// HasExcludedWebsites returns a boolean if a field has been set.
func (o *SearchSourceOneOf2) HasExcludedWebsites() bool {
	if o != nil && !IsNil(o.ExcludedWebsites) {
		return true
	}

	return false
}

// SetExcludedWebsites gets a reference to the given []string and assigns it to the ExcludedWebsites field.
func (o *SearchSourceOneOf2) SetExcludedWebsites(v []string) {
	o.ExcludedWebsites = v
}

// GetSafeSearch returns the SafeSearch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf2) GetSafeSearch() bool {
	if o == nil || IsNil(o.SafeSearch.Get()) {
		var ret bool
		return ret
	}
	return *o.SafeSearch.Get()
}

// GetSafeSearchOk returns a tuple with the SafeSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf2) GetSafeSearchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SafeSearch.Get(), o.SafeSearch.IsSet()
}

// HasSafeSearch returns a boolean if a field has been set.
func (o *SearchSourceOneOf2) HasSafeSearch() bool {
	if o != nil && o.SafeSearch.IsSet() {
		return true
	}

	return false
}

// SetSafeSearch gets a reference to the given NullableBool and assigns it to the SafeSearch field.
func (o *SearchSourceOneOf2) SetSafeSearch(v bool) {
	o.SafeSearch.Set(&v)
}

// SetSafeSearchNil sets the value for SafeSearch to be an explicit nil
func (o *SearchSourceOneOf2) SetSafeSearchNil() {
	o.SafeSearch.Set(nil)
}

// UnsetSafeSearch ensures that no value is present for SafeSearch, not even an explicit nil
func (o *SearchSourceOneOf2) UnsetSafeSearch() {
	o.SafeSearch.Unset()
}

// GetType returns the Type field value
func (o *SearchSourceOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SearchSourceOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SearchSourceOneOf2) SetType(v string) {
	o.Type = v
}

func (o SearchSourceOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchSourceOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.ExcludedWebsites != nil {
		toSerialize["excluded_websites"] = o.ExcludedWebsites
	}
	if o.SafeSearch.IsSet() {
		toSerialize["safe_search"] = o.SafeSearch.Get()
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchSourceOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchSourceOneOf2 := _SearchSourceOneOf2{}

	err = json.Unmarshal(data, &varSearchSourceOneOf2)

	if err != nil {
		return err
	}

	*o = SearchSourceOneOf2(varSearchSourceOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "country")
		delete(additionalProperties, "excluded_websites")
		delete(additionalProperties, "safe_search")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchSourceOneOf2 struct {
	value *SearchSourceOneOf2
	isSet bool
}

func (v NullableSearchSourceOneOf2) Get() *SearchSourceOneOf2 {
	return v.value
}

func (v *NullableSearchSourceOneOf2) Set(val *SearchSourceOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSourceOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSourceOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSourceOneOf2(val *SearchSourceOneOf2) *NullableSearchSourceOneOf2 {
	return &NullableSearchSourceOneOf2{value: val, isSet: true}
}

func (v NullableSearchSourceOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSourceOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
