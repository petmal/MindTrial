/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbeddingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingResponse{}

// EmbeddingResponse struct for EmbeddingResponse
type EmbeddingResponse struct {
	// A list of embedding objects.
	Data []Embedding `json:"data"`
	// Model ID used to create embedding.
	Model string `json:"model"`
	// The object type of `data` field, which is always `\"list\"`.
	Object string `json:"object"`
	// Token usage information.
	Usage                NullableEmbeddingUsage `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbeddingResponse EmbeddingResponse

// NewEmbeddingResponse instantiates a new EmbeddingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingResponse(data []Embedding, model string, object string) *EmbeddingResponse {
	this := EmbeddingResponse{}
	this.Data = data
	this.Model = model
	this.Object = object
	return &this
}

// NewEmbeddingResponseWithDefaults instantiates a new EmbeddingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingResponseWithDefaults() *EmbeddingResponse {
	this := EmbeddingResponse{}
	return &this
}

// GetData returns the Data field value
func (o *EmbeddingResponse) GetData() []Embedding {
	if o == nil {
		var ret []Embedding
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetDataOk() ([]Embedding, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *EmbeddingResponse) SetData(v []Embedding) {
	o.Data = v
}

// GetModel returns the Model field value
func (o *EmbeddingResponse) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *EmbeddingResponse) SetModel(v string) {
	o.Model = v
}

// GetObject returns the Object field value
func (o *EmbeddingResponse) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *EmbeddingResponse) SetObject(v string) {
	o.Object = v
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingResponse) GetUsage() EmbeddingUsage {
	if o == nil || IsNil(o.Usage.Get()) {
		var ret EmbeddingUsage
		return ret
	}
	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingResponse) GetUsageOk() (*EmbeddingUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// HasUsage returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasUsage() bool {
	if o != nil && o.Usage.IsSet() {
		return true
	}

	return false
}

// SetUsage gets a reference to the given NullableEmbeddingUsage and assigns it to the Usage field.
func (o *EmbeddingResponse) SetUsage(v EmbeddingUsage) {
	o.Usage.Set(&v)
}

// SetUsageNil sets the value for Usage to be an explicit nil
func (o *EmbeddingResponse) SetUsageNil() {
	o.Usage.Set(nil)
}

// UnsetUsage ensures that no value is present for Usage, not even an explicit nil
func (o *EmbeddingResponse) UnsetUsage() {
	o.Usage.Unset()
}

func (o EmbeddingResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["model"] = o.Model
	toSerialize["object"] = o.Object
	if o.Usage.IsSet() {
		toSerialize["usage"] = o.Usage.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbeddingResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"model",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingResponse := _EmbeddingResponse{}

	err = json.Unmarshal(data, &varEmbeddingResponse)

	if err != nil {
		return err
	}

	*o = EmbeddingResponse(varEmbeddingResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "model")
		delete(additionalProperties, "object")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbeddingResponse struct {
	value *EmbeddingResponse
	isSet bool
}

func (v NullableEmbeddingResponse) Get() *EmbeddingResponse {
	return v.value
}

func (v *NullableEmbeddingResponse) Set(val *EmbeddingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingResponse(val *EmbeddingResponse) *NullableEmbeddingResponse {
	return &NullableEmbeddingResponse{value: val, isSet: true}
}

func (v NullableEmbeddingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
