/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MessageContentPart - struct for MessageContentPart
type MessageContentPart struct {
	MessageContentPartOneOf  *MessageContentPartOneOf
	MessageContentPartOneOf1 *MessageContentPartOneOf1
	MessageContentPartOneOf2 *MessageContentPartOneOf2
	MessageContentPartOneOf3 *MessageContentPartOneOf3
	MessageContentPartOneOf4 *MessageContentPartOneOf4
	MessageContentPartOneOf5 *MessageContentPartOneOf5
}

// MessageContentPartOneOfAsMessageContentPart is a convenience function that returns MessageContentPartOneOf wrapped in MessageContentPart
func MessageContentPartOneOfAsMessageContentPart(v *MessageContentPartOneOf) MessageContentPart {
	return MessageContentPart{
		MessageContentPartOneOf: v,
	}
}

// MessageContentPartOneOf1AsMessageContentPart is a convenience function that returns MessageContentPartOneOf1 wrapped in MessageContentPart
func MessageContentPartOneOf1AsMessageContentPart(v *MessageContentPartOneOf1) MessageContentPart {
	return MessageContentPart{
		MessageContentPartOneOf1: v,
	}
}

// MessageContentPartOneOf2AsMessageContentPart is a convenience function that returns MessageContentPartOneOf2 wrapped in MessageContentPart
func MessageContentPartOneOf2AsMessageContentPart(v *MessageContentPartOneOf2) MessageContentPart {
	return MessageContentPart{
		MessageContentPartOneOf2: v,
	}
}

// MessageContentPartOneOf3AsMessageContentPart is a convenience function that returns MessageContentPartOneOf3 wrapped in MessageContentPart
func MessageContentPartOneOf3AsMessageContentPart(v *MessageContentPartOneOf3) MessageContentPart {
	return MessageContentPart{
		MessageContentPartOneOf3: v,
	}
}

// MessageContentPartOneOf4AsMessageContentPart is a convenience function that returns MessageContentPartOneOf4 wrapped in MessageContentPart
func MessageContentPartOneOf4AsMessageContentPart(v *MessageContentPartOneOf4) MessageContentPart {
	return MessageContentPart{
		MessageContentPartOneOf4: v,
	}
}

// MessageContentPartOneOf5AsMessageContentPart is a convenience function that returns MessageContentPartOneOf5 wrapped in MessageContentPart
func MessageContentPartOneOf5AsMessageContentPart(v *MessageContentPartOneOf5) MessageContentPart {
	return MessageContentPart{
		MessageContentPartOneOf5: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageContentPart) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageContentPartOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageContentPartOneOf)
	if err == nil {
		jsonMessageContentPartOneOf, _ := json.Marshal(dst.MessageContentPartOneOf)
		if string(jsonMessageContentPartOneOf) == "{}" { // empty struct
			dst.MessageContentPartOneOf = nil
		} else {
			if err = validator.Validate(dst.MessageContentPartOneOf); err != nil {
				dst.MessageContentPartOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageContentPartOneOf = nil
	}

	// try to unmarshal data into MessageContentPartOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageContentPartOneOf1)
	if err == nil {
		jsonMessageContentPartOneOf1, _ := json.Marshal(dst.MessageContentPartOneOf1)
		if string(jsonMessageContentPartOneOf1) == "{}" { // empty struct
			dst.MessageContentPartOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MessageContentPartOneOf1); err != nil {
				dst.MessageContentPartOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageContentPartOneOf1 = nil
	}

	// try to unmarshal data into MessageContentPartOneOf2
	err = newStrictDecoder(data).Decode(&dst.MessageContentPartOneOf2)
	if err == nil {
		jsonMessageContentPartOneOf2, _ := json.Marshal(dst.MessageContentPartOneOf2)
		if string(jsonMessageContentPartOneOf2) == "{}" { // empty struct
			dst.MessageContentPartOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MessageContentPartOneOf2); err != nil {
				dst.MessageContentPartOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageContentPartOneOf2 = nil
	}

	// try to unmarshal data into MessageContentPartOneOf3
	err = newStrictDecoder(data).Decode(&dst.MessageContentPartOneOf3)
	if err == nil {
		jsonMessageContentPartOneOf3, _ := json.Marshal(dst.MessageContentPartOneOf3)
		if string(jsonMessageContentPartOneOf3) == "{}" { // empty struct
			dst.MessageContentPartOneOf3 = nil
		} else {
			if err = validator.Validate(dst.MessageContentPartOneOf3); err != nil {
				dst.MessageContentPartOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageContentPartOneOf3 = nil
	}

	// try to unmarshal data into MessageContentPartOneOf4
	err = newStrictDecoder(data).Decode(&dst.MessageContentPartOneOf4)
	if err == nil {
		jsonMessageContentPartOneOf4, _ := json.Marshal(dst.MessageContentPartOneOf4)
		if string(jsonMessageContentPartOneOf4) == "{}" { // empty struct
			dst.MessageContentPartOneOf4 = nil
		} else {
			if err = validator.Validate(dst.MessageContentPartOneOf4); err != nil {
				dst.MessageContentPartOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageContentPartOneOf4 = nil
	}

	// try to unmarshal data into MessageContentPartOneOf5
	err = newStrictDecoder(data).Decode(&dst.MessageContentPartOneOf5)
	if err == nil {
		jsonMessageContentPartOneOf5, _ := json.Marshal(dst.MessageContentPartOneOf5)
		if string(jsonMessageContentPartOneOf5) == "{}" { // empty struct
			dst.MessageContentPartOneOf5 = nil
		} else {
			if err = validator.Validate(dst.MessageContentPartOneOf5); err != nil {
				dst.MessageContentPartOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageContentPartOneOf5 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageContentPartOneOf = nil
		dst.MessageContentPartOneOf1 = nil
		dst.MessageContentPartOneOf2 = nil
		dst.MessageContentPartOneOf3 = nil
		dst.MessageContentPartOneOf4 = nil
		dst.MessageContentPartOneOf5 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageContentPart)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageContentPart)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageContentPart) MarshalJSON() ([]byte, error) {
	if src.MessageContentPartOneOf != nil {
		return json.Marshal(&src.MessageContentPartOneOf)
	}

	if src.MessageContentPartOneOf1 != nil {
		return json.Marshal(&src.MessageContentPartOneOf1)
	}

	if src.MessageContentPartOneOf2 != nil {
		return json.Marshal(&src.MessageContentPartOneOf2)
	}

	if src.MessageContentPartOneOf3 != nil {
		return json.Marshal(&src.MessageContentPartOneOf3)
	}

	if src.MessageContentPartOneOf4 != nil {
		return json.Marshal(&src.MessageContentPartOneOf4)
	}

	if src.MessageContentPartOneOf5 != nil {
		return json.Marshal(&src.MessageContentPartOneOf5)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageContentPart) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageContentPartOneOf != nil {
		return obj.MessageContentPartOneOf
	}

	if obj.MessageContentPartOneOf1 != nil {
		return obj.MessageContentPartOneOf1
	}

	if obj.MessageContentPartOneOf2 != nil {
		return obj.MessageContentPartOneOf2
	}

	if obj.MessageContentPartOneOf3 != nil {
		return obj.MessageContentPartOneOf3
	}

	if obj.MessageContentPartOneOf4 != nil {
		return obj.MessageContentPartOneOf4
	}

	if obj.MessageContentPartOneOf5 != nil {
		return obj.MessageContentPartOneOf5
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MessageContentPart) GetActualInstanceValue() interface{} {
	if obj.MessageContentPartOneOf != nil {
		return *obj.MessageContentPartOneOf
	}

	if obj.MessageContentPartOneOf1 != nil {
		return *obj.MessageContentPartOneOf1
	}

	if obj.MessageContentPartOneOf2 != nil {
		return *obj.MessageContentPartOneOf2
	}

	if obj.MessageContentPartOneOf3 != nil {
		return *obj.MessageContentPartOneOf3
	}

	if obj.MessageContentPartOneOf4 != nil {
		return *obj.MessageContentPartOneOf4
	}

	if obj.MessageContentPartOneOf5 != nil {
		return *obj.MessageContentPartOneOf5
	}

	// all schemas are nil
	return nil
}

type NullableMessageContentPart struct {
	value *MessageContentPart
	isSet bool
}

func (v NullableMessageContentPart) Get() *MessageContentPart {
	return v.value
}

func (v *NullableMessageContentPart) Set(val *MessageContentPart) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentPart) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentPart(val *MessageContentPart) *NullableMessageContentPart {
	return &NullableMessageContentPart{value: val, isSet: true}
}

func (v NullableMessageContentPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
