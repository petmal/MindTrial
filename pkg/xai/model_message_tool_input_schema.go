/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageToolInputSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageToolInputSchema{}

// MessageToolInputSchema struct for MessageToolInputSchema
type MessageToolInputSchema struct {
	Properties interface{} `json:"properties"`
	// Required properties of the tool input schema, if any.
	Required []string `json:"required,omitempty"`
	// Type of the schema. This is always `\"object\"`.
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageToolInputSchema MessageToolInputSchema

// NewMessageToolInputSchema instantiates a new MessageToolInputSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageToolInputSchema(properties interface{}, type_ string) *MessageToolInputSchema {
	this := MessageToolInputSchema{}
	this.Properties = properties
	this.Type = type_
	return &this
}

// NewMessageToolInputSchemaWithDefaults instantiates a new MessageToolInputSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageToolInputSchemaWithDefaults() *MessageToolInputSchema {
	this := MessageToolInputSchema{}
	return &this
}

// GetProperties returns the Properties field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MessageToolInputSchema) GetProperties() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageToolInputSchema) GetPropertiesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *MessageToolInputSchema) SetProperties(v interface{}) {
	o.Properties = v
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageToolInputSchema) GetRequired() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageToolInputSchema) GetRequiredOk() ([]string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *MessageToolInputSchema) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given []string and assigns it to the Required field.
func (o *MessageToolInputSchema) SetRequired(v []string) {
	o.Required = v
}

// GetType returns the Type field value
func (o *MessageToolInputSchema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageToolInputSchema) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageToolInputSchema) SetType(v string) {
	o.Type = v
}

func (o MessageToolInputSchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageToolInputSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageToolInputSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"properties",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageToolInputSchema := _MessageToolInputSchema{}

	err = json.Unmarshal(data, &varMessageToolInputSchema)

	if err != nil {
		return err
	}

	*o = MessageToolInputSchema(varMessageToolInputSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "properties")
		delete(additionalProperties, "required")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageToolInputSchema struct {
	value *MessageToolInputSchema
	isSet bool
}

func (v NullableMessageToolInputSchema) Get() *MessageToolInputSchema {
	return v.value
}

func (v *NullableMessageToolInputSchema) Set(val *MessageToolInputSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageToolInputSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageToolInputSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageToolInputSchema(val *MessageToolInputSchema) *NullableMessageToolInputSchema {
	return &NullableMessageToolInputSchema{value: val, isSet: true}
}

func (v NullableMessageToolInputSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageToolInputSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
