/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ChoiceChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChoiceChunk{}

// ChoiceChunk struct for ChoiceChunk
type ChoiceChunk struct {
	// Additional difference (delta) of the result.
	Delta Delta `json:"delta"`
	// Finish reason. `\"stop\"` means the inference has reached a model-defined or user-supplied stop sequence in `stop`. `\"length\"` means the inference result has reached models' maximum allowed token length or user defined value in `max_tokens`. `\"end_turn\"` or `null` in streaming mode when the chunk is not the last.
	FinishReason NullableString `json:"finish_reason,omitempty"`
	// Index of the choice.
	Index int32 `json:"index"`
	// The log probabilities of each output token returned in the content of message.
	Logprobs             NullableLogProbs `json:"logprobs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChoiceChunk ChoiceChunk

// NewChoiceChunk instantiates a new ChoiceChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChoiceChunk(delta Delta, index int32) *ChoiceChunk {
	this := ChoiceChunk{}
	this.Delta = delta
	this.Index = index
	return &this
}

// NewChoiceChunkWithDefaults instantiates a new ChoiceChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChoiceChunkWithDefaults() *ChoiceChunk {
	this := ChoiceChunk{}
	return &this
}

// GetDelta returns the Delta field value
func (o *ChoiceChunk) GetDelta() Delta {
	if o == nil {
		var ret Delta
		return ret
	}

	return o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value
// and a boolean to check if the value has been set.
func (o *ChoiceChunk) GetDeltaOk() (*Delta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delta, true
}

// SetDelta sets field value
func (o *ChoiceChunk) SetDelta(v Delta) {
	o.Delta = v
}

// GetFinishReason returns the FinishReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChoiceChunk) GetFinishReason() string {
	if o == nil || IsNil(o.FinishReason.Get()) {
		var ret string
		return ret
	}
	return *o.FinishReason.Get()
}

// GetFinishReasonOk returns a tuple with the FinishReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChoiceChunk) GetFinishReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishReason.Get(), o.FinishReason.IsSet()
}

// HasFinishReason returns a boolean if a field has been set.
func (o *ChoiceChunk) HasFinishReason() bool {
	if o != nil && o.FinishReason.IsSet() {
		return true
	}

	return false
}

// SetFinishReason gets a reference to the given NullableString and assigns it to the FinishReason field.
func (o *ChoiceChunk) SetFinishReason(v string) {
	o.FinishReason.Set(&v)
}

// SetFinishReasonNil sets the value for FinishReason to be an explicit nil
func (o *ChoiceChunk) SetFinishReasonNil() {
	o.FinishReason.Set(nil)
}

// UnsetFinishReason ensures that no value is present for FinishReason, not even an explicit nil
func (o *ChoiceChunk) UnsetFinishReason() {
	o.FinishReason.Unset()
}

// GetIndex returns the Index field value
func (o *ChoiceChunk) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ChoiceChunk) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *ChoiceChunk) SetIndex(v int32) {
	o.Index = v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChoiceChunk) GetLogprobs() LogProbs {
	if o == nil || IsNil(o.Logprobs.Get()) {
		var ret LogProbs
		return ret
	}
	return *o.Logprobs.Get()
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChoiceChunk) GetLogprobsOk() (*LogProbs, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logprobs.Get(), o.Logprobs.IsSet()
}

// HasLogprobs returns a boolean if a field has been set.
func (o *ChoiceChunk) HasLogprobs() bool {
	if o != nil && o.Logprobs.IsSet() {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given NullableLogProbs and assigns it to the Logprobs field.
func (o *ChoiceChunk) SetLogprobs(v LogProbs) {
	o.Logprobs.Set(&v)
}

// SetLogprobsNil sets the value for Logprobs to be an explicit nil
func (o *ChoiceChunk) SetLogprobsNil() {
	o.Logprobs.Set(nil)
}

// UnsetLogprobs ensures that no value is present for Logprobs, not even an explicit nil
func (o *ChoiceChunk) UnsetLogprobs() {
	o.Logprobs.Unset()
}

func (o ChoiceChunk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChoiceChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delta"] = o.Delta
	if o.FinishReason.IsSet() {
		toSerialize["finish_reason"] = o.FinishReason.Get()
	}
	toSerialize["index"] = o.Index
	if o.Logprobs.IsSet() {
		toSerialize["logprobs"] = o.Logprobs.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChoiceChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delta",
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChoiceChunk := _ChoiceChunk{}

	err = json.Unmarshal(data, &varChoiceChunk)

	if err != nil {
		return err
	}

	*o = ChoiceChunk(varChoiceChunk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "delta")
		delete(additionalProperties, "finish_reason")
		delete(additionalProperties, "index")
		delete(additionalProperties, "logprobs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChoiceChunk struct {
	value *ChoiceChunk
	isSet bool
}

func (v NullableChoiceChunk) Get() *ChoiceChunk {
	return v.value
}

func (v *NullableChoiceChunk) Set(val *ChoiceChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableChoiceChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableChoiceChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChoiceChunk(val *ChoiceChunk) *NullableChoiceChunk {
	return &NullableChoiceChunk{value: val, isSet: true}
}

func (v NullableChoiceChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChoiceChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
