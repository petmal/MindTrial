/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the Delta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Delta{}

// Delta struct for Delta
type Delta struct {
	Content NullableString `json:"content,omitempty"`
	// Images generated by the model.
	Images               []string       `json:"images,omitempty"`
	ReasoningContent     NullableString `json:"reasoning_content,omitempty"`
	Role                 NullableString `json:"role,omitempty"`
	ToolCalls            []ToolCall     `json:"tool_calls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Delta Delta

// NewDelta instantiates a new Delta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelta() *Delta {
	this := Delta{}
	return &this
}

// NewDeltaWithDefaults instantiates a new Delta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeltaWithDefaults() *Delta {
	this := Delta{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delta) GetContent() string {
	if o == nil || IsNil(o.Content.Get()) {
		var ret string
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delta) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *Delta) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableString and assigns it to the Content field.
func (o *Delta) SetContent(v string) {
	o.Content.Set(&v)
}

// SetContentNil sets the value for Content to be an explicit nil
func (o *Delta) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *Delta) UnsetContent() {
	o.Content.Unset()
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delta) GetImages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delta) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *Delta) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *Delta) SetImages(v []string) {
	o.Images = v
}

// GetReasoningContent returns the ReasoningContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delta) GetReasoningContent() string {
	if o == nil || IsNil(o.ReasoningContent.Get()) {
		var ret string
		return ret
	}
	return *o.ReasoningContent.Get()
}

// GetReasoningContentOk returns a tuple with the ReasoningContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delta) GetReasoningContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReasoningContent.Get(), o.ReasoningContent.IsSet()
}

// HasReasoningContent returns a boolean if a field has been set.
func (o *Delta) HasReasoningContent() bool {
	if o != nil && o.ReasoningContent.IsSet() {
		return true
	}

	return false
}

// SetReasoningContent gets a reference to the given NullableString and assigns it to the ReasoningContent field.
func (o *Delta) SetReasoningContent(v string) {
	o.ReasoningContent.Set(&v)
}

// SetReasoningContentNil sets the value for ReasoningContent to be an explicit nil
func (o *Delta) SetReasoningContentNil() {
	o.ReasoningContent.Set(nil)
}

// UnsetReasoningContent ensures that no value is present for ReasoningContent, not even an explicit nil
func (o *Delta) UnsetReasoningContent() {
	o.ReasoningContent.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delta) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delta) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *Delta) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *Delta) SetRole(v string) {
	o.Role.Set(&v)
}

// SetRoleNil sets the value for Role to be an explicit nil
func (o *Delta) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *Delta) UnsetRole() {
	o.Role.Unset()
}

// GetToolCalls returns the ToolCalls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Delta) GetToolCalls() []ToolCall {
	if o == nil {
		var ret []ToolCall
		return ret
	}
	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Delta) GetToolCallsOk() ([]ToolCall, bool) {
	if o == nil || IsNil(o.ToolCalls) {
		return nil, false
	}
	return o.ToolCalls, true
}

// HasToolCalls returns a boolean if a field has been set.
func (o *Delta) HasToolCalls() bool {
	if o != nil && !IsNil(o.ToolCalls) {
		return true
	}

	return false
}

// SetToolCalls gets a reference to the given []ToolCall and assigns it to the ToolCalls field.
func (o *Delta) SetToolCalls(v []ToolCall) {
	o.ToolCalls = v
}

func (o Delta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Delta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.ReasoningContent.IsSet() {
		toSerialize["reasoning_content"] = o.ReasoningContent.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.ToolCalls != nil {
		toSerialize["tool_calls"] = o.ToolCalls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Delta) UnmarshalJSON(data []byte) (err error) {
	varDelta := _Delta{}

	err = json.Unmarshal(data, &varDelta)

	if err != nil {
		return err
	}

	*o = Delta(varDelta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "images")
		delete(additionalProperties, "reasoning_content")
		delete(additionalProperties, "role")
		delete(additionalProperties, "tool_calls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDelta struct {
	value *Delta
	isSet bool
}

func (v NullableDelta) Get() *Delta {
	return v.value
}

func (v *NullableDelta) Set(val *Delta) {
	v.value = val
	v.isSet = true
}

func (v NullableDelta) IsSet() bool {
	return v.isSet
}

func (v *NullableDelta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelta(val *Delta) *NullableDelta {
	return &NullableDelta{value: val, isSet: true}
}

func (v NullableDelta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
