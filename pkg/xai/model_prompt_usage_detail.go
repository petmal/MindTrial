/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the PromptUsageDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PromptUsageDetail{}

// PromptUsageDetail Details of prompt usage.
type PromptUsageDetail struct {
	// Audio prompt token used.
	AudioTokens int32 `json:"audio_tokens"`
	// Token cached by xAI from previous requests and reused for this request.
	CachedTokens int32 `json:"cached_tokens"`
	// Image prompt token used.
	ImageTokens int32 `json:"image_tokens"`
	// Text prompt token used.
	TextTokens           int32 `json:"text_tokens"`
	AdditionalProperties map[string]interface{}
}

type _PromptUsageDetail PromptUsageDetail

// NewPromptUsageDetail instantiates a new PromptUsageDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromptUsageDetail(audioTokens int32, cachedTokens int32, imageTokens int32, textTokens int32) *PromptUsageDetail {
	this := PromptUsageDetail{}
	this.AudioTokens = audioTokens
	this.CachedTokens = cachedTokens
	this.ImageTokens = imageTokens
	this.TextTokens = textTokens
	return &this
}

// NewPromptUsageDetailWithDefaults instantiates a new PromptUsageDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromptUsageDetailWithDefaults() *PromptUsageDetail {
	this := PromptUsageDetail{}
	return &this
}

// GetAudioTokens returns the AudioTokens field value
func (o *PromptUsageDetail) GetAudioTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AudioTokens
}

// GetAudioTokensOk returns a tuple with the AudioTokens field value
// and a boolean to check if the value has been set.
func (o *PromptUsageDetail) GetAudioTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioTokens, true
}

// SetAudioTokens sets field value
func (o *PromptUsageDetail) SetAudioTokens(v int32) {
	o.AudioTokens = v
}

// GetCachedTokens returns the CachedTokens field value
func (o *PromptUsageDetail) GetCachedTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CachedTokens
}

// GetCachedTokensOk returns a tuple with the CachedTokens field value
// and a boolean to check if the value has been set.
func (o *PromptUsageDetail) GetCachedTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CachedTokens, true
}

// SetCachedTokens sets field value
func (o *PromptUsageDetail) SetCachedTokens(v int32) {
	o.CachedTokens = v
}

// GetImageTokens returns the ImageTokens field value
func (o *PromptUsageDetail) GetImageTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ImageTokens
}

// GetImageTokensOk returns a tuple with the ImageTokens field value
// and a boolean to check if the value has been set.
func (o *PromptUsageDetail) GetImageTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageTokens, true
}

// SetImageTokens sets field value
func (o *PromptUsageDetail) SetImageTokens(v int32) {
	o.ImageTokens = v
}

// GetTextTokens returns the TextTokens field value
func (o *PromptUsageDetail) GetTextTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TextTokens
}

// GetTextTokensOk returns a tuple with the TextTokens field value
// and a boolean to check if the value has been set.
func (o *PromptUsageDetail) GetTextTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextTokens, true
}

// SetTextTokens sets field value
func (o *PromptUsageDetail) SetTextTokens(v int32) {
	o.TextTokens = v
}

func (o PromptUsageDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PromptUsageDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["audio_tokens"] = o.AudioTokens
	toSerialize["cached_tokens"] = o.CachedTokens
	toSerialize["image_tokens"] = o.ImageTokens
	toSerialize["text_tokens"] = o.TextTokens

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PromptUsageDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audio_tokens",
		"cached_tokens",
		"image_tokens",
		"text_tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPromptUsageDetail := _PromptUsageDetail{}

	err = json.Unmarshal(data, &varPromptUsageDetail)

	if err != nil {
		return err
	}

	*o = PromptUsageDetail(varPromptUsageDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audio_tokens")
		delete(additionalProperties, "cached_tokens")
		delete(additionalProperties, "image_tokens")
		delete(additionalProperties, "text_tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePromptUsageDetail struct {
	value *PromptUsageDetail
	isSet bool
}

func (v NullablePromptUsageDetail) Get() *PromptUsageDetail {
	return v.value
}

func (v *NullablePromptUsageDetail) Set(val *PromptUsageDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePromptUsageDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePromptUsageDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromptUsageDetail(val *PromptUsageDetail) *NullablePromptUsageDetail {
	return &NullablePromptUsageDetail{value: val, isSet: true}
}

func (v NullablePromptUsageDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromptUsageDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
