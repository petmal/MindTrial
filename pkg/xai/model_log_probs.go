/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the LogProbs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogProbs{}

// LogProbs struct for LogProbs
type LogProbs struct {
	// An array the log probabilities of each output token returned.
	Content              []TokenLogProb `json:"content,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogProbs LogProbs

// NewLogProbs instantiates a new LogProbs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogProbs() *LogProbs {
	this := LogProbs{}
	return &this
}

// NewLogProbsWithDefaults instantiates a new LogProbs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogProbsWithDefaults() *LogProbs {
	this := LogProbs{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogProbs) GetContent() []TokenLogProb {
	if o == nil {
		var ret []TokenLogProb
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogProbs) GetContentOk() ([]TokenLogProb, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *LogProbs) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []TokenLogProb and assigns it to the Content field.
func (o *LogProbs) SetContent(v []TokenLogProb) {
	o.Content = v
}

func (o LogProbs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogProbs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogProbs) UnmarshalJSON(data []byte) (err error) {
	varLogProbs := _LogProbs{}

	err = json.Unmarshal(data, &varLogProbs)

	if err != nil {
		return err
	}

	*o = LogProbs(varLogProbs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogProbs struct {
	value *LogProbs
	isSet bool
}

func (v NullableLogProbs) Get() *LogProbs {
	return v.value
}

func (v *NullableLogProbs) Set(val *LogProbs) {
	v.value = val
	v.isSet = true
}

func (v NullableLogProbs) IsSet() bool {
	return v.isSet
}

func (v *NullableLogProbs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogProbs(val *LogProbs) *NullableLogProbs {
	return &NullableLogProbs{value: val, isSet: true}
}

func (v NullableLogProbs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogProbs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
