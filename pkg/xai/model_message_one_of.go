/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageOneOf{}

// MessageOneOf System message, usually instructions for the model to respond in a certain way.
type MessageOneOf struct {
	// System prompt content.
	Content Content `json:"content"`
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	Name                 NullableString `json:"name,omitempty"`
	Role                 string         `json:"role"`
	AdditionalProperties map[string]interface{}
}

type _MessageOneOf MessageOneOf

// NewMessageOneOf instantiates a new MessageOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageOneOf(content Content, role string) *MessageOneOf {
	this := MessageOneOf{}
	this.Content = content
	this.Role = role
	return &this
}

// NewMessageOneOfWithDefaults instantiates a new MessageOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageOneOfWithDefaults() *MessageOneOf {
	this := MessageOneOf{}
	return &this
}

// GetContent returns the Content field value
func (o *MessageOneOf) GetContent() Content {
	if o == nil {
		var ret Content
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *MessageOneOf) GetContentOk() (*Content, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *MessageOneOf) SetContent(v Content) {
	o.Content = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageOneOf) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageOneOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MessageOneOf) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MessageOneOf) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *MessageOneOf) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MessageOneOf) UnsetName() {
	o.Name.Unset()
}

// GetRole returns the Role field value
func (o *MessageOneOf) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *MessageOneOf) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *MessageOneOf) SetRole(v string) {
	o.Role = v
}

func (o MessageOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["role"] = o.Role

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageOneOf := _MessageOneOf{}

	err = json.Unmarshal(data, &varMessageOneOf)

	if err != nil {
		return err
	}

	*o = MessageOneOf(varMessageOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "name")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageOneOf struct {
	value *MessageOneOf
	isSet bool
}

func (v NullableMessageOneOf) Get() *MessageOneOf {
	return v.value
}

func (v *NullableMessageOneOf) Set(val *MessageOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageOneOf(val *MessageOneOf) *NullableMessageOneOf {
	return &NullableMessageOneOf{value: val, isSet: true}
}

func (v NullableMessageOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
