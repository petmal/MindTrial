/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageBody{}

// MessageBody Anthropic compatible message body
type MessageBody struct {
	// The content message.
	Content MessageContent `json:"content"`
	// The role that the message belongs to, `\"system\"` for system prompt, `\"user\"` for user prompt, and `\"assistant\"` for response from the model.
	Role                 string `json:"role"`
	AdditionalProperties map[string]interface{}
}

type _MessageBody MessageBody

// NewMessageBody instantiates a new MessageBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageBody(content MessageContent, role string) *MessageBody {
	this := MessageBody{}
	this.Content = content
	this.Role = role
	return &this
}

// NewMessageBodyWithDefaults instantiates a new MessageBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageBodyWithDefaults() *MessageBody {
	this := MessageBody{}
	return &this
}

// GetContent returns the Content field value
func (o *MessageBody) GetContent() MessageContent {
	if o == nil {
		var ret MessageContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *MessageBody) GetContentOk() (*MessageContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *MessageBody) SetContent(v MessageContent) {
	o.Content = v
}

// GetRole returns the Role field value
func (o *MessageBody) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *MessageBody) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *MessageBody) SetRole(v string) {
	o.Role = v
}

func (o MessageBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["role"] = o.Role

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageBody := _MessageBody{}

	err = json.Unmarshal(data, &varMessageBody)

	if err != nil {
		return err
	}

	*o = MessageBody(varMessageBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageBody struct {
	value *MessageBody
	isSet bool
}

func (v NullableMessageBody) Get() *MessageBody {
	return v.value
}

func (v *NullableMessageBody) Set(val *MessageBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageBody(val *MessageBody) *NullableMessageBody {
	return &NullableMessageBody{value: val, isSet: true}
}

func (v NullableMessageBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
