/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EmbeddingInput - struct for EmbeddingInput
type EmbeddingInput struct {
	EmbeddingInputOneOf  *EmbeddingInputOneOf
	EmbeddingInputOneOf1 *EmbeddingInputOneOf1
	EmbeddingInputOneOf2 *EmbeddingInputOneOf2
	EmbeddingInputOneOf3 *EmbeddingInputOneOf3
}

// EmbeddingInputOneOfAsEmbeddingInput is a convenience function that returns EmbeddingInputOneOf wrapped in EmbeddingInput
func EmbeddingInputOneOfAsEmbeddingInput(v *EmbeddingInputOneOf) EmbeddingInput {
	return EmbeddingInput{
		EmbeddingInputOneOf: v,
	}
}

// EmbeddingInputOneOf1AsEmbeddingInput is a convenience function that returns EmbeddingInputOneOf1 wrapped in EmbeddingInput
func EmbeddingInputOneOf1AsEmbeddingInput(v *EmbeddingInputOneOf1) EmbeddingInput {
	return EmbeddingInput{
		EmbeddingInputOneOf1: v,
	}
}

// EmbeddingInputOneOf2AsEmbeddingInput is a convenience function that returns EmbeddingInputOneOf2 wrapped in EmbeddingInput
func EmbeddingInputOneOf2AsEmbeddingInput(v *EmbeddingInputOneOf2) EmbeddingInput {
	return EmbeddingInput{
		EmbeddingInputOneOf2: v,
	}
}

// EmbeddingInputOneOf3AsEmbeddingInput is a convenience function that returns EmbeddingInputOneOf3 wrapped in EmbeddingInput
func EmbeddingInputOneOf3AsEmbeddingInput(v *EmbeddingInputOneOf3) EmbeddingInput {
	return EmbeddingInput{
		EmbeddingInputOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EmbeddingInput) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EmbeddingInputOneOf
	err = newStrictDecoder(data).Decode(&dst.EmbeddingInputOneOf)
	if err == nil {
		jsonEmbeddingInputOneOf, _ := json.Marshal(dst.EmbeddingInputOneOf)
		if string(jsonEmbeddingInputOneOf) == "{}" { // empty struct
			dst.EmbeddingInputOneOf = nil
		} else {
			if err = validator.Validate(dst.EmbeddingInputOneOf); err != nil {
				dst.EmbeddingInputOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbeddingInputOneOf = nil
	}

	// try to unmarshal data into EmbeddingInputOneOf1
	err = newStrictDecoder(data).Decode(&dst.EmbeddingInputOneOf1)
	if err == nil {
		jsonEmbeddingInputOneOf1, _ := json.Marshal(dst.EmbeddingInputOneOf1)
		if string(jsonEmbeddingInputOneOf1) == "{}" { // empty struct
			dst.EmbeddingInputOneOf1 = nil
		} else {
			if err = validator.Validate(dst.EmbeddingInputOneOf1); err != nil {
				dst.EmbeddingInputOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbeddingInputOneOf1 = nil
	}

	// try to unmarshal data into EmbeddingInputOneOf2
	err = newStrictDecoder(data).Decode(&dst.EmbeddingInputOneOf2)
	if err == nil {
		jsonEmbeddingInputOneOf2, _ := json.Marshal(dst.EmbeddingInputOneOf2)
		if string(jsonEmbeddingInputOneOf2) == "{}" { // empty struct
			dst.EmbeddingInputOneOf2 = nil
		} else {
			if err = validator.Validate(dst.EmbeddingInputOneOf2); err != nil {
				dst.EmbeddingInputOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbeddingInputOneOf2 = nil
	}

	// try to unmarshal data into EmbeddingInputOneOf3
	err = newStrictDecoder(data).Decode(&dst.EmbeddingInputOneOf3)
	if err == nil {
		jsonEmbeddingInputOneOf3, _ := json.Marshal(dst.EmbeddingInputOneOf3)
		if string(jsonEmbeddingInputOneOf3) == "{}" { // empty struct
			dst.EmbeddingInputOneOf3 = nil
		} else {
			if err = validator.Validate(dst.EmbeddingInputOneOf3); err != nil {
				dst.EmbeddingInputOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbeddingInputOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EmbeddingInputOneOf = nil
		dst.EmbeddingInputOneOf1 = nil
		dst.EmbeddingInputOneOf2 = nil
		dst.EmbeddingInputOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EmbeddingInput)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EmbeddingInput)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EmbeddingInput) MarshalJSON() ([]byte, error) {
	if src.EmbeddingInputOneOf != nil {
		return json.Marshal(&src.EmbeddingInputOneOf)
	}

	if src.EmbeddingInputOneOf1 != nil {
		return json.Marshal(&src.EmbeddingInputOneOf1)
	}

	if src.EmbeddingInputOneOf2 != nil {
		return json.Marshal(&src.EmbeddingInputOneOf2)
	}

	if src.EmbeddingInputOneOf3 != nil {
		return json.Marshal(&src.EmbeddingInputOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EmbeddingInput) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EmbeddingInputOneOf != nil {
		return obj.EmbeddingInputOneOf
	}

	if obj.EmbeddingInputOneOf1 != nil {
		return obj.EmbeddingInputOneOf1
	}

	if obj.EmbeddingInputOneOf2 != nil {
		return obj.EmbeddingInputOneOf2
	}

	if obj.EmbeddingInputOneOf3 != nil {
		return obj.EmbeddingInputOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EmbeddingInput) GetActualInstanceValue() interface{} {
	if obj.EmbeddingInputOneOf != nil {
		return *obj.EmbeddingInputOneOf
	}

	if obj.EmbeddingInputOneOf1 != nil {
		return *obj.EmbeddingInputOneOf1
	}

	if obj.EmbeddingInputOneOf2 != nil {
		return *obj.EmbeddingInputOneOf2
	}

	if obj.EmbeddingInputOneOf3 != nil {
		return *obj.EmbeddingInputOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableEmbeddingInput struct {
	value *EmbeddingInput
	isSet bool
}

func (v NullableEmbeddingInput) Get() *EmbeddingInput {
	return v.value
}

func (v *NullableEmbeddingInput) Set(val *EmbeddingInput) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingInput) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingInput(val *EmbeddingInput) *NullableEmbeddingInput {
	return &NullableEmbeddingInput{value: val, isSet: true}
}

func (v NullableEmbeddingInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
