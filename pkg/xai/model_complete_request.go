/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the CompleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteRequest{}

// CompleteRequest (Legacy) Anthropic compatible complete request on `/v1/complete` endpoint.
type CompleteRequest struct {
	// The maximum number of tokens to generate before stopping.
	MaxTokensToSample *int32 `json:"max_tokens_to_sample,omitempty"`
	// An object describing metadata about the request.
	Metadata NullableMessageMetadata `json:"metadata,omitempty"`
	// Model to use for completion.
	Model *string `json:"model,omitempty"`
	// Prompt for the model to perform completion on.
	Prompt *string `json:"prompt,omitempty"`
	// (Not supported by reasoning models) Up to 4 sequences where the API will stop generating further tokens.
	StopSequences []string `json:"stop_sequences,omitempty"`
	// (Unsupported) If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.
	Stream NullableBool `json:"stream,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// (Unsupported) When generating next tokens, randomly selecting the next token from the k most likely options.
	TopK NullableInt32 `json:"top_k,omitempty"`
	// An alternative to sampling with `temperature`, called nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. It is generally recommended to alter this or `temperature` but not both.
	TopP                 NullableFloat32 `json:"top_p,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompleteRequest CompleteRequest

// NewCompleteRequest instantiates a new CompleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteRequest() *CompleteRequest {
	this := CompleteRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// NewCompleteRequestWithDefaults instantiates a new CompleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteRequestWithDefaults() *CompleteRequest {
	this := CompleteRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// GetMaxTokensToSample returns the MaxTokensToSample field value if set, zero value otherwise.
func (o *CompleteRequest) GetMaxTokensToSample() int32 {
	if o == nil || IsNil(o.MaxTokensToSample) {
		var ret int32
		return ret
	}
	return *o.MaxTokensToSample
}

// GetMaxTokensToSampleOk returns a tuple with the MaxTokensToSample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteRequest) GetMaxTokensToSampleOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTokensToSample) {
		return nil, false
	}
	return o.MaxTokensToSample, true
}

// HasMaxTokensToSample returns a boolean if a field has been set.
func (o *CompleteRequest) HasMaxTokensToSample() bool {
	if o != nil && !IsNil(o.MaxTokensToSample) {
		return true
	}

	return false
}

// SetMaxTokensToSample gets a reference to the given int32 and assigns it to the MaxTokensToSample field.
func (o *CompleteRequest) SetMaxTokensToSample(v int32) {
	o.MaxTokensToSample = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteRequest) GetMetadata() MessageMetadata {
	if o == nil || IsNil(o.Metadata.Get()) {
		var ret MessageMetadata
		return ret
	}
	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteRequest) GetMetadataOk() (*MessageMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// HasMetadata returns a boolean if a field has been set.
func (o *CompleteRequest) HasMetadata() bool {
	if o != nil && o.Metadata.IsSet() {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NullableMessageMetadata and assigns it to the Metadata field.
func (o *CompleteRequest) SetMetadata(v MessageMetadata) {
	o.Metadata.Set(&v)
}

// SetMetadataNil sets the value for Metadata to be an explicit nil
func (o *CompleteRequest) SetMetadataNil() {
	o.Metadata.Set(nil)
}

// UnsetMetadata ensures that no value is present for Metadata, not even an explicit nil
func (o *CompleteRequest) UnsetMetadata() {
	o.Metadata.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *CompleteRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *CompleteRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *CompleteRequest) SetModel(v string) {
	o.Model = &v
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *CompleteRequest) GetPrompt() string {
	if o == nil || IsNil(o.Prompt) {
		var ret string
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteRequest) GetPromptOk() (*string, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *CompleteRequest) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given string and assigns it to the Prompt field.
func (o *CompleteRequest) SetPrompt(v string) {
	o.Prompt = &v
}

// GetStopSequences returns the StopSequences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteRequest) GetStopSequences() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.StopSequences
}

// GetStopSequencesOk returns a tuple with the StopSequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteRequest) GetStopSequencesOk() ([]string, bool) {
	if o == nil || IsNil(o.StopSequences) {
		return nil, false
	}
	return o.StopSequences, true
}

// HasStopSequences returns a boolean if a field has been set.
func (o *CompleteRequest) HasStopSequences() bool {
	if o != nil && !IsNil(o.StopSequences) {
		return true
	}

	return false
}

// SetStopSequences gets a reference to the given []string and assigns it to the StopSequences field.
func (o *CompleteRequest) SetStopSequences(v []string) {
	o.StopSequences = v
}

// GetStream returns the Stream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream.Get()) {
		var ret bool
		return ret
	}
	return *o.Stream.Get()
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteRequest) GetStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stream.Get(), o.Stream.IsSet()
}

// HasStream returns a boolean if a field has been set.
func (o *CompleteRequest) HasStream() bool {
	if o != nil && o.Stream.IsSet() {
		return true
	}

	return false
}

// SetStream gets a reference to the given NullableBool and assigns it to the Stream field.
func (o *CompleteRequest) SetStream(v bool) {
	o.Stream.Set(&v)
}

// SetStreamNil sets the value for Stream to be an explicit nil
func (o *CompleteRequest) SetStreamNil() {
	o.Stream.Set(nil)
}

// UnsetStream ensures that no value is present for Stream, not even an explicit nil
func (o *CompleteRequest) UnsetStream() {
	o.Stream.Unset()
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *CompleteRequest) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *CompleteRequest) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}

// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *CompleteRequest) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *CompleteRequest) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetTopK returns the TopK field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteRequest) GetTopK() int32 {
	if o == nil || IsNil(o.TopK.Get()) {
		var ret int32
		return ret
	}
	return *o.TopK.Get()
}

// GetTopKOk returns a tuple with the TopK field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteRequest) GetTopKOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopK.Get(), o.TopK.IsSet()
}

// HasTopK returns a boolean if a field has been set.
func (o *CompleteRequest) HasTopK() bool {
	if o != nil && o.TopK.IsSet() {
		return true
	}

	return false
}

// SetTopK gets a reference to the given NullableInt32 and assigns it to the TopK field.
func (o *CompleteRequest) SetTopK(v int32) {
	o.TopK.Set(&v)
}

// SetTopKNil sets the value for TopK to be an explicit nil
func (o *CompleteRequest) SetTopKNil() {
	o.TopK.Set(nil)
}

// UnsetTopK ensures that no value is present for TopK, not even an explicit nil
func (o *CompleteRequest) UnsetTopK() {
	o.TopK.Unset()
}

// GetTopP returns the TopP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP.Get()) {
		var ret float32
		return ret
	}
	return *o.TopP.Get()
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteRequest) GetTopPOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopP.Get(), o.TopP.IsSet()
}

// HasTopP returns a boolean if a field has been set.
func (o *CompleteRequest) HasTopP() bool {
	if o != nil && o.TopP.IsSet() {
		return true
	}

	return false
}

// SetTopP gets a reference to the given NullableFloat32 and assigns it to the TopP field.
func (o *CompleteRequest) SetTopP(v float32) {
	o.TopP.Set(&v)
}

// SetTopPNil sets the value for TopP to be an explicit nil
func (o *CompleteRequest) SetTopPNil() {
	o.TopP.Set(nil)
}

// UnsetTopP ensures that no value is present for TopP, not even an explicit nil
func (o *CompleteRequest) UnsetTopP() {
	o.TopP.Unset()
}

func (o CompleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxTokensToSample) {
		toSerialize["max_tokens_to_sample"] = o.MaxTokensToSample
	}
	if o.Metadata.IsSet() {
		toSerialize["metadata"] = o.Metadata.Get()
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Prompt) {
		toSerialize["prompt"] = o.Prompt
	}
	if o.StopSequences != nil {
		toSerialize["stop_sequences"] = o.StopSequences
	}
	if o.Stream.IsSet() {
		toSerialize["stream"] = o.Stream.Get()
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.TopK.IsSet() {
		toSerialize["top_k"] = o.TopK.Get()
	}
	if o.TopP.IsSet() {
		toSerialize["top_p"] = o.TopP.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompleteRequest) UnmarshalJSON(data []byte) (err error) {
	varCompleteRequest := _CompleteRequest{}

	err = json.Unmarshal(data, &varCompleteRequest)

	if err != nil {
		return err
	}

	*o = CompleteRequest(varCompleteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "max_tokens_to_sample")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "model")
		delete(additionalProperties, "prompt")
		delete(additionalProperties, "stop_sequences")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "top_k")
		delete(additionalProperties, "top_p")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompleteRequest struct {
	value *CompleteRequest
	isSet bool
}

func (v NullableCompleteRequest) Get() *CompleteRequest {
	return v.value
}

func (v *NullableCompleteRequest) Set(val *CompleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteRequest(val *CompleteRequest) *NullableCompleteRequest {
	return &NullableCompleteRequest{value: val, isSet: true}
}

func (v NullableCompleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
