/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ContentPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentPart{}

// ContentPart struct for ContentPart
type ContentPart struct {
	// Specifies the detail level of the image.
	Detail NullableString `json:"detail,omitempty"`
	// A public URL of image prompt, only available for vision models.
	ImageUrl NullableImageUrl `json:"image_url,omitempty"`
	// Text prompt.
	Text NullableString `json:"text,omitempty"`
	// File path to a text file to be used as prompt.
	TextFile NullableString `json:"text_file,omitempty"`
	// The type of the content part.
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ContentPart ContentPart

// NewContentPart instantiates a new ContentPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentPart(type_ string) *ContentPart {
	this := ContentPart{}
	this.Type = type_
	return &this
}

// NewContentPartWithDefaults instantiates a new ContentPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentPartWithDefaults() *ContentPart {
	this := ContentPart{}
	return &this
}

// GetDetail returns the Detail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentPart) GetDetail() string {
	if o == nil || IsNil(o.Detail.Get()) {
		var ret string
		return ret
	}
	return *o.Detail.Get()
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentPart) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Detail.Get(), o.Detail.IsSet()
}

// HasDetail returns a boolean if a field has been set.
func (o *ContentPart) HasDetail() bool {
	if o != nil && o.Detail.IsSet() {
		return true
	}

	return false
}

// SetDetail gets a reference to the given NullableString and assigns it to the Detail field.
func (o *ContentPart) SetDetail(v string) {
	o.Detail.Set(&v)
}

// SetDetailNil sets the value for Detail to be an explicit nil
func (o *ContentPart) SetDetailNil() {
	o.Detail.Set(nil)
}

// UnsetDetail ensures that no value is present for Detail, not even an explicit nil
func (o *ContentPart) UnsetDetail() {
	o.Detail.Unset()
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentPart) GetImageUrl() ImageUrl {
	if o == nil || IsNil(o.ImageUrl.Get()) {
		var ret ImageUrl
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentPart) GetImageUrlOk() (*ImageUrl, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ContentPart) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableImageUrl and assigns it to the ImageUrl field.
func (o *ContentPart) SetImageUrl(v ImageUrl) {
	o.ImageUrl.Set(&v)
}

// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *ContentPart) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *ContentPart) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentPart) GetText() string {
	if o == nil || IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentPart) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *ContentPart) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableString and assigns it to the Text field.
func (o *ContentPart) SetText(v string) {
	o.Text.Set(&v)
}

// SetTextNil sets the value for Text to be an explicit nil
func (o *ContentPart) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *ContentPart) UnsetText() {
	o.Text.Unset()
}

// GetTextFile returns the TextFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContentPart) GetTextFile() string {
	if o == nil || IsNil(o.TextFile.Get()) {
		var ret string
		return ret
	}
	return *o.TextFile.Get()
}

// GetTextFileOk returns a tuple with the TextFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentPart) GetTextFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TextFile.Get(), o.TextFile.IsSet()
}

// HasTextFile returns a boolean if a field has been set.
func (o *ContentPart) HasTextFile() bool {
	if o != nil && o.TextFile.IsSet() {
		return true
	}

	return false
}

// SetTextFile gets a reference to the given NullableString and assigns it to the TextFile field.
func (o *ContentPart) SetTextFile(v string) {
	o.TextFile.Set(&v)
}

// SetTextFileNil sets the value for TextFile to be an explicit nil
func (o *ContentPart) SetTextFileNil() {
	o.TextFile.Set(nil)
}

// UnsetTextFile ensures that no value is present for TextFile, not even an explicit nil
func (o *ContentPart) UnsetTextFile() {
	o.TextFile.Unset()
}

// GetType returns the Type field value
func (o *ContentPart) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentPart) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentPart) SetType(v string) {
	o.Type = v
}

func (o ContentPart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Detail.IsSet() {
		toSerialize["detail"] = o.Detail.Get()
	}
	if o.ImageUrl.IsSet() {
		toSerialize["image_url"] = o.ImageUrl.Get()
	}
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	if o.TextFile.IsSet() {
		toSerialize["text_file"] = o.TextFile.Get()
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContentPart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentPart := _ContentPart{}

	err = json.Unmarshal(data, &varContentPart)

	if err != nil {
		return err
	}

	*o = ContentPart(varContentPart)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detail")
		delete(additionalProperties, "image_url")
		delete(additionalProperties, "text")
		delete(additionalProperties, "text_file")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContentPart struct {
	value *ContentPart
	isSet bool
}

func (v NullableContentPart) Get() *ContentPart {
	return v.value
}

func (v *NullableContentPart) Set(val *ContentPart) {
	v.value = val
	v.isSet = true
}

func (v NullableContentPart) IsSet() bool {
	return v.isSet
}

func (v *NullableContentPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentPart(val *ContentPart) *NullableContentPart {
	return &NullableContentPart{value: val, isSet: true}
}

func (v NullableContentPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
