/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the Usage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usage{}

// Usage struct for Usage
type Usage struct {
	// Total completion token used.
	CompletionTokens int32 `json:"completion_tokens"`
	// Breakdown of completion token usage of different types.
	CompletionTokensDetails CompletionUsageDetail `json:"completion_tokens_details"`
	// Number of individual live search source used.
	NumSourcesUsed int32 `json:"num_sources_used"`
	// Total prompt token used.
	PromptTokens int32 `json:"prompt_tokens"`
	// Breakdown of prompt token usage of different types.
	PromptTokensDetails PromptUsageDetail `json:"prompt_tokens_details"`
	// Total token used, the sum of prompt token and completion token amount.
	TotalTokens          int32 `json:"total_tokens"`
	AdditionalProperties map[string]interface{}
}

type _Usage Usage

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage(completionTokens int32, completionTokensDetails CompletionUsageDetail, numSourcesUsed int32, promptTokens int32, promptTokensDetails PromptUsageDetail, totalTokens int32) *Usage {
	this := Usage{}
	this.CompletionTokens = completionTokens
	this.CompletionTokensDetails = completionTokensDetails
	this.NumSourcesUsed = numSourcesUsed
	this.PromptTokens = promptTokens
	this.PromptTokensDetails = promptTokensDetails
	this.TotalTokens = totalTokens
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetCompletionTokens returns the CompletionTokens field value
func (o *Usage) GetCompletionTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CompletionTokens
}

// GetCompletionTokensOk returns a tuple with the CompletionTokens field value
// and a boolean to check if the value has been set.
func (o *Usage) GetCompletionTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletionTokens, true
}

// SetCompletionTokens sets field value
func (o *Usage) SetCompletionTokens(v int32) {
	o.CompletionTokens = v
}

// GetCompletionTokensDetails returns the CompletionTokensDetails field value
func (o *Usage) GetCompletionTokensDetails() CompletionUsageDetail {
	if o == nil {
		var ret CompletionUsageDetail
		return ret
	}

	return o.CompletionTokensDetails
}

// GetCompletionTokensDetailsOk returns a tuple with the CompletionTokensDetails field value
// and a boolean to check if the value has been set.
func (o *Usage) GetCompletionTokensDetailsOk() (*CompletionUsageDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletionTokensDetails, true
}

// SetCompletionTokensDetails sets field value
func (o *Usage) SetCompletionTokensDetails(v CompletionUsageDetail) {
	o.CompletionTokensDetails = v
}

// GetNumSourcesUsed returns the NumSourcesUsed field value
func (o *Usage) GetNumSourcesUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumSourcesUsed
}

// GetNumSourcesUsedOk returns a tuple with the NumSourcesUsed field value
// and a boolean to check if the value has been set.
func (o *Usage) GetNumSourcesUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumSourcesUsed, true
}

// SetNumSourcesUsed sets field value
func (o *Usage) SetNumSourcesUsed(v int32) {
	o.NumSourcesUsed = v
}

// GetPromptTokens returns the PromptTokens field value
func (o *Usage) GetPromptTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PromptTokens
}

// GetPromptTokensOk returns a tuple with the PromptTokens field value
// and a boolean to check if the value has been set.
func (o *Usage) GetPromptTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromptTokens, true
}

// SetPromptTokens sets field value
func (o *Usage) SetPromptTokens(v int32) {
	o.PromptTokens = v
}

// GetPromptTokensDetails returns the PromptTokensDetails field value
func (o *Usage) GetPromptTokensDetails() PromptUsageDetail {
	if o == nil {
		var ret PromptUsageDetail
		return ret
	}

	return o.PromptTokensDetails
}

// GetPromptTokensDetailsOk returns a tuple with the PromptTokensDetails field value
// and a boolean to check if the value has been set.
func (o *Usage) GetPromptTokensDetailsOk() (*PromptUsageDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromptTokensDetails, true
}

// SetPromptTokensDetails sets field value
func (o *Usage) SetPromptTokensDetails(v PromptUsageDetail) {
	o.PromptTokensDetails = v
}

// GetTotalTokens returns the TotalTokens field value
func (o *Usage) GetTotalTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalTokens
}

// GetTotalTokensOk returns a tuple with the TotalTokens field value
// and a boolean to check if the value has been set.
func (o *Usage) GetTotalTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTokens, true
}

// SetTotalTokens sets field value
func (o *Usage) SetTotalTokens(v int32) {
	o.TotalTokens = v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["completion_tokens"] = o.CompletionTokens
	toSerialize["completion_tokens_details"] = o.CompletionTokensDetails
	toSerialize["num_sources_used"] = o.NumSourcesUsed
	toSerialize["prompt_tokens"] = o.PromptTokens
	toSerialize["prompt_tokens_details"] = o.PromptTokensDetails
	toSerialize["total_tokens"] = o.TotalTokens

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Usage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"completion_tokens",
		"completion_tokens_details",
		"num_sources_used",
		"prompt_tokens",
		"prompt_tokens_details",
		"total_tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsage := _Usage{}

	err = json.Unmarshal(data, &varUsage)

	if err != nil {
		return err
	}

	*o = Usage(varUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "completion_tokens")
		delete(additionalProperties, "completion_tokens_details")
		delete(additionalProperties, "num_sources_used")
		delete(additionalProperties, "prompt_tokens")
		delete(additionalProperties, "prompt_tokens_details")
		delete(additionalProperties, "total_tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
