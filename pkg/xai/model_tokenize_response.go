/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the TokenizeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizeResponse{}

// TokenizeResponse struct for TokenizeResponse
type TokenizeResponse struct {
	// A list of tokens.
	TokenIds             []TokenizeResponseToken `json:"token_ids"`
	AdditionalProperties map[string]interface{}
}

type _TokenizeResponse TokenizeResponse

// NewTokenizeResponse instantiates a new TokenizeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizeResponse(tokenIds []TokenizeResponseToken) *TokenizeResponse {
	this := TokenizeResponse{}
	this.TokenIds = tokenIds
	return &this
}

// NewTokenizeResponseWithDefaults instantiates a new TokenizeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizeResponseWithDefaults() *TokenizeResponse {
	this := TokenizeResponse{}
	return &this
}

// GetTokenIds returns the TokenIds field value
func (o *TokenizeResponse) GetTokenIds() []TokenizeResponseToken {
	if o == nil {
		var ret []TokenizeResponseToken
		return ret
	}

	return o.TokenIds
}

// GetTokenIdsOk returns a tuple with the TokenIds field value
// and a boolean to check if the value has been set.
func (o *TokenizeResponse) GetTokenIdsOk() ([]TokenizeResponseToken, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenIds, true
}

// SetTokenIds sets field value
func (o *TokenizeResponse) SetTokenIds(v []TokenizeResponseToken) {
	o.TokenIds = v
}

func (o TokenizeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_ids"] = o.TokenIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenizeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizeResponse := _TokenizeResponse{}

	err = json.Unmarshal(data, &varTokenizeResponse)

	if err != nil {
		return err
	}

	*o = TokenizeResponse(varTokenizeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "token_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenizeResponse struct {
	value *TokenizeResponse
	isSet bool
}

func (v NullableTokenizeResponse) Get() *TokenizeResponse {
	return v.value
}

func (v *NullableTokenizeResponse) Set(val *TokenizeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizeResponse(val *TokenizeResponse) *NullableTokenizeResponse {
	return &NullableTokenizeResponse{value: val, isSet: true}
}

func (v NullableTokenizeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
