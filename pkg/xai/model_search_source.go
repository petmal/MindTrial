/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SearchSource - struct for SearchSource
type SearchSource struct {
	SearchSourceOneOf  *SearchSourceOneOf
	SearchSourceOneOf1 *SearchSourceOneOf1
	SearchSourceOneOf2 *SearchSourceOneOf2
	SearchSourceOneOf3 *SearchSourceOneOf3
}

// SearchSourceOneOfAsSearchSource is a convenience function that returns SearchSourceOneOf wrapped in SearchSource
func SearchSourceOneOfAsSearchSource(v *SearchSourceOneOf) SearchSource {
	return SearchSource{
		SearchSourceOneOf: v,
	}
}

// SearchSourceOneOf1AsSearchSource is a convenience function that returns SearchSourceOneOf1 wrapped in SearchSource
func SearchSourceOneOf1AsSearchSource(v *SearchSourceOneOf1) SearchSource {
	return SearchSource{
		SearchSourceOneOf1: v,
	}
}

// SearchSourceOneOf2AsSearchSource is a convenience function that returns SearchSourceOneOf2 wrapped in SearchSource
func SearchSourceOneOf2AsSearchSource(v *SearchSourceOneOf2) SearchSource {
	return SearchSource{
		SearchSourceOneOf2: v,
	}
}

// SearchSourceOneOf3AsSearchSource is a convenience function that returns SearchSourceOneOf3 wrapped in SearchSource
func SearchSourceOneOf3AsSearchSource(v *SearchSourceOneOf3) SearchSource {
	return SearchSource{
		SearchSourceOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SearchSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SearchSourceOneOf
	err = newStrictDecoder(data).Decode(&dst.SearchSourceOneOf)
	if err == nil {
		jsonSearchSourceOneOf, _ := json.Marshal(dst.SearchSourceOneOf)
		if string(jsonSearchSourceOneOf) == "{}" { // empty struct
			dst.SearchSourceOneOf = nil
		} else {
			if err = validator.Validate(dst.SearchSourceOneOf); err != nil {
				dst.SearchSourceOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SearchSourceOneOf = nil
	}

	// try to unmarshal data into SearchSourceOneOf1
	err = newStrictDecoder(data).Decode(&dst.SearchSourceOneOf1)
	if err == nil {
		jsonSearchSourceOneOf1, _ := json.Marshal(dst.SearchSourceOneOf1)
		if string(jsonSearchSourceOneOf1) == "{}" { // empty struct
			dst.SearchSourceOneOf1 = nil
		} else {
			if err = validator.Validate(dst.SearchSourceOneOf1); err != nil {
				dst.SearchSourceOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SearchSourceOneOf1 = nil
	}

	// try to unmarshal data into SearchSourceOneOf2
	err = newStrictDecoder(data).Decode(&dst.SearchSourceOneOf2)
	if err == nil {
		jsonSearchSourceOneOf2, _ := json.Marshal(dst.SearchSourceOneOf2)
		if string(jsonSearchSourceOneOf2) == "{}" { // empty struct
			dst.SearchSourceOneOf2 = nil
		} else {
			if err = validator.Validate(dst.SearchSourceOneOf2); err != nil {
				dst.SearchSourceOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SearchSourceOneOf2 = nil
	}

	// try to unmarshal data into SearchSourceOneOf3
	err = newStrictDecoder(data).Decode(&dst.SearchSourceOneOf3)
	if err == nil {
		jsonSearchSourceOneOf3, _ := json.Marshal(dst.SearchSourceOneOf3)
		if string(jsonSearchSourceOneOf3) == "{}" { // empty struct
			dst.SearchSourceOneOf3 = nil
		} else {
			if err = validator.Validate(dst.SearchSourceOneOf3); err != nil {
				dst.SearchSourceOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SearchSourceOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SearchSourceOneOf = nil
		dst.SearchSourceOneOf1 = nil
		dst.SearchSourceOneOf2 = nil
		dst.SearchSourceOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SearchSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SearchSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SearchSource) MarshalJSON() ([]byte, error) {
	if src.SearchSourceOneOf != nil {
		return json.Marshal(&src.SearchSourceOneOf)
	}

	if src.SearchSourceOneOf1 != nil {
		return json.Marshal(&src.SearchSourceOneOf1)
	}

	if src.SearchSourceOneOf2 != nil {
		return json.Marshal(&src.SearchSourceOneOf2)
	}

	if src.SearchSourceOneOf3 != nil {
		return json.Marshal(&src.SearchSourceOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SearchSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SearchSourceOneOf != nil {
		return obj.SearchSourceOneOf
	}

	if obj.SearchSourceOneOf1 != nil {
		return obj.SearchSourceOneOf1
	}

	if obj.SearchSourceOneOf2 != nil {
		return obj.SearchSourceOneOf2
	}

	if obj.SearchSourceOneOf3 != nil {
		return obj.SearchSourceOneOf3
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SearchSource) GetActualInstanceValue() interface{} {
	if obj.SearchSourceOneOf != nil {
		return *obj.SearchSourceOneOf
	}

	if obj.SearchSourceOneOf1 != nil {
		return *obj.SearchSourceOneOf1
	}

	if obj.SearchSourceOneOf2 != nil {
		return *obj.SearchSourceOneOf2
	}

	if obj.SearchSourceOneOf3 != nil {
		return *obj.SearchSourceOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableSearchSource struct {
	value *SearchSource
	isSet bool
}

func (v NullableSearchSource) Get() *SearchSource {
	return v.value
}

func (v *NullableSearchSource) Set(val *SearchSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSource(val *SearchSource) *NullableSearchSource {
	return &NullableSearchSource{value: val, isSet: true}
}

func (v NullableSearchSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
