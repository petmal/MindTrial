/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the SearchParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchParameters{}

// SearchParameters Parameters to control realtime data.
type SearchParameters struct {
	// Date from which to consider the results in ISO-8601 YYYY-MM-DD. See https://en.wikipedia.org/wiki/ISO_8601.
	FromDate NullableString `json:"from_date,omitempty"`
	// Maximum number of search results to use.
	MaxSearchResults NullableInt32 `json:"max_search_results,omitempty"`
	// Choose the mode to query realtime data: * `off`: no search performed and no external will be considered. * `on` (default): the model will search in every sources for relevant data. * `auto`: the model choose whether to search data or not and where to search the data.
	Mode NullableString `json:"mode,omitempty"`
	// Whether to return citations in the response or not.
	ReturnCitations NullableBool `json:"return_citations,omitempty"`
	// List of sources to search in. If no sources specified, the model will look over the web and X by default.
	Sources []SearchSource `json:"sources,omitempty"`
	// Date up to which to consider the results in ISO-8601 YYYY-MM-DD. See https://en.wikipedia.org/wiki/ISO_8601.
	ToDate               NullableString `json:"to_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchParameters SearchParameters

// NewSearchParameters instantiates a new SearchParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchParameters() *SearchParameters {
	this := SearchParameters{}
	var maxSearchResults int32 = 15
	this.MaxSearchResults = *NewNullableInt32(&maxSearchResults)
	var mode string = "auto"
	this.Mode = *NewNullableString(&mode)
	var returnCitations bool = true
	this.ReturnCitations = *NewNullableBool(&returnCitations)
	return &this
}

// NewSearchParametersWithDefaults instantiates a new SearchParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchParametersWithDefaults() *SearchParameters {
	this := SearchParameters{}
	var maxSearchResults int32 = 15
	this.MaxSearchResults = *NewNullableInt32(&maxSearchResults)
	var mode string = "auto"
	this.Mode = *NewNullableString(&mode)
	var returnCitations bool = true
	this.ReturnCitations = *NewNullableBool(&returnCitations)
	return &this
}

// GetFromDate returns the FromDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchParameters) GetFromDate() string {
	if o == nil || IsNil(o.FromDate.Get()) {
		var ret string
		return ret
	}
	return *o.FromDate.Get()
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchParameters) GetFromDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromDate.Get(), o.FromDate.IsSet()
}

// HasFromDate returns a boolean if a field has been set.
func (o *SearchParameters) HasFromDate() bool {
	if o != nil && o.FromDate.IsSet() {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given NullableString and assigns it to the FromDate field.
func (o *SearchParameters) SetFromDate(v string) {
	o.FromDate.Set(&v)
}

// SetFromDateNil sets the value for FromDate to be an explicit nil
func (o *SearchParameters) SetFromDateNil() {
	o.FromDate.Set(nil)
}

// UnsetFromDate ensures that no value is present for FromDate, not even an explicit nil
func (o *SearchParameters) UnsetFromDate() {
	o.FromDate.Unset()
}

// GetMaxSearchResults returns the MaxSearchResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchParameters) GetMaxSearchResults() int32 {
	if o == nil || IsNil(o.MaxSearchResults.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxSearchResults.Get()
}

// GetMaxSearchResultsOk returns a tuple with the MaxSearchResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchParameters) GetMaxSearchResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSearchResults.Get(), o.MaxSearchResults.IsSet()
}

// HasMaxSearchResults returns a boolean if a field has been set.
func (o *SearchParameters) HasMaxSearchResults() bool {
	if o != nil && o.MaxSearchResults.IsSet() {
		return true
	}

	return false
}

// SetMaxSearchResults gets a reference to the given NullableInt32 and assigns it to the MaxSearchResults field.
func (o *SearchParameters) SetMaxSearchResults(v int32) {
	o.MaxSearchResults.Set(&v)
}

// SetMaxSearchResultsNil sets the value for MaxSearchResults to be an explicit nil
func (o *SearchParameters) SetMaxSearchResultsNil() {
	o.MaxSearchResults.Set(nil)
}

// UnsetMaxSearchResults ensures that no value is present for MaxSearchResults, not even an explicit nil
func (o *SearchParameters) UnsetMaxSearchResults() {
	o.MaxSearchResults.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchParameters) GetMode() string {
	if o == nil || IsNil(o.Mode.Get()) {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchParameters) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *SearchParameters) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *SearchParameters) SetMode(v string) {
	o.Mode.Set(&v)
}

// SetModeNil sets the value for Mode to be an explicit nil
func (o *SearchParameters) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *SearchParameters) UnsetMode() {
	o.Mode.Unset()
}

// GetReturnCitations returns the ReturnCitations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchParameters) GetReturnCitations() bool {
	if o == nil || IsNil(o.ReturnCitations.Get()) {
		var ret bool
		return ret
	}
	return *o.ReturnCitations.Get()
}

// GetReturnCitationsOk returns a tuple with the ReturnCitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchParameters) GetReturnCitationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnCitations.Get(), o.ReturnCitations.IsSet()
}

// HasReturnCitations returns a boolean if a field has been set.
func (o *SearchParameters) HasReturnCitations() bool {
	if o != nil && o.ReturnCitations.IsSet() {
		return true
	}

	return false
}

// SetReturnCitations gets a reference to the given NullableBool and assigns it to the ReturnCitations field.
func (o *SearchParameters) SetReturnCitations(v bool) {
	o.ReturnCitations.Set(&v)
}

// SetReturnCitationsNil sets the value for ReturnCitations to be an explicit nil
func (o *SearchParameters) SetReturnCitationsNil() {
	o.ReturnCitations.Set(nil)
}

// UnsetReturnCitations ensures that no value is present for ReturnCitations, not even an explicit nil
func (o *SearchParameters) UnsetReturnCitations() {
	o.ReturnCitations.Unset()
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchParameters) GetSources() []SearchSource {
	if o == nil {
		var ret []SearchSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchParameters) GetSourcesOk() ([]SearchSource, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *SearchParameters) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SearchSource and assigns it to the Sources field.
func (o *SearchParameters) SetSources(v []SearchSource) {
	o.Sources = v
}

// GetToDate returns the ToDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchParameters) GetToDate() string {
	if o == nil || IsNil(o.ToDate.Get()) {
		var ret string
		return ret
	}
	return *o.ToDate.Get()
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchParameters) GetToDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToDate.Get(), o.ToDate.IsSet()
}

// HasToDate returns a boolean if a field has been set.
func (o *SearchParameters) HasToDate() bool {
	if o != nil && o.ToDate.IsSet() {
		return true
	}

	return false
}

// SetToDate gets a reference to the given NullableString and assigns it to the ToDate field.
func (o *SearchParameters) SetToDate(v string) {
	o.ToDate.Set(&v)
}

// SetToDateNil sets the value for ToDate to be an explicit nil
func (o *SearchParameters) SetToDateNil() {
	o.ToDate.Set(nil)
}

// UnsetToDate ensures that no value is present for ToDate, not even an explicit nil
func (o *SearchParameters) UnsetToDate() {
	o.ToDate.Unset()
}

func (o SearchParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FromDate.IsSet() {
		toSerialize["from_date"] = o.FromDate.Get()
	}
	if o.MaxSearchResults.IsSet() {
		toSerialize["max_search_results"] = o.MaxSearchResults.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.ReturnCitations.IsSet() {
		toSerialize["return_citations"] = o.ReturnCitations.Get()
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if o.ToDate.IsSet() {
		toSerialize["to_date"] = o.ToDate.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchParameters) UnmarshalJSON(data []byte) (err error) {
	varSearchParameters := _SearchParameters{}

	err = json.Unmarshal(data, &varSearchParameters)

	if err != nil {
		return err
	}

	*o = SearchParameters(varSearchParameters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "from_date")
		delete(additionalProperties, "max_search_results")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "return_citations")
		delete(additionalProperties, "sources")
		delete(additionalProperties, "to_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchParameters struct {
	value *SearchParameters
	isSet bool
}

func (v NullableSearchParameters) Get() *SearchParameters {
	return v.value
}

func (v *NullableSearchParameters) Set(val *SearchParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchParameters(val *SearchParameters) *NullableSearchParameters {
	return &NullableSearchParameters{value: val, isSet: true}
}

func (v NullableSearchParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
