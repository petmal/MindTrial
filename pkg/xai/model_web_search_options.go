/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the WebSearchOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebSearchOptions{}

// WebSearchOptions struct for WebSearchOptions
type WebSearchOptions struct {
	// This field included for compatibility reason with OpenAI's API. It is mapped to `max_search`.
	SearchContextSize    NullableString `json:"search_context_size,omitempty"`
	UserLocation         interface{}    `json:"user_location,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebSearchOptions WebSearchOptions

// NewWebSearchOptions instantiates a new WebSearchOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebSearchOptions() *WebSearchOptions {
	this := WebSearchOptions{}
	var searchContextSize string = "medium"
	this.SearchContextSize = *NewNullableString(&searchContextSize)
	return &this
}

// NewWebSearchOptionsWithDefaults instantiates a new WebSearchOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebSearchOptionsWithDefaults() *WebSearchOptions {
	this := WebSearchOptions{}
	var searchContextSize string = "medium"
	this.SearchContextSize = *NewNullableString(&searchContextSize)
	return &this
}

// GetSearchContextSize returns the SearchContextSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebSearchOptions) GetSearchContextSize() string {
	if o == nil || IsNil(o.SearchContextSize.Get()) {
		var ret string
		return ret
	}
	return *o.SearchContextSize.Get()
}

// GetSearchContextSizeOk returns a tuple with the SearchContextSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebSearchOptions) GetSearchContextSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchContextSize.Get(), o.SearchContextSize.IsSet()
}

// HasSearchContextSize returns a boolean if a field has been set.
func (o *WebSearchOptions) HasSearchContextSize() bool {
	if o != nil && o.SearchContextSize.IsSet() {
		return true
	}

	return false
}

// SetSearchContextSize gets a reference to the given NullableString and assigns it to the SearchContextSize field.
func (o *WebSearchOptions) SetSearchContextSize(v string) {
	o.SearchContextSize.Set(&v)
}

// SetSearchContextSizeNil sets the value for SearchContextSize to be an explicit nil
func (o *WebSearchOptions) SetSearchContextSizeNil() {
	o.SearchContextSize.Set(nil)
}

// UnsetSearchContextSize ensures that no value is present for SearchContextSize, not even an explicit nil
func (o *WebSearchOptions) UnsetSearchContextSize() {
	o.SearchContextSize.Unset()
}

// GetUserLocation returns the UserLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebSearchOptions) GetUserLocation() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UserLocation
}

// GetUserLocationOk returns a tuple with the UserLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebSearchOptions) GetUserLocationOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UserLocation) {
		return nil, false
	}
	return &o.UserLocation, true
}

// HasUserLocation returns a boolean if a field has been set.
func (o *WebSearchOptions) HasUserLocation() bool {
	if o != nil && !IsNil(o.UserLocation) {
		return true
	}

	return false
}

// SetUserLocation gets a reference to the given interface{} and assigns it to the UserLocation field.
func (o *WebSearchOptions) SetUserLocation(v interface{}) {
	o.UserLocation = v
}

func (o WebSearchOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebSearchOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SearchContextSize.IsSet() {
		toSerialize["search_context_size"] = o.SearchContextSize.Get()
	}
	if o.UserLocation != nil {
		toSerialize["user_location"] = o.UserLocation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebSearchOptions) UnmarshalJSON(data []byte) (err error) {
	varWebSearchOptions := _WebSearchOptions{}

	err = json.Unmarshal(data, &varWebSearchOptions)

	if err != nil {
		return err
	}

	*o = WebSearchOptions(varWebSearchOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "search_context_size")
		delete(additionalProperties, "user_location")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebSearchOptions struct {
	value *WebSearchOptions
	isSet bool
}

func (v NullableWebSearchOptions) Get() *WebSearchOptions {
	return v.value
}

func (v *NullableWebSearchOptions) Set(val *WebSearchOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableWebSearchOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableWebSearchOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebSearchOptions(val *WebSearchOptions) *NullableWebSearchOptions {
	return &NullableWebSearchOptions{value: val, isSet: true}
}

func (v NullableWebSearchOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebSearchOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
