/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageOneOf2{}

// MessageOneOf2 Assistant role message, previous chat messages from the model.
type MessageOneOf2 struct {
	// Assistant prompt content.
	Content NullableContent `json:"content,omitempty"`
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	Name NullableString `json:"name,omitempty"`
	// Assistant reasoning content.
	ReasoningContent NullableString `json:"reasoning_content,omitempty"`
	Role             string         `json:"role"`
	// An array of tool calls available to the model on your machine.
	ToolCalls            []ToolCall `json:"tool_calls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MessageOneOf2 MessageOneOf2

// NewMessageOneOf2 instantiates a new MessageOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageOneOf2(role string) *MessageOneOf2 {
	this := MessageOneOf2{}
	this.Role = role
	return &this
}

// NewMessageOneOf2WithDefaults instantiates a new MessageOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageOneOf2WithDefaults() *MessageOneOf2 {
	this := MessageOneOf2{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageOneOf2) GetContent() Content {
	if o == nil || IsNil(o.Content.Get()) {
		var ret Content
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageOneOf2) GetContentOk() (*Content, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *MessageOneOf2) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableContent and assigns it to the Content field.
func (o *MessageOneOf2) SetContent(v Content) {
	o.Content.Set(&v)
}

// SetContentNil sets the value for Content to be an explicit nil
func (o *MessageOneOf2) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *MessageOneOf2) UnsetContent() {
	o.Content.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageOneOf2) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageOneOf2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MessageOneOf2) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MessageOneOf2) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *MessageOneOf2) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MessageOneOf2) UnsetName() {
	o.Name.Unset()
}

// GetReasoningContent returns the ReasoningContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageOneOf2) GetReasoningContent() string {
	if o == nil || IsNil(o.ReasoningContent.Get()) {
		var ret string
		return ret
	}
	return *o.ReasoningContent.Get()
}

// GetReasoningContentOk returns a tuple with the ReasoningContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageOneOf2) GetReasoningContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReasoningContent.Get(), o.ReasoningContent.IsSet()
}

// HasReasoningContent returns a boolean if a field has been set.
func (o *MessageOneOf2) HasReasoningContent() bool {
	if o != nil && o.ReasoningContent.IsSet() {
		return true
	}

	return false
}

// SetReasoningContent gets a reference to the given NullableString and assigns it to the ReasoningContent field.
func (o *MessageOneOf2) SetReasoningContent(v string) {
	o.ReasoningContent.Set(&v)
}

// SetReasoningContentNil sets the value for ReasoningContent to be an explicit nil
func (o *MessageOneOf2) SetReasoningContentNil() {
	o.ReasoningContent.Set(nil)
}

// UnsetReasoningContent ensures that no value is present for ReasoningContent, not even an explicit nil
func (o *MessageOneOf2) UnsetReasoningContent() {
	o.ReasoningContent.Unset()
}

// GetRole returns the Role field value
func (o *MessageOneOf2) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *MessageOneOf2) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *MessageOneOf2) SetRole(v string) {
	o.Role = v
}

// GetToolCalls returns the ToolCalls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageOneOf2) GetToolCalls() []ToolCall {
	if o == nil {
		var ret []ToolCall
		return ret
	}
	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageOneOf2) GetToolCallsOk() ([]ToolCall, bool) {
	if o == nil || IsNil(o.ToolCalls) {
		return nil, false
	}
	return o.ToolCalls, true
}

// HasToolCalls returns a boolean if a field has been set.
func (o *MessageOneOf2) HasToolCalls() bool {
	if o != nil && !IsNil(o.ToolCalls) {
		return true
	}

	return false
}

// SetToolCalls gets a reference to the given []ToolCall and assigns it to the ToolCalls field.
func (o *MessageOneOf2) SetToolCalls(v []ToolCall) {
	o.ToolCalls = v
}

func (o MessageOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ReasoningContent.IsSet() {
		toSerialize["reasoning_content"] = o.ReasoningContent.Get()
	}
	toSerialize["role"] = o.Role
	if o.ToolCalls != nil {
		toSerialize["tool_calls"] = o.ToolCalls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageOneOf2 := _MessageOneOf2{}

	err = json.Unmarshal(data, &varMessageOneOf2)

	if err != nil {
		return err
	}

	*o = MessageOneOf2(varMessageOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "name")
		delete(additionalProperties, "reasoning_content")
		delete(additionalProperties, "role")
		delete(additionalProperties, "tool_calls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageOneOf2 struct {
	value *MessageOneOf2
	isSet bool
}

func (v NullableMessageOneOf2) Get() *MessageOneOf2 {
	return v.value
}

func (v *NullableMessageOneOf2) Set(val *MessageOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageOneOf2(val *MessageOneOf2) *NullableMessageOneOf2 {
	return &NullableMessageOneOf2{value: val, isSet: true}
}

func (v NullableMessageOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
