/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ApiKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiKey{}

// ApiKey struct for ApiKey
type ApiKey struct {
	// A list of ACLs authorized with the API key, e.g. `\"api-key:endpoint:*\"`, `\"api-key:model:*\"`.
	Acls []string `json:"acls"`
	// Indicates whether the API key is blocked.
	ApiKeyBlocked bool `json:"api_key_blocked"`
	// Indicates whether the API key is disabled.
	ApiKeyDisabled bool `json:"api_key_disabled"`
	// ID of the API key.
	ApiKeyId string `json:"api_key_id"`
	// Creation time of the API key in Unix timestamp.
	CreateTime string `json:"create_time"`
	// User ID of the user who last modified the API key.
	ModifiedBy string `json:"modified_by"`
	// Last modification time of the API key in Unix timestamp.
	ModifyTime string `json:"modify_time"`
	// The name of the API key specified by user.
	Name string `json:"name"`
	// The redacted API key.
	RedactedApiKey string `json:"redacted_api_key"`
	// Indicates whether the team that owns the API key.
	TeamBlocked bool `json:"team_blocked"`
	// The team ID of the team that owns the API key.
	TeamId string `json:"team_id"`
	// User ID the API key belongs to.
	UserId               string `json:"user_id"`
	AdditionalProperties map[string]interface{}
}

type _ApiKey ApiKey

// NewApiKey instantiates a new ApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKey(acls []string, apiKeyBlocked bool, apiKeyDisabled bool, apiKeyId string, createTime string, modifiedBy string, modifyTime string, name string, redactedApiKey string, teamBlocked bool, teamId string, userId string) *ApiKey {
	this := ApiKey{}
	this.Acls = acls
	this.ApiKeyBlocked = apiKeyBlocked
	this.ApiKeyDisabled = apiKeyDisabled
	this.ApiKeyId = apiKeyId
	this.CreateTime = createTime
	this.ModifiedBy = modifiedBy
	this.ModifyTime = modifyTime
	this.Name = name
	this.RedactedApiKey = redactedApiKey
	this.TeamBlocked = teamBlocked
	this.TeamId = teamId
	this.UserId = userId
	return &this
}

// NewApiKeyWithDefaults instantiates a new ApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyWithDefaults() *ApiKey {
	this := ApiKey{}
	return &this
}

// GetAcls returns the Acls field value
func (o *ApiKey) GetAcls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Acls
}

// GetAclsOk returns a tuple with the Acls field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetAclsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Acls, true
}

// SetAcls sets field value
func (o *ApiKey) SetAcls(v []string) {
	o.Acls = v
}

// GetApiKeyBlocked returns the ApiKeyBlocked field value
func (o *ApiKey) GetApiKeyBlocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApiKeyBlocked
}

// GetApiKeyBlockedOk returns a tuple with the ApiKeyBlocked field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetApiKeyBlockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKeyBlocked, true
}

// SetApiKeyBlocked sets field value
func (o *ApiKey) SetApiKeyBlocked(v bool) {
	o.ApiKeyBlocked = v
}

// GetApiKeyDisabled returns the ApiKeyDisabled field value
func (o *ApiKey) GetApiKeyDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApiKeyDisabled
}

// GetApiKeyDisabledOk returns a tuple with the ApiKeyDisabled field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetApiKeyDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKeyDisabled, true
}

// SetApiKeyDisabled sets field value
func (o *ApiKey) SetApiKeyDisabled(v bool) {
	o.ApiKeyDisabled = v
}

// GetApiKeyId returns the ApiKeyId field value
func (o *ApiKey) GetApiKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKeyId
}

// GetApiKeyIdOk returns a tuple with the ApiKeyId field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetApiKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKeyId, true
}

// SetApiKeyId sets field value
func (o *ApiKey) SetApiKeyId(v string) {
	o.ApiKeyId = v
}

// GetCreateTime returns the CreateTime field value
func (o *ApiKey) GetCreateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetCreateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateTime, true
}

// SetCreateTime sets field value
func (o *ApiKey) SetCreateTime(v string) {
	o.CreateTime = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *ApiKey) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *ApiKey) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModifyTime returns the ModifyTime field value
func (o *ApiKey) GetModifyTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifyTime
}

// GetModifyTimeOk returns a tuple with the ModifyTime field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetModifyTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifyTime, true
}

// SetModifyTime sets field value
func (o *ApiKey) SetModifyTime(v string) {
	o.ModifyTime = v
}

// GetName returns the Name field value
func (o *ApiKey) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiKey) SetName(v string) {
	o.Name = v
}

// GetRedactedApiKey returns the RedactedApiKey field value
func (o *ApiKey) GetRedactedApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RedactedApiKey
}

// GetRedactedApiKeyOk returns a tuple with the RedactedApiKey field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetRedactedApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedactedApiKey, true
}

// SetRedactedApiKey sets field value
func (o *ApiKey) SetRedactedApiKey(v string) {
	o.RedactedApiKey = v
}

// GetTeamBlocked returns the TeamBlocked field value
func (o *ApiKey) GetTeamBlocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TeamBlocked
}

// GetTeamBlockedOk returns a tuple with the TeamBlocked field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetTeamBlockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamBlocked, true
}

// SetTeamBlocked sets field value
func (o *ApiKey) SetTeamBlocked(v bool) {
	o.TeamBlocked = v
}

// GetTeamId returns the TeamId field value
func (o *ApiKey) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *ApiKey) SetTeamId(v string) {
	o.TeamId = v
}

// GetUserId returns the UserId field value
func (o *ApiKey) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ApiKey) SetUserId(v string) {
	o.UserId = v
}

func (o ApiKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["acls"] = o.Acls
	toSerialize["api_key_blocked"] = o.ApiKeyBlocked
	toSerialize["api_key_disabled"] = o.ApiKeyDisabled
	toSerialize["api_key_id"] = o.ApiKeyId
	toSerialize["create_time"] = o.CreateTime
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["modify_time"] = o.ModifyTime
	toSerialize["name"] = o.Name
	toSerialize["redacted_api_key"] = o.RedactedApiKey
	toSerialize["team_blocked"] = o.TeamBlocked
	toSerialize["team_id"] = o.TeamId
	toSerialize["user_id"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"acls",
		"api_key_blocked",
		"api_key_disabled",
		"api_key_id",
		"create_time",
		"modified_by",
		"modify_time",
		"name",
		"redacted_api_key",
		"team_blocked",
		"team_id",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiKey := _ApiKey{}

	err = json.Unmarshal(data, &varApiKey)

	if err != nil {
		return err
	}

	*o = ApiKey(varApiKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acls")
		delete(additionalProperties, "api_key_blocked")
		delete(additionalProperties, "api_key_disabled")
		delete(additionalProperties, "api_key_id")
		delete(additionalProperties, "create_time")
		delete(additionalProperties, "modified_by")
		delete(additionalProperties, "modify_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "redacted_api_key")
		delete(additionalProperties, "team_blocked")
		delete(additionalProperties, "team_id")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiKey struct {
	value *ApiKey
	isSet bool
}

func (v NullableApiKey) Get() *ApiKey {
	return v.value
}

func (v *NullableApiKey) Set(val *ApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKey(val *ApiKey) *NullableApiKey {
	return &NullableApiKey{value: val, isSet: true}
}

func (v NullableApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
