/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseFormatOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseFormatOneOf2{}

// ResponseFormatOneOf2 Specify json_schema response format with a given schema. Type is always `\"json_schema\"`.
type ResponseFormatOneOf2 struct {
	JsonSchema           interface{} `json:"json_schema"`
	Type                 string      `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ResponseFormatOneOf2 ResponseFormatOneOf2

// NewResponseFormatOneOf2 instantiates a new ResponseFormatOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseFormatOneOf2(jsonSchema interface{}, type_ string) *ResponseFormatOneOf2 {
	this := ResponseFormatOneOf2{}
	this.JsonSchema = jsonSchema
	this.Type = type_
	return &this
}

// NewResponseFormatOneOf2WithDefaults instantiates a new ResponseFormatOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseFormatOneOf2WithDefaults() *ResponseFormatOneOf2 {
	this := ResponseFormatOneOf2{}
	return &this
}

// GetJsonSchema returns the JsonSchema field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ResponseFormatOneOf2) GetJsonSchema() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.JsonSchema
}

// GetJsonSchemaOk returns a tuple with the JsonSchema field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseFormatOneOf2) GetJsonSchemaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.JsonSchema) {
		return nil, false
	}
	return &o.JsonSchema, true
}

// SetJsonSchema sets field value
func (o *ResponseFormatOneOf2) SetJsonSchema(v interface{}) {
	o.JsonSchema = v
}

// GetType returns the Type field value
func (o *ResponseFormatOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResponseFormatOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResponseFormatOneOf2) SetType(v string) {
	o.Type = v
}

func (o ResponseFormatOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseFormatOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.JsonSchema != nil {
		toSerialize["json_schema"] = o.JsonSchema
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseFormatOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"json_schema",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseFormatOneOf2 := _ResponseFormatOneOf2{}

	err = json.Unmarshal(data, &varResponseFormatOneOf2)

	if err != nil {
		return err
	}

	*o = ResponseFormatOneOf2(varResponseFormatOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "json_schema")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseFormatOneOf2 struct {
	value *ResponseFormatOneOf2
	isSet bool
}

func (v NullableResponseFormatOneOf2) Get() *ResponseFormatOneOf2 {
	return v.value
}

func (v *NullableResponseFormatOneOf2) Set(val *ResponseFormatOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseFormatOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseFormatOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseFormatOneOf2(val *ResponseFormatOneOf2) *NullableResponseFormatOneOf2 {
	return &NullableResponseFormatOneOf2{value: val, isSet: true}
}

func (v NullableResponseFormatOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseFormatOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
