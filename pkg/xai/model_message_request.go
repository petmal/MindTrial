/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the MessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageRequest{}

// MessageRequest Request message for `/v1/messages`
type MessageRequest struct {
	// The maximum number of tokens to generate before stopping. The model may stop before the max_tokens when it reaches the stop sequence.
	MaxTokens *int32 `json:"max_tokens,omitempty"`
	// Input messages.
	Messages []MessageBody `json:"messages,omitempty"`
	// An object describing metadata about the request.
	Metadata NullableMessageMetadata `json:"metadata,omitempty"`
	// Model name for the model to use.
	Model *string `json:"model,omitempty"`
	// (Not supported by reasoning models) Up to 4 sequences where the API will stop generating further tokens.
	StopSequences []string `json:"stop_sequences,omitempty"`
	// If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.
	Stream NullableBool `json:"stream,omitempty"`
	// System prompt message for the model, defining how the model should behave to user messages.
	System NullableSystemMessageContent `json:"system,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. It may not work well with reasoning models.
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// Controls which (if any) tool is called by the model. `\"none\"` means the model will not call any tool and instead generates a message. `\"auto\"` means the model can pick between generating a message or calling one or more tools. `\"any\"` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"tool\", \"function\": {\"name\": \"get_weather\"}}` forces the model to call that tool. `\"none\"` is the default when no tools are provided. `\"auto\"` is the default if tools are provided.
	ToolChoice NullableMessageToolChoice `json:"tool_choice,omitempty"`
	// A list of tools the model may call in JSON-schema. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	Tools []MessageTools `json:"tools,omitempty"`
	// (Unsupported) When generating next tokens, randomly selecting the next token from the k most likely options.
	TopK NullableInt32 `json:"top_k,omitempty"`
	// An alternative to sampling with `temperature`, called nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. It is generally recommended to alter this or `temperature` but not both.
	TopP                 NullableFloat32 `json:"top_p,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MessageRequest MessageRequest

// NewMessageRequest instantiates a new MessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageRequest() *MessageRequest {
	this := MessageRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// NewMessageRequestWithDefaults instantiates a new MessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageRequestWithDefaults() *MessageRequest {
	this := MessageRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise.
func (o *MessageRequest) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens) {
		var ret int32
		return ret
	}
	return *o.MaxTokens
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetMaxTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTokens) {
		return nil, false
	}
	return o.MaxTokens, true
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *MessageRequest) HasMaxTokens() bool {
	if o != nil && !IsNil(o.MaxTokens) {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given int32 and assigns it to the MaxTokens field.
func (o *MessageRequest) SetMaxTokens(v int32) {
	o.MaxTokens = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *MessageRequest) GetMessages() []MessageBody {
	if o == nil || IsNil(o.Messages) {
		var ret []MessageBody
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetMessagesOk() ([]MessageBody, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *MessageRequest) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []MessageBody and assigns it to the Messages field.
func (o *MessageRequest) SetMessages(v []MessageBody) {
	o.Messages = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetMetadata() MessageMetadata {
	if o == nil || IsNil(o.Metadata.Get()) {
		var ret MessageMetadata
		return ret
	}
	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetMetadataOk() (*MessageMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// HasMetadata returns a boolean if a field has been set.
func (o *MessageRequest) HasMetadata() bool {
	if o != nil && o.Metadata.IsSet() {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NullableMessageMetadata and assigns it to the Metadata field.
func (o *MessageRequest) SetMetadata(v MessageMetadata) {
	o.Metadata.Set(&v)
}

// SetMetadataNil sets the value for Metadata to be an explicit nil
func (o *MessageRequest) SetMetadataNil() {
	o.Metadata.Set(nil)
}

// UnsetMetadata ensures that no value is present for Metadata, not even an explicit nil
func (o *MessageRequest) UnsetMetadata() {
	o.Metadata.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *MessageRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *MessageRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *MessageRequest) SetModel(v string) {
	o.Model = &v
}

// GetStopSequences returns the StopSequences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetStopSequences() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.StopSequences
}

// GetStopSequencesOk returns a tuple with the StopSequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetStopSequencesOk() ([]string, bool) {
	if o == nil || IsNil(o.StopSequences) {
		return nil, false
	}
	return o.StopSequences, true
}

// HasStopSequences returns a boolean if a field has been set.
func (o *MessageRequest) HasStopSequences() bool {
	if o != nil && !IsNil(o.StopSequences) {
		return true
	}

	return false
}

// SetStopSequences gets a reference to the given []string and assigns it to the StopSequences field.
func (o *MessageRequest) SetStopSequences(v []string) {
	o.StopSequences = v
}

// GetStream returns the Stream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream.Get()) {
		var ret bool
		return ret
	}
	return *o.Stream.Get()
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stream.Get(), o.Stream.IsSet()
}

// HasStream returns a boolean if a field has been set.
func (o *MessageRequest) HasStream() bool {
	if o != nil && o.Stream.IsSet() {
		return true
	}

	return false
}

// SetStream gets a reference to the given NullableBool and assigns it to the Stream field.
func (o *MessageRequest) SetStream(v bool) {
	o.Stream.Set(&v)
}

// SetStreamNil sets the value for Stream to be an explicit nil
func (o *MessageRequest) SetStreamNil() {
	o.Stream.Set(nil)
}

// UnsetStream ensures that no value is present for Stream, not even an explicit nil
func (o *MessageRequest) UnsetStream() {
	o.Stream.Unset()
}

// GetSystem returns the System field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetSystem() SystemMessageContent {
	if o == nil || IsNil(o.System.Get()) {
		var ret SystemMessageContent
		return ret
	}
	return *o.System.Get()
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetSystemOk() (*SystemMessageContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.System.Get(), o.System.IsSet()
}

// HasSystem returns a boolean if a field has been set.
func (o *MessageRequest) HasSystem() bool {
	if o != nil && o.System.IsSet() {
		return true
	}

	return false
}

// SetSystem gets a reference to the given NullableSystemMessageContent and assigns it to the System field.
func (o *MessageRequest) SetSystem(v SystemMessageContent) {
	o.System.Set(&v)
}

// SetSystemNil sets the value for System to be an explicit nil
func (o *MessageRequest) SetSystemNil() {
	o.System.Set(nil)
}

// UnsetSystem ensures that no value is present for System, not even an explicit nil
func (o *MessageRequest) UnsetSystem() {
	o.System.Unset()
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *MessageRequest) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *MessageRequest) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}

// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *MessageRequest) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *MessageRequest) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetToolChoice() MessageToolChoice {
	if o == nil || IsNil(o.ToolChoice.Get()) {
		var ret MessageToolChoice
		return ret
	}
	return *o.ToolChoice.Get()
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetToolChoiceOk() (*MessageToolChoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolChoice.Get(), o.ToolChoice.IsSet()
}

// HasToolChoice returns a boolean if a field has been set.
func (o *MessageRequest) HasToolChoice() bool {
	if o != nil && o.ToolChoice.IsSet() {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given NullableMessageToolChoice and assigns it to the ToolChoice field.
func (o *MessageRequest) SetToolChoice(v MessageToolChoice) {
	o.ToolChoice.Set(&v)
}

// SetToolChoiceNil sets the value for ToolChoice to be an explicit nil
func (o *MessageRequest) SetToolChoiceNil() {
	o.ToolChoice.Set(nil)
}

// UnsetToolChoice ensures that no value is present for ToolChoice, not even an explicit nil
func (o *MessageRequest) UnsetToolChoice() {
	o.ToolChoice.Unset()
}

// GetTools returns the Tools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetTools() []MessageTools {
	if o == nil {
		var ret []MessageTools
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetToolsOk() ([]MessageTools, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *MessageRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []MessageTools and assigns it to the Tools field.
func (o *MessageRequest) SetTools(v []MessageTools) {
	o.Tools = v
}

// GetTopK returns the TopK field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetTopK() int32 {
	if o == nil || IsNil(o.TopK.Get()) {
		var ret int32
		return ret
	}
	return *o.TopK.Get()
}

// GetTopKOk returns a tuple with the TopK field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetTopKOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopK.Get(), o.TopK.IsSet()
}

// HasTopK returns a boolean if a field has been set.
func (o *MessageRequest) HasTopK() bool {
	if o != nil && o.TopK.IsSet() {
		return true
	}

	return false
}

// SetTopK gets a reference to the given NullableInt32 and assigns it to the TopK field.
func (o *MessageRequest) SetTopK(v int32) {
	o.TopK.Set(&v)
}

// SetTopKNil sets the value for TopK to be an explicit nil
func (o *MessageRequest) SetTopKNil() {
	o.TopK.Set(nil)
}

// UnsetTopK ensures that no value is present for TopK, not even an explicit nil
func (o *MessageRequest) UnsetTopK() {
	o.TopK.Unset()
}

// GetTopP returns the TopP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP.Get()) {
		var ret float32
		return ret
	}
	return *o.TopP.Get()
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRequest) GetTopPOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopP.Get(), o.TopP.IsSet()
}

// HasTopP returns a boolean if a field has been set.
func (o *MessageRequest) HasTopP() bool {
	if o != nil && o.TopP.IsSet() {
		return true
	}

	return false
}

// SetTopP gets a reference to the given NullableFloat32 and assigns it to the TopP field.
func (o *MessageRequest) SetTopP(v float32) {
	o.TopP.Set(&v)
}

// SetTopPNil sets the value for TopP to be an explicit nil
func (o *MessageRequest) SetTopPNil() {
	o.TopP.Set(nil)
}

// UnsetTopP ensures that no value is present for TopP, not even an explicit nil
func (o *MessageRequest) UnsetTopP() {
	o.TopP.Unset()
}

func (o MessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxTokens) {
		toSerialize["max_tokens"] = o.MaxTokens
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if o.Metadata.IsSet() {
		toSerialize["metadata"] = o.Metadata.Get()
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if o.StopSequences != nil {
		toSerialize["stop_sequences"] = o.StopSequences
	}
	if o.Stream.IsSet() {
		toSerialize["stream"] = o.Stream.Get()
	}
	if o.System.IsSet() {
		toSerialize["system"] = o.System.Get()
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.ToolChoice.IsSet() {
		toSerialize["tool_choice"] = o.ToolChoice.Get()
	}
	if o.Tools != nil {
		toSerialize["tools"] = o.Tools
	}
	if o.TopK.IsSet() {
		toSerialize["top_k"] = o.TopK.Get()
	}
	if o.TopP.IsSet() {
		toSerialize["top_p"] = o.TopP.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageRequest) UnmarshalJSON(data []byte) (err error) {
	varMessageRequest := _MessageRequest{}

	err = json.Unmarshal(data, &varMessageRequest)

	if err != nil {
		return err
	}

	*o = MessageRequest(varMessageRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "max_tokens")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "model")
		delete(additionalProperties, "stop_sequences")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "system")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "tool_choice")
		delete(additionalProperties, "tools")
		delete(additionalProperties, "top_k")
		delete(additionalProperties, "top_p")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageRequest struct {
	value *MessageRequest
	isSet bool
}

func (v NullableMessageRequest) Get() *MessageRequest {
	return v.value
}

func (v *NullableMessageRequest) Set(val *MessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageRequest(val *MessageRequest) *NullableMessageRequest {
	return &NullableMessageRequest{value: val, isSet: true}
}

func (v NullableMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
