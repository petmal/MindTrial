/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the SampleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SampleResponse{}

// SampleResponse (Legacy) Response for `/v1/completions` endpoint
type SampleResponse struct {
	// A list of response choices from the model. The length corresponds to the `n` in request body (default to 1).
	Choices []SampleChoice `json:"choices"`
	// The chat completion creation time in Unix timestamp.
	Created int64 `json:"created"`
	// ID of the request.
	Id string `json:"id"`
	// Model to be used.
	Model string `json:"model"`
	// Object type of the response. This is always `\"text_completion\"`.
	Object string `json:"object"`
	// System fingerprint, used to indicate xAI system configuration changes.
	SystemFingerprint NullableString `json:"system_fingerprint,omitempty"`
	// Token usage information.
	Usage                NullableUsage `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SampleResponse SampleResponse

// NewSampleResponse instantiates a new SampleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampleResponse(choices []SampleChoice, created int64, id string, model string, object string) *SampleResponse {
	this := SampleResponse{}
	this.Choices = choices
	this.Created = created
	this.Id = id
	this.Model = model
	this.Object = object
	return &this
}

// NewSampleResponseWithDefaults instantiates a new SampleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampleResponseWithDefaults() *SampleResponse {
	this := SampleResponse{}
	return &this
}

// GetChoices returns the Choices field value
func (o *SampleResponse) GetChoices() []SampleChoice {
	if o == nil {
		var ret []SampleChoice
		return ret
	}

	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value
// and a boolean to check if the value has been set.
func (o *SampleResponse) GetChoicesOk() ([]SampleChoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.Choices, true
}

// SetChoices sets field value
func (o *SampleResponse) SetChoices(v []SampleChoice) {
	o.Choices = v
}

// GetCreated returns the Created field value
func (o *SampleResponse) GetCreated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *SampleResponse) GetCreatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *SampleResponse) SetCreated(v int64) {
	o.Created = v
}

// GetId returns the Id field value
func (o *SampleResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SampleResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SampleResponse) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *SampleResponse) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *SampleResponse) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *SampleResponse) SetModel(v string) {
	o.Model = v
}

// GetObject returns the Object field value
func (o *SampleResponse) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *SampleResponse) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *SampleResponse) SetObject(v string) {
	o.Object = v
}

// GetSystemFingerprint returns the SystemFingerprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleResponse) GetSystemFingerprint() string {
	if o == nil || IsNil(o.SystemFingerprint.Get()) {
		var ret string
		return ret
	}
	return *o.SystemFingerprint.Get()
}

// GetSystemFingerprintOk returns a tuple with the SystemFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleResponse) GetSystemFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemFingerprint.Get(), o.SystemFingerprint.IsSet()
}

// HasSystemFingerprint returns a boolean if a field has been set.
func (o *SampleResponse) HasSystemFingerprint() bool {
	if o != nil && o.SystemFingerprint.IsSet() {
		return true
	}

	return false
}

// SetSystemFingerprint gets a reference to the given NullableString and assigns it to the SystemFingerprint field.
func (o *SampleResponse) SetSystemFingerprint(v string) {
	o.SystemFingerprint.Set(&v)
}

// SetSystemFingerprintNil sets the value for SystemFingerprint to be an explicit nil
func (o *SampleResponse) SetSystemFingerprintNil() {
	o.SystemFingerprint.Set(nil)
}

// UnsetSystemFingerprint ensures that no value is present for SystemFingerprint, not even an explicit nil
func (o *SampleResponse) UnsetSystemFingerprint() {
	o.SystemFingerprint.Unset()
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleResponse) GetUsage() Usage {
	if o == nil || IsNil(o.Usage.Get()) {
		var ret Usage
		return ret
	}
	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleResponse) GetUsageOk() (*Usage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// HasUsage returns a boolean if a field has been set.
func (o *SampleResponse) HasUsage() bool {
	if o != nil && o.Usage.IsSet() {
		return true
	}

	return false
}

// SetUsage gets a reference to the given NullableUsage and assigns it to the Usage field.
func (o *SampleResponse) SetUsage(v Usage) {
	o.Usage.Set(&v)
}

// SetUsageNil sets the value for Usage to be an explicit nil
func (o *SampleResponse) SetUsageNil() {
	o.Usage.Set(nil)
}

// UnsetUsage ensures that no value is present for Usage, not even an explicit nil
func (o *SampleResponse) UnsetUsage() {
	o.Usage.Unset()
}

func (o SampleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SampleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choices"] = o.Choices
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	toSerialize["object"] = o.Object
	if o.SystemFingerprint.IsSet() {
		toSerialize["system_fingerprint"] = o.SystemFingerprint.Get()
	}
	if o.Usage.IsSet() {
		toSerialize["usage"] = o.Usage.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SampleResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"choices",
		"created",
		"id",
		"model",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSampleResponse := _SampleResponse{}

	err = json.Unmarshal(data, &varSampleResponse)

	if err != nil {
		return err
	}

	*o = SampleResponse(varSampleResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "choices")
		delete(additionalProperties, "created")
		delete(additionalProperties, "id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "object")
		delete(additionalProperties, "system_fingerprint")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSampleResponse struct {
	value *SampleResponse
	isSet bool
}

func (v NullableSampleResponse) Get() *SampleResponse {
	return v.value
}

func (v *NullableSampleResponse) Set(val *SampleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleResponse(val *SampleResponse) *NullableSampleResponse {
	return &NullableSampleResponse{value: val, isSet: true}
}

func (v NullableSampleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
