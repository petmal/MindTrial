/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbeddingInputOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingInputOneOf2{}

// EmbeddingInputOneOf2 A token in integer to be embedded
type EmbeddingInputOneOf2 struct {
	// A token in integer to be embedded
	Ints                 []int32 `json:"Ints"`
	AdditionalProperties map[string]interface{}
}

type _EmbeddingInputOneOf2 EmbeddingInputOneOf2

// NewEmbeddingInputOneOf2 instantiates a new EmbeddingInputOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingInputOneOf2(ints []int32) *EmbeddingInputOneOf2 {
	this := EmbeddingInputOneOf2{}
	this.Ints = ints
	return &this
}

// NewEmbeddingInputOneOf2WithDefaults instantiates a new EmbeddingInputOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingInputOneOf2WithDefaults() *EmbeddingInputOneOf2 {
	this := EmbeddingInputOneOf2{}
	return &this
}

// GetInts returns the Ints field value
func (o *EmbeddingInputOneOf2) GetInts() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Ints
}

// GetIntsOk returns a tuple with the Ints field value
// and a boolean to check if the value has been set.
func (o *EmbeddingInputOneOf2) GetIntsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ints, true
}

// SetInts sets field value
func (o *EmbeddingInputOneOf2) SetInts(v []int32) {
	o.Ints = v
}

func (o EmbeddingInputOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingInputOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Ints"] = o.Ints

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbeddingInputOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Ints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingInputOneOf2 := _EmbeddingInputOneOf2{}

	err = json.Unmarshal(data, &varEmbeddingInputOneOf2)

	if err != nil {
		return err
	}

	*o = EmbeddingInputOneOf2(varEmbeddingInputOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Ints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbeddingInputOneOf2 struct {
	value *EmbeddingInputOneOf2
	isSet bool
}

func (v NullableEmbeddingInputOneOf2) Get() *EmbeddingInputOneOf2 {
	return v.value
}

func (v *NullableEmbeddingInputOneOf2) Set(val *EmbeddingInputOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingInputOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingInputOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingInputOneOf2(val *EmbeddingInputOneOf2) *NullableEmbeddingInputOneOf2 {
	return &NullableEmbeddingInputOneOf2{value: val, isSet: true}
}

func (v NullableEmbeddingInputOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingInputOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
