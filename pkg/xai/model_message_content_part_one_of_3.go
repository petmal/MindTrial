/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageContentPartOneOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageContentPartOneOf3{}

// MessageContentPartOneOf3 Tool call result.
type MessageContentPartOneOf3 struct {
	CacheControl interface{} `json:"cache_control,omitempty"`
	// Result content of the tool call.
	Content string `json:"content"`
	// Whether the tool call returns an error.
	IsError NullableBool `json:"is_error,omitempty"`
	// ID of the tool call given by the model.
	ToolUseId            string `json:"tool_use_id"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageContentPartOneOf3 MessageContentPartOneOf3

// NewMessageContentPartOneOf3 instantiates a new MessageContentPartOneOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageContentPartOneOf3(content string, toolUseId string, type_ string) *MessageContentPartOneOf3 {
	this := MessageContentPartOneOf3{}
	this.Content = content
	this.ToolUseId = toolUseId
	this.Type = type_
	return &this
}

// NewMessageContentPartOneOf3WithDefaults instantiates a new MessageContentPartOneOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageContentPartOneOf3WithDefaults() *MessageContentPartOneOf3 {
	this := MessageContentPartOneOf3{}
	return &this
}

// GetCacheControl returns the CacheControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageContentPartOneOf3) GetCacheControl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CacheControl
}

// GetCacheControlOk returns a tuple with the CacheControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageContentPartOneOf3) GetCacheControlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CacheControl) {
		return nil, false
	}
	return &o.CacheControl, true
}

// HasCacheControl returns a boolean if a field has been set.
func (o *MessageContentPartOneOf3) HasCacheControl() bool {
	if o != nil && !IsNil(o.CacheControl) {
		return true
	}

	return false
}

// SetCacheControl gets a reference to the given interface{} and assigns it to the CacheControl field.
func (o *MessageContentPartOneOf3) SetCacheControl(v interface{}) {
	o.CacheControl = v
}

// GetContent returns the Content field value
func (o *MessageContentPartOneOf3) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf3) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *MessageContentPartOneOf3) SetContent(v string) {
	o.Content = v
}

// GetIsError returns the IsError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageContentPartOneOf3) GetIsError() bool {
	if o == nil || IsNil(o.IsError.Get()) {
		var ret bool
		return ret
	}
	return *o.IsError.Get()
}

// GetIsErrorOk returns a tuple with the IsError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageContentPartOneOf3) GetIsErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsError.Get(), o.IsError.IsSet()
}

// HasIsError returns a boolean if a field has been set.
func (o *MessageContentPartOneOf3) HasIsError() bool {
	if o != nil && o.IsError.IsSet() {
		return true
	}

	return false
}

// SetIsError gets a reference to the given NullableBool and assigns it to the IsError field.
func (o *MessageContentPartOneOf3) SetIsError(v bool) {
	o.IsError.Set(&v)
}

// SetIsErrorNil sets the value for IsError to be an explicit nil
func (o *MessageContentPartOneOf3) SetIsErrorNil() {
	o.IsError.Set(nil)
}

// UnsetIsError ensures that no value is present for IsError, not even an explicit nil
func (o *MessageContentPartOneOf3) UnsetIsError() {
	o.IsError.Unset()
}

// GetToolUseId returns the ToolUseId field value
func (o *MessageContentPartOneOf3) GetToolUseId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolUseId
}

// GetToolUseIdOk returns a tuple with the ToolUseId field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf3) GetToolUseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolUseId, true
}

// SetToolUseId sets field value
func (o *MessageContentPartOneOf3) SetToolUseId(v string) {
	o.ToolUseId = v
}

// GetType returns the Type field value
func (o *MessageContentPartOneOf3) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf3) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageContentPartOneOf3) SetType(v string) {
	o.Type = v
}

func (o MessageContentPartOneOf3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageContentPartOneOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CacheControl != nil {
		toSerialize["cache_control"] = o.CacheControl
	}
	toSerialize["content"] = o.Content
	if o.IsError.IsSet() {
		toSerialize["is_error"] = o.IsError.Get()
	}
	toSerialize["tool_use_id"] = o.ToolUseId
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageContentPartOneOf3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"tool_use_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageContentPartOneOf3 := _MessageContentPartOneOf3{}

	err = json.Unmarshal(data, &varMessageContentPartOneOf3)

	if err != nil {
		return err
	}

	*o = MessageContentPartOneOf3(varMessageContentPartOneOf3)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cache_control")
		delete(additionalProperties, "content")
		delete(additionalProperties, "is_error")
		delete(additionalProperties, "tool_use_id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageContentPartOneOf3 struct {
	value *MessageContentPartOneOf3
	isSet bool
}

func (v NullableMessageContentPartOneOf3) Get() *MessageContentPartOneOf3 {
	return v.value
}

func (v *NullableMessageContentPartOneOf3) Set(val *MessageContentPartOneOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentPartOneOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentPartOneOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentPartOneOf3(val *MessageContentPartOneOf3) *NullableMessageContentPartOneOf3 {
	return &NullableMessageContentPartOneOf3{value: val, isSet: true}
}

func (v NullableMessageContentPartOneOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentPartOneOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
