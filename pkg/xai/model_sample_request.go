/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the SampleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SampleRequest{}

// SampleRequest (Legacy) Request for `/v1/completions` endpoint
type SampleRequest struct {
	// (Unsupported) Generates multiple completions internally and returns the top-scoring one. Not functional yet.
	BestOf NullableInt32 `json:"best_of,omitempty"`
	// Option to include the original prompt in the response along with the generated completion.
	Echo NullableBool `json:"echo,omitempty"`
	// (Unsupported) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty NullableFloat32 `json:"frequency_penalty,omitempty"`
	// (Unsupported) Accepts a JSON object that maps tokens to an associated bias value from -100 to 100. You can use this tokenizer tool to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias map[string]float32 `json:"logit_bias,omitempty"`
	// Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to `logprobs+1` elements in the response.
	Logprobs NullableBool `json:"logprobs,omitempty"`
	// Limits the number of tokens that can be produced in the output. Ensure the sum of prompt tokens and `max_tokens` does not exceed the model's context limit.
	MaxTokens NullableInt32 `json:"max_tokens,omitempty"`
	// Specifies the model to be used for the request.
	Model *string `json:"model,omitempty"`
	// Determines how many completion sequences to produce for each prompt. Be cautious with its use due to high token consumption; adjust `max_tokens` and stop sequences accordingly.
	N NullableInt32 `json:"n,omitempty"`
	// (Not supported by `grok-3` and reasoning models) Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	PresencePenalty NullableFloat32 `json:"presence_penalty,omitempty"`
	// Input for generating completions, which can be a string, list of strings, token list, or list of token lists. `<|endoftext|>` is used as a document separator, implying a new context start if omitted.
	Prompt *SampleContent `json:"prompt,omitempty"`
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
	Seed NullableInt32 `json:"seed,omitempty"`
	// (Not supported by reasoning models) Up to 4 sequences where the API will stop generating further tokens.
	Stop []string `json:"stop,omitempty"`
	// Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.
	Stream NullableBool `json:"stream,omitempty"`
	// Options for streaming response. Only set this when you set `stream: true`.
	StreamOptions NullableStreamOptions `json:"stream_options,omitempty"`
	// (Unsupported) Optional string to append after the generated text.
	Suffix NullableString `json:"suffix,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
	TopP NullableFloat32 `json:"top_p,omitempty"`
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	User                 NullableString `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SampleRequest SampleRequest

// NewSampleRequest instantiates a new SampleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampleRequest() *SampleRequest {
	this := SampleRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	return &this
}

// NewSampleRequestWithDefaults instantiates a new SampleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampleRequestWithDefaults() *SampleRequest {
	this := SampleRequest{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	return &this
}

// GetBestOf returns the BestOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetBestOf() int32 {
	if o == nil || IsNil(o.BestOf.Get()) {
		var ret int32
		return ret
	}
	return *o.BestOf.Get()
}

// GetBestOfOk returns a tuple with the BestOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetBestOfOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BestOf.Get(), o.BestOf.IsSet()
}

// HasBestOf returns a boolean if a field has been set.
func (o *SampleRequest) HasBestOf() bool {
	if o != nil && o.BestOf.IsSet() {
		return true
	}

	return false
}

// SetBestOf gets a reference to the given NullableInt32 and assigns it to the BestOf field.
func (o *SampleRequest) SetBestOf(v int32) {
	o.BestOf.Set(&v)
}

// SetBestOfNil sets the value for BestOf to be an explicit nil
func (o *SampleRequest) SetBestOfNil() {
	o.BestOf.Set(nil)
}

// UnsetBestOf ensures that no value is present for BestOf, not even an explicit nil
func (o *SampleRequest) UnsetBestOf() {
	o.BestOf.Unset()
}

// GetEcho returns the Echo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetEcho() bool {
	if o == nil || IsNil(o.Echo.Get()) {
		var ret bool
		return ret
	}
	return *o.Echo.Get()
}

// GetEchoOk returns a tuple with the Echo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetEchoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Echo.Get(), o.Echo.IsSet()
}

// HasEcho returns a boolean if a field has been set.
func (o *SampleRequest) HasEcho() bool {
	if o != nil && o.Echo.IsSet() {
		return true
	}

	return false
}

// SetEcho gets a reference to the given NullableBool and assigns it to the Echo field.
func (o *SampleRequest) SetEcho(v bool) {
	o.Echo.Set(&v)
}

// SetEchoNil sets the value for Echo to be an explicit nil
func (o *SampleRequest) SetEchoNil() {
	o.Echo.Set(nil)
}

// UnsetEcho ensures that no value is present for Echo, not even an explicit nil
func (o *SampleRequest) UnsetEcho() {
	o.Echo.Unset()
}

// GetFrequencyPenalty returns the FrequencyPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetFrequencyPenalty() float32 {
	if o == nil || IsNil(o.FrequencyPenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.FrequencyPenalty.Get()
}

// GetFrequencyPenaltyOk returns a tuple with the FrequencyPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetFrequencyPenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrequencyPenalty.Get(), o.FrequencyPenalty.IsSet()
}

// HasFrequencyPenalty returns a boolean if a field has been set.
func (o *SampleRequest) HasFrequencyPenalty() bool {
	if o != nil && o.FrequencyPenalty.IsSet() {
		return true
	}

	return false
}

// SetFrequencyPenalty gets a reference to the given NullableFloat32 and assigns it to the FrequencyPenalty field.
func (o *SampleRequest) SetFrequencyPenalty(v float32) {
	o.FrequencyPenalty.Set(&v)
}

// SetFrequencyPenaltyNil sets the value for FrequencyPenalty to be an explicit nil
func (o *SampleRequest) SetFrequencyPenaltyNil() {
	o.FrequencyPenalty.Set(nil)
}

// UnsetFrequencyPenalty ensures that no value is present for FrequencyPenalty, not even an explicit nil
func (o *SampleRequest) UnsetFrequencyPenalty() {
	o.FrequencyPenalty.Unset()
}

// GetLogitBias returns the LogitBias field value if set, zero value otherwise.
func (o *SampleRequest) GetLogitBias() map[string]float32 {
	if o == nil || IsNil(o.LogitBias) {
		var ret map[string]float32
		return ret
	}
	return o.LogitBias
}

// GetLogitBiasOk returns a tuple with the LogitBias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampleRequest) GetLogitBiasOk() (map[string]float32, bool) {
	if o == nil || IsNil(o.LogitBias) {
		return map[string]float32{}, false
	}
	return o.LogitBias, true
}

// HasLogitBias returns a boolean if a field has been set.
func (o *SampleRequest) HasLogitBias() bool {
	if o != nil && !IsNil(o.LogitBias) {
		return true
	}

	return false
}

// SetLogitBias gets a reference to the given map[string]float32 and assigns it to the LogitBias field.
func (o *SampleRequest) SetLogitBias(v map[string]float32) {
	o.LogitBias = v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetLogprobs() bool {
	if o == nil || IsNil(o.Logprobs.Get()) {
		var ret bool
		return ret
	}
	return *o.Logprobs.Get()
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetLogprobsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logprobs.Get(), o.Logprobs.IsSet()
}

// HasLogprobs returns a boolean if a field has been set.
func (o *SampleRequest) HasLogprobs() bool {
	if o != nil && o.Logprobs.IsSet() {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given NullableBool and assigns it to the Logprobs field.
func (o *SampleRequest) SetLogprobs(v bool) {
	o.Logprobs.Set(&v)
}

// SetLogprobsNil sets the value for Logprobs to be an explicit nil
func (o *SampleRequest) SetLogprobsNil() {
	o.Logprobs.Set(nil)
}

// UnsetLogprobs ensures that no value is present for Logprobs, not even an explicit nil
func (o *SampleRequest) UnsetLogprobs() {
	o.Logprobs.Unset()
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxTokens.Get()
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetMaxTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxTokens.Get(), o.MaxTokens.IsSet()
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *SampleRequest) HasMaxTokens() bool {
	if o != nil && o.MaxTokens.IsSet() {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given NullableInt32 and assigns it to the MaxTokens field.
func (o *SampleRequest) SetMaxTokens(v int32) {
	o.MaxTokens.Set(&v)
}

// SetMaxTokensNil sets the value for MaxTokens to be an explicit nil
func (o *SampleRequest) SetMaxTokensNil() {
	o.MaxTokens.Set(nil)
}

// UnsetMaxTokens ensures that no value is present for MaxTokens, not even an explicit nil
func (o *SampleRequest) UnsetMaxTokens() {
	o.MaxTokens.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *SampleRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampleRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *SampleRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *SampleRequest) SetModel(v string) {
	o.Model = &v
}

// GetN returns the N field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetN() int32 {
	if o == nil || IsNil(o.N.Get()) {
		var ret int32
		return ret
	}
	return *o.N.Get()
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetNOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.N.Get(), o.N.IsSet()
}

// HasN returns a boolean if a field has been set.
func (o *SampleRequest) HasN() bool {
	if o != nil && o.N.IsSet() {
		return true
	}

	return false
}

// SetN gets a reference to the given NullableInt32 and assigns it to the N field.
func (o *SampleRequest) SetN(v int32) {
	o.N.Set(&v)
}

// SetNNil sets the value for N to be an explicit nil
func (o *SampleRequest) SetNNil() {
	o.N.Set(nil)
}

// UnsetN ensures that no value is present for N, not even an explicit nil
func (o *SampleRequest) UnsetN() {
	o.N.Unset()
}

// GetPresencePenalty returns the PresencePenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetPresencePenalty() float32 {
	if o == nil || IsNil(o.PresencePenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.PresencePenalty.Get()
}

// GetPresencePenaltyOk returns a tuple with the PresencePenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetPresencePenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PresencePenalty.Get(), o.PresencePenalty.IsSet()
}

// HasPresencePenalty returns a boolean if a field has been set.
func (o *SampleRequest) HasPresencePenalty() bool {
	if o != nil && o.PresencePenalty.IsSet() {
		return true
	}

	return false
}

// SetPresencePenalty gets a reference to the given NullableFloat32 and assigns it to the PresencePenalty field.
func (o *SampleRequest) SetPresencePenalty(v float32) {
	o.PresencePenalty.Set(&v)
}

// SetPresencePenaltyNil sets the value for PresencePenalty to be an explicit nil
func (o *SampleRequest) SetPresencePenaltyNil() {
	o.PresencePenalty.Set(nil)
}

// UnsetPresencePenalty ensures that no value is present for PresencePenalty, not even an explicit nil
func (o *SampleRequest) UnsetPresencePenalty() {
	o.PresencePenalty.Unset()
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *SampleRequest) GetPrompt() SampleContent {
	if o == nil || IsNil(o.Prompt) {
		var ret SampleContent
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SampleRequest) GetPromptOk() (*SampleContent, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *SampleRequest) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given SampleContent and assigns it to the Prompt field.
func (o *SampleRequest) SetPrompt(v SampleContent) {
	o.Prompt = &v
}

// GetSeed returns the Seed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetSeed() int32 {
	if o == nil || IsNil(o.Seed.Get()) {
		var ret int32
		return ret
	}
	return *o.Seed.Get()
}

// GetSeedOk returns a tuple with the Seed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetSeedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seed.Get(), o.Seed.IsSet()
}

// HasSeed returns a boolean if a field has been set.
func (o *SampleRequest) HasSeed() bool {
	if o != nil && o.Seed.IsSet() {
		return true
	}

	return false
}

// SetSeed gets a reference to the given NullableInt32 and assigns it to the Seed field.
func (o *SampleRequest) SetSeed(v int32) {
	o.Seed.Set(&v)
}

// SetSeedNil sets the value for Seed to be an explicit nil
func (o *SampleRequest) SetSeedNil() {
	o.Seed.Set(nil)
}

// UnsetSeed ensures that no value is present for Seed, not even an explicit nil
func (o *SampleRequest) UnsetSeed() {
	o.Seed.Unset()
}

// GetStop returns the Stop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetStop() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetStopOk() ([]string, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *SampleRequest) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given []string and assigns it to the Stop field.
func (o *SampleRequest) SetStop(v []string) {
	o.Stop = v
}

// GetStream returns the Stream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream.Get()) {
		var ret bool
		return ret
	}
	return *o.Stream.Get()
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stream.Get(), o.Stream.IsSet()
}

// HasStream returns a boolean if a field has been set.
func (o *SampleRequest) HasStream() bool {
	if o != nil && o.Stream.IsSet() {
		return true
	}

	return false
}

// SetStream gets a reference to the given NullableBool and assigns it to the Stream field.
func (o *SampleRequest) SetStream(v bool) {
	o.Stream.Set(&v)
}

// SetStreamNil sets the value for Stream to be an explicit nil
func (o *SampleRequest) SetStreamNil() {
	o.Stream.Set(nil)
}

// UnsetStream ensures that no value is present for Stream, not even an explicit nil
func (o *SampleRequest) UnsetStream() {
	o.Stream.Unset()
}

// GetStreamOptions returns the StreamOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetStreamOptions() StreamOptions {
	if o == nil || IsNil(o.StreamOptions.Get()) {
		var ret StreamOptions
		return ret
	}
	return *o.StreamOptions.Get()
}

// GetStreamOptionsOk returns a tuple with the StreamOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetStreamOptionsOk() (*StreamOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamOptions.Get(), o.StreamOptions.IsSet()
}

// HasStreamOptions returns a boolean if a field has been set.
func (o *SampleRequest) HasStreamOptions() bool {
	if o != nil && o.StreamOptions.IsSet() {
		return true
	}

	return false
}

// SetStreamOptions gets a reference to the given NullableStreamOptions and assigns it to the StreamOptions field.
func (o *SampleRequest) SetStreamOptions(v StreamOptions) {
	o.StreamOptions.Set(&v)
}

// SetStreamOptionsNil sets the value for StreamOptions to be an explicit nil
func (o *SampleRequest) SetStreamOptionsNil() {
	o.StreamOptions.Set(nil)
}

// UnsetStreamOptions ensures that no value is present for StreamOptions, not even an explicit nil
func (o *SampleRequest) UnsetStreamOptions() {
	o.StreamOptions.Unset()
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetSuffix() string {
	if o == nil || IsNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *SampleRequest) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *SampleRequest) SetSuffix(v string) {
	o.Suffix.Set(&v)
}

// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *SampleRequest) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *SampleRequest) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *SampleRequest) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *SampleRequest) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}

// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *SampleRequest) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *SampleRequest) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetTopP returns the TopP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP.Get()) {
		var ret float32
		return ret
	}
	return *o.TopP.Get()
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetTopPOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopP.Get(), o.TopP.IsSet()
}

// HasTopP returns a boolean if a field has been set.
func (o *SampleRequest) HasTopP() bool {
	if o != nil && o.TopP.IsSet() {
		return true
	}

	return false
}

// SetTopP gets a reference to the given NullableFloat32 and assigns it to the TopP field.
func (o *SampleRequest) SetTopP(v float32) {
	o.TopP.Set(&v)
}

// SetTopPNil sets the value for TopP to be an explicit nil
func (o *SampleRequest) SetTopPNil() {
	o.TopP.Set(nil)
}

// UnsetTopP ensures that no value is present for TopP, not even an explicit nil
func (o *SampleRequest) UnsetTopP() {
	o.TopP.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SampleRequest) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SampleRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *SampleRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *SampleRequest) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *SampleRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *SampleRequest) UnsetUser() {
	o.User.Unset()
}

func (o SampleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SampleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BestOf.IsSet() {
		toSerialize["best_of"] = o.BestOf.Get()
	}
	if o.Echo.IsSet() {
		toSerialize["echo"] = o.Echo.Get()
	}
	if o.FrequencyPenalty.IsSet() {
		toSerialize["frequency_penalty"] = o.FrequencyPenalty.Get()
	}
	if !IsNil(o.LogitBias) {
		toSerialize["logit_bias"] = o.LogitBias
	}
	if o.Logprobs.IsSet() {
		toSerialize["logprobs"] = o.Logprobs.Get()
	}
	if o.MaxTokens.IsSet() {
		toSerialize["max_tokens"] = o.MaxTokens.Get()
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if o.N.IsSet() {
		toSerialize["n"] = o.N.Get()
	}
	if o.PresencePenalty.IsSet() {
		toSerialize["presence_penalty"] = o.PresencePenalty.Get()
	}
	if !IsNil(o.Prompt) {
		toSerialize["prompt"] = o.Prompt
	}
	if o.Seed.IsSet() {
		toSerialize["seed"] = o.Seed.Get()
	}
	if o.Stop != nil {
		toSerialize["stop"] = o.Stop
	}
	if o.Stream.IsSet() {
		toSerialize["stream"] = o.Stream.Get()
	}
	if o.StreamOptions.IsSet() {
		toSerialize["stream_options"] = o.StreamOptions.Get()
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.TopP.IsSet() {
		toSerialize["top_p"] = o.TopP.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SampleRequest) UnmarshalJSON(data []byte) (err error) {
	varSampleRequest := _SampleRequest{}

	err = json.Unmarshal(data, &varSampleRequest)

	if err != nil {
		return err
	}

	*o = SampleRequest(varSampleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "best_of")
		delete(additionalProperties, "echo")
		delete(additionalProperties, "frequency_penalty")
		delete(additionalProperties, "logit_bias")
		delete(additionalProperties, "logprobs")
		delete(additionalProperties, "max_tokens")
		delete(additionalProperties, "model")
		delete(additionalProperties, "n")
		delete(additionalProperties, "presence_penalty")
		delete(additionalProperties, "prompt")
		delete(additionalProperties, "seed")
		delete(additionalProperties, "stop")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "stream_options")
		delete(additionalProperties, "suffix")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "top_p")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSampleRequest struct {
	value *SampleRequest
	isSet bool
}

func (v NullableSampleRequest) Get() *SampleRequest {
	return v.value
}

func (v *NullableSampleRequest) Set(val *SampleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleRequest(val *SampleRequest) *NullableSampleRequest {
	return &NullableSampleRequest{value: val, isSet: true}
}

func (v NullableSampleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
