/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolChoiceOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolChoiceOneOf{}

// ToolChoiceOneOf struct for ToolChoiceOneOf
type ToolChoiceOneOf struct {
	// Name of the function to use.
	Function NullableFunctionChoice `json:"function,omitempty"`
	// Type is always `\"function\"`.
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ToolChoiceOneOf ToolChoiceOneOf

// NewToolChoiceOneOf instantiates a new ToolChoiceOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolChoiceOneOf(type_ string) *ToolChoiceOneOf {
	this := ToolChoiceOneOf{}
	this.Type = type_
	return &this
}

// NewToolChoiceOneOfWithDefaults instantiates a new ToolChoiceOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolChoiceOneOfWithDefaults() *ToolChoiceOneOf {
	this := ToolChoiceOneOf{}
	return &this
}

// GetFunction returns the Function field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolChoiceOneOf) GetFunction() FunctionChoice {
	if o == nil || IsNil(o.Function.Get()) {
		var ret FunctionChoice
		return ret
	}
	return *o.Function.Get()
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolChoiceOneOf) GetFunctionOk() (*FunctionChoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.Function.Get(), o.Function.IsSet()
}

// HasFunction returns a boolean if a field has been set.
func (o *ToolChoiceOneOf) HasFunction() bool {
	if o != nil && o.Function.IsSet() {
		return true
	}

	return false
}

// SetFunction gets a reference to the given NullableFunctionChoice and assigns it to the Function field.
func (o *ToolChoiceOneOf) SetFunction(v FunctionChoice) {
	o.Function.Set(&v)
}

// SetFunctionNil sets the value for Function to be an explicit nil
func (o *ToolChoiceOneOf) SetFunctionNil() {
	o.Function.Set(nil)
}

// UnsetFunction ensures that no value is present for Function, not even an explicit nil
func (o *ToolChoiceOneOf) UnsetFunction() {
	o.Function.Unset()
}

// GetType returns the Type field value
func (o *ToolChoiceOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ToolChoiceOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ToolChoiceOneOf) SetType(v string) {
	o.Type = v
}

func (o ToolChoiceOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolChoiceOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Function.IsSet() {
		toSerialize["function"] = o.Function.Get()
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolChoiceOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolChoiceOneOf := _ToolChoiceOneOf{}

	err = json.Unmarshal(data, &varToolChoiceOneOf)

	if err != nil {
		return err
	}

	*o = ToolChoiceOneOf(varToolChoiceOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "function")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolChoiceOneOf struct {
	value *ToolChoiceOneOf
	isSet bool
}

func (v NullableToolChoiceOneOf) Get() *ToolChoiceOneOf {
	return v.value
}

func (v *NullableToolChoiceOneOf) Set(val *ToolChoiceOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableToolChoiceOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableToolChoiceOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolChoiceOneOf(val *ToolChoiceOneOf) *NullableToolChoiceOneOf {
	return &NullableToolChoiceOneOf{value: val, isSet: true}
}

func (v NullableToolChoiceOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolChoiceOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
