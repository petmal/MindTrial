/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchSourceOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchSourceOneOf{}

// SearchSourceOneOf struct for SearchSourceOneOf
type SearchSourceOneOf struct {
	// List of X handles to exclude from the search results. X posts returned will not include any posts authored by these handles.
	ExcludedXHandles []string `json:"excluded_x_handles,omitempty"`
	//  NOTE: `included_x_handles` and `x_handles` are the same parameter. `included_x_handles` is the new name but we keep both for backward compatibility.  X Handles of the users from whom to consider the posts. Only available if mode is `auto`, `on` or `x`.
	IncludedXHandles []string `json:"included_x_handles,omitempty"`
	// The minimum favorite count of the X posts to consider.
	PostFavoriteCount NullableInt32 `json:"post_favorite_count,omitempty"`
	// The minimum view count of the X posts to consider.
	PostViewCount NullableInt32 `json:"post_view_count,omitempty"`
	Type          string        `json:"type"`
	// DEPRECATED in favor of `included_x_handles`. Use `included_x_handles` instead. X Handles of the users from whom to consider the posts. Only available if mode is `auto`, `on` or `x`.
	XHandles             []string `json:"x_handles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchSourceOneOf SearchSourceOneOf

// NewSearchSourceOneOf instantiates a new SearchSourceOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSourceOneOf(type_ string) *SearchSourceOneOf {
	this := SearchSourceOneOf{}
	this.Type = type_
	return &this
}

// NewSearchSourceOneOfWithDefaults instantiates a new SearchSourceOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSourceOneOfWithDefaults() *SearchSourceOneOf {
	this := SearchSourceOneOf{}
	return &this
}

// GetExcludedXHandles returns the ExcludedXHandles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf) GetExcludedXHandles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedXHandles
}

// GetExcludedXHandlesOk returns a tuple with the ExcludedXHandles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf) GetExcludedXHandlesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedXHandles) {
		return nil, false
	}
	return o.ExcludedXHandles, true
}

// HasExcludedXHandles returns a boolean if a field has been set.
func (o *SearchSourceOneOf) HasExcludedXHandles() bool {
	if o != nil && !IsNil(o.ExcludedXHandles) {
		return true
	}

	return false
}

// SetExcludedXHandles gets a reference to the given []string and assigns it to the ExcludedXHandles field.
func (o *SearchSourceOneOf) SetExcludedXHandles(v []string) {
	o.ExcludedXHandles = v
}

// GetIncludedXHandles returns the IncludedXHandles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf) GetIncludedXHandles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludedXHandles
}

// GetIncludedXHandlesOk returns a tuple with the IncludedXHandles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf) GetIncludedXHandlesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedXHandles) {
		return nil, false
	}
	return o.IncludedXHandles, true
}

// HasIncludedXHandles returns a boolean if a field has been set.
func (o *SearchSourceOneOf) HasIncludedXHandles() bool {
	if o != nil && !IsNil(o.IncludedXHandles) {
		return true
	}

	return false
}

// SetIncludedXHandles gets a reference to the given []string and assigns it to the IncludedXHandles field.
func (o *SearchSourceOneOf) SetIncludedXHandles(v []string) {
	o.IncludedXHandles = v
}

// GetPostFavoriteCount returns the PostFavoriteCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf) GetPostFavoriteCount() int32 {
	if o == nil || IsNil(o.PostFavoriteCount.Get()) {
		var ret int32
		return ret
	}
	return *o.PostFavoriteCount.Get()
}

// GetPostFavoriteCountOk returns a tuple with the PostFavoriteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf) GetPostFavoriteCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostFavoriteCount.Get(), o.PostFavoriteCount.IsSet()
}

// HasPostFavoriteCount returns a boolean if a field has been set.
func (o *SearchSourceOneOf) HasPostFavoriteCount() bool {
	if o != nil && o.PostFavoriteCount.IsSet() {
		return true
	}

	return false
}

// SetPostFavoriteCount gets a reference to the given NullableInt32 and assigns it to the PostFavoriteCount field.
func (o *SearchSourceOneOf) SetPostFavoriteCount(v int32) {
	o.PostFavoriteCount.Set(&v)
}

// SetPostFavoriteCountNil sets the value for PostFavoriteCount to be an explicit nil
func (o *SearchSourceOneOf) SetPostFavoriteCountNil() {
	o.PostFavoriteCount.Set(nil)
}

// UnsetPostFavoriteCount ensures that no value is present for PostFavoriteCount, not even an explicit nil
func (o *SearchSourceOneOf) UnsetPostFavoriteCount() {
	o.PostFavoriteCount.Unset()
}

// GetPostViewCount returns the PostViewCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf) GetPostViewCount() int32 {
	if o == nil || IsNil(o.PostViewCount.Get()) {
		var ret int32
		return ret
	}
	return *o.PostViewCount.Get()
}

// GetPostViewCountOk returns a tuple with the PostViewCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf) GetPostViewCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostViewCount.Get(), o.PostViewCount.IsSet()
}

// HasPostViewCount returns a boolean if a field has been set.
func (o *SearchSourceOneOf) HasPostViewCount() bool {
	if o != nil && o.PostViewCount.IsSet() {
		return true
	}

	return false
}

// SetPostViewCount gets a reference to the given NullableInt32 and assigns it to the PostViewCount field.
func (o *SearchSourceOneOf) SetPostViewCount(v int32) {
	o.PostViewCount.Set(&v)
}

// SetPostViewCountNil sets the value for PostViewCount to be an explicit nil
func (o *SearchSourceOneOf) SetPostViewCountNil() {
	o.PostViewCount.Set(nil)
}

// UnsetPostViewCount ensures that no value is present for PostViewCount, not even an explicit nil
func (o *SearchSourceOneOf) UnsetPostViewCount() {
	o.PostViewCount.Unset()
}

// GetType returns the Type field value
func (o *SearchSourceOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SearchSourceOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SearchSourceOneOf) SetType(v string) {
	o.Type = v
}

// GetXHandles returns the XHandles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSourceOneOf) GetXHandles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.XHandles
}

// GetXHandlesOk returns a tuple with the XHandles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSourceOneOf) GetXHandlesOk() ([]string, bool) {
	if o == nil || IsNil(o.XHandles) {
		return nil, false
	}
	return o.XHandles, true
}

// HasXHandles returns a boolean if a field has been set.
func (o *SearchSourceOneOf) HasXHandles() bool {
	if o != nil && !IsNil(o.XHandles) {
		return true
	}

	return false
}

// SetXHandles gets a reference to the given []string and assigns it to the XHandles field.
func (o *SearchSourceOneOf) SetXHandles(v []string) {
	o.XHandles = v
}

func (o SearchSourceOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchSourceOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludedXHandles != nil {
		toSerialize["excluded_x_handles"] = o.ExcludedXHandles
	}
	if o.IncludedXHandles != nil {
		toSerialize["included_x_handles"] = o.IncludedXHandles
	}
	if o.PostFavoriteCount.IsSet() {
		toSerialize["post_favorite_count"] = o.PostFavoriteCount.Get()
	}
	if o.PostViewCount.IsSet() {
		toSerialize["post_view_count"] = o.PostViewCount.Get()
	}
	toSerialize["type"] = o.Type
	if o.XHandles != nil {
		toSerialize["x_handles"] = o.XHandles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchSourceOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchSourceOneOf := _SearchSourceOneOf{}

	err = json.Unmarshal(data, &varSearchSourceOneOf)

	if err != nil {
		return err
	}

	*o = SearchSourceOneOf(varSearchSourceOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "excluded_x_handles")
		delete(additionalProperties, "included_x_handles")
		delete(additionalProperties, "post_favorite_count")
		delete(additionalProperties, "post_view_count")
		delete(additionalProperties, "type")
		delete(additionalProperties, "x_handles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchSourceOneOf struct {
	value *SearchSourceOneOf
	isSet bool
}

func (v NullableSearchSourceOneOf) Get() *SearchSourceOneOf {
	return v.value
}

func (v *NullableSearchSourceOneOf) Set(val *SearchSourceOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSourceOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSourceOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSourceOneOf(val *SearchSourceOneOf) *NullableSearchSourceOneOf {
	return &NullableSearchSourceOneOf{value: val, isSet: true}
}

func (v NullableSearchSourceOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSourceOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
