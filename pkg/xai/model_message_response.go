/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageResponse{}

// MessageResponse Response message for `/v1/messages`
type MessageResponse struct {
	// Response message content.
	Content []MessageResponseContent `json:"content"`
	// Unique object identifier.
	Id string `json:"id"`
	// Model name that handled the request.
	Model string `json:"model"`
	// Role of the generated message. Always `\"assistant\"`
	Role string `json:"role"`
	// Reason to stop. `\"stop_sequence\"` means the inference has reached a model-defined or user-supplied stop sequence in `stop`. `\"max_tokens\"` means the inference result has reached models' maximum allowed token length or user defined value in `max_tokens`. `\"end_turn\"` or `null` in streaming mode when the chunk is not the last. `\"tool_use\"` means the model has called a tool and is waiting for the tool response.
	StopReason NullableString `json:"stop_reason,omitempty"`
	// Custom stop sequence used to stop the generation.
	StopSequence NullableString `json:"stop_sequence,omitempty"`
	// Object type. This is always `\"message\"` for message types.
	Type string `json:"type"`
	// Token usage information.
	Usage                MessageUsage `json:"usage"`
	AdditionalProperties map[string]interface{}
}

type _MessageResponse MessageResponse

// NewMessageResponse instantiates a new MessageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageResponse(content []MessageResponseContent, id string, model string, role string, type_ string, usage MessageUsage) *MessageResponse {
	this := MessageResponse{}
	this.Content = content
	this.Id = id
	this.Model = model
	this.Role = role
	this.Type = type_
	this.Usage = usage
	return &this
}

// NewMessageResponseWithDefaults instantiates a new MessageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageResponseWithDefaults() *MessageResponse {
	this := MessageResponse{}
	return &this
}

// GetContent returns the Content field value
func (o *MessageResponse) GetContent() []MessageResponseContent {
	if o == nil {
		var ret []MessageResponseContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *MessageResponse) GetContentOk() ([]MessageResponseContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content, true
}

// SetContent sets field value
func (o *MessageResponse) SetContent(v []MessageResponseContent) {
	o.Content = v
}

// GetId returns the Id field value
func (o *MessageResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MessageResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MessageResponse) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *MessageResponse) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *MessageResponse) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *MessageResponse) SetModel(v string) {
	o.Model = v
}

// GetRole returns the Role field value
func (o *MessageResponse) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *MessageResponse) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *MessageResponse) SetRole(v string) {
	o.Role = v
}

// GetStopReason returns the StopReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageResponse) GetStopReason() string {
	if o == nil || IsNil(o.StopReason.Get()) {
		var ret string
		return ret
	}
	return *o.StopReason.Get()
}

// GetStopReasonOk returns a tuple with the StopReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageResponse) GetStopReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StopReason.Get(), o.StopReason.IsSet()
}

// HasStopReason returns a boolean if a field has been set.
func (o *MessageResponse) HasStopReason() bool {
	if o != nil && o.StopReason.IsSet() {
		return true
	}

	return false
}

// SetStopReason gets a reference to the given NullableString and assigns it to the StopReason field.
func (o *MessageResponse) SetStopReason(v string) {
	o.StopReason.Set(&v)
}

// SetStopReasonNil sets the value for StopReason to be an explicit nil
func (o *MessageResponse) SetStopReasonNil() {
	o.StopReason.Set(nil)
}

// UnsetStopReason ensures that no value is present for StopReason, not even an explicit nil
func (o *MessageResponse) UnsetStopReason() {
	o.StopReason.Unset()
}

// GetStopSequence returns the StopSequence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageResponse) GetStopSequence() string {
	if o == nil || IsNil(o.StopSequence.Get()) {
		var ret string
		return ret
	}
	return *o.StopSequence.Get()
}

// GetStopSequenceOk returns a tuple with the StopSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageResponse) GetStopSequenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StopSequence.Get(), o.StopSequence.IsSet()
}

// HasStopSequence returns a boolean if a field has been set.
func (o *MessageResponse) HasStopSequence() bool {
	if o != nil && o.StopSequence.IsSet() {
		return true
	}

	return false
}

// SetStopSequence gets a reference to the given NullableString and assigns it to the StopSequence field.
func (o *MessageResponse) SetStopSequence(v string) {
	o.StopSequence.Set(&v)
}

// SetStopSequenceNil sets the value for StopSequence to be an explicit nil
func (o *MessageResponse) SetStopSequenceNil() {
	o.StopSequence.Set(nil)
}

// UnsetStopSequence ensures that no value is present for StopSequence, not even an explicit nil
func (o *MessageResponse) UnsetStopSequence() {
	o.StopSequence.Unset()
}

// GetType returns the Type field value
func (o *MessageResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageResponse) SetType(v string) {
	o.Type = v
}

// GetUsage returns the Usage field value
func (o *MessageResponse) GetUsage() MessageUsage {
	if o == nil {
		var ret MessageUsage
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *MessageResponse) GetUsageOk() (*MessageUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *MessageResponse) SetUsage(v MessageUsage) {
	o.Usage = v
}

func (o MessageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	toSerialize["role"] = o.Role
	if o.StopReason.IsSet() {
		toSerialize["stop_reason"] = o.StopReason.Get()
	}
	if o.StopSequence.IsSet() {
		toSerialize["stop_sequence"] = o.StopSequence.Get()
	}
	toSerialize["type"] = o.Type
	toSerialize["usage"] = o.Usage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"id",
		"model",
		"role",
		"type",
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageResponse := _MessageResponse{}

	err = json.Unmarshal(data, &varMessageResponse)

	if err != nil {
		return err
	}

	*o = MessageResponse(varMessageResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "role")
		delete(additionalProperties, "stop_reason")
		delete(additionalProperties, "stop_sequence")
		delete(additionalProperties, "type")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageResponse struct {
	value *MessageResponse
	isSet bool
}

func (v NullableMessageResponse) Get() *MessageResponse {
	return v.value
}

func (v *NullableMessageResponse) Set(val *MessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageResponse(val *MessageResponse) *NullableMessageResponse {
	return &NullableMessageResponse{value: val, isSet: true}
}

func (v NullableMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
