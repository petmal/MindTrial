/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type V1API interface {

	/*
		HandleEmbeddingModelGetRequest Get full information about an embedding model with its model_id.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param modelId ID of the model to get.
		@return ApiHandleEmbeddingModelGetRequestRequest
	*/
	HandleEmbeddingModelGetRequest(ctx context.Context, modelId string) ApiHandleEmbeddingModelGetRequestRequest

	// HandleEmbeddingModelGetRequestExecute executes the request
	//  @return EmbeddingModel
	HandleEmbeddingModelGetRequestExecute(r ApiHandleEmbeddingModelGetRequestRequest) (*EmbeddingModel, *http.Response, error)

	/*
		HandleEmbeddingModelsListRequest List all embedding models available to the authenticating API key with full information. Additional information compared to /v1/models includes modalities, pricing, fingerprint and alias(es).

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleEmbeddingModelsListRequestRequest
	*/
	HandleEmbeddingModelsListRequest(ctx context.Context) ApiHandleEmbeddingModelsListRequestRequest

	// HandleEmbeddingModelsListRequestExecute executes the request
	//  @return ListEmbeddingModelsResponse
	HandleEmbeddingModelsListRequestExecute(r ApiHandleEmbeddingModelsListRequestRequest) (*ListEmbeddingModelsResponse, *http.Response, error)

	/*
		HandleEmbeddingRequest Create an embedding vector representation corresponding to the input text. This is the endpoint for making requests to embedding models.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleEmbeddingRequestRequest
	*/
	HandleEmbeddingRequest(ctx context.Context) ApiHandleEmbeddingRequestRequest

	// HandleEmbeddingRequestExecute executes the request
	//  @return EmbeddingResponse
	HandleEmbeddingRequestExecute(r ApiHandleEmbeddingRequestRequest) (*EmbeddingResponse, *http.Response, error)

	/*
		HandleGenerateImageRequest Generate an image based on a prompt. This is the endpoint for making generation requests to image generation models.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleGenerateImageRequestRequest
	*/
	HandleGenerateImageRequest(ctx context.Context) ApiHandleGenerateImageRequestRequest

	// HandleGenerateImageRequestExecute executes the request
	//  @return GeneratedImageResponse
	HandleGenerateImageRequestExecute(r ApiHandleGenerateImageRequestRequest) (*GeneratedImageResponse, *http.Response, error)

	/*
		HandleGenericCompleteRequest (Legacy - Not supported by reasoning models) Create a text completion response. This endpoint is compatible with the Anthropic API.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleGenericCompleteRequestRequest
	*/
	HandleGenericCompleteRequest(ctx context.Context) ApiHandleGenericCompleteRequestRequest

	// HandleGenericCompleteRequestExecute executes the request
	//  @return CompleteResponse
	HandleGenericCompleteRequestExecute(r ApiHandleGenericCompleteRequestRequest) (*CompleteResponse, *http.Response, error)

	/*
		HandleGenericCompletionRequest Create a chat response from text/image chat prompts. This is the endpoint for making requests to chat and image understanding models.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleGenericCompletionRequestRequest
	*/
	HandleGenericCompletionRequest(ctx context.Context) ApiHandleGenericCompletionRequestRequest

	// HandleGenericCompletionRequestExecute executes the request
	//  @return ChatResponse
	HandleGenericCompletionRequestExecute(r ApiHandleGenericCompletionRequestRequest) (*ChatResponse, *http.Response, error)

	/*
		HandleGenericMessagesRequest Create a messages response. This endpoint is compatible with the Anthropic API.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleGenericMessagesRequestRequest
	*/
	HandleGenericMessagesRequest(ctx context.Context) ApiHandleGenericMessagesRequestRequest

	// HandleGenericMessagesRequestExecute executes the request
	//  @return MessageResponse
	HandleGenericMessagesRequestExecute(r ApiHandleGenericMessagesRequestRequest) (*MessageResponse, *http.Response, error)

	/*
		HandleGetApiKeyInfoRequest Get information about an API key, including name, status, permissions and users who created or modified this key.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleGetApiKeyInfoRequestRequest
	*/
	HandleGetApiKeyInfoRequest(ctx context.Context) ApiHandleGetApiKeyInfoRequestRequest

	// HandleGetApiKeyInfoRequestExecute executes the request
	//  @return ApiKey
	HandleGetApiKeyInfoRequestExecute(r ApiHandleGetApiKeyInfoRequestRequest) (*ApiKey, *http.Response, error)

	/*
		HandleGetDeferredCompletionRequest Tries to fetch a result for a previously-started deferred completion. Returns `200 Success` with the response body, if the request has been completed. Returns `202 Accepted` when the request is pending processing.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param requestId The deferred request id returned by a previous deferred chat request.
		@return ApiHandleGetDeferredCompletionRequestRequest
	*/
	HandleGetDeferredCompletionRequest(ctx context.Context, requestId string) ApiHandleGetDeferredCompletionRequestRequest

	// HandleGetDeferredCompletionRequestExecute executes the request
	//  @return ChatResponse
	HandleGetDeferredCompletionRequestExecute(r ApiHandleGetDeferredCompletionRequestRequest) (*ChatResponse, *http.Response, error)

	/*
		HandleImageGenerationModelGetRequest Get full information about an image generation model with its model_id.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param modelId ID of the model to get.
		@return ApiHandleImageGenerationModelGetRequestRequest
	*/
	HandleImageGenerationModelGetRequest(ctx context.Context, modelId string) ApiHandleImageGenerationModelGetRequestRequest

	// HandleImageGenerationModelGetRequestExecute executes the request
	//  @return ImageGenerationModel
	HandleImageGenerationModelGetRequestExecute(r ApiHandleImageGenerationModelGetRequestRequest) (*ImageGenerationModel, *http.Response, error)

	/*
		HandleImageGenerationModelsListRequest List all image generation models available to the authenticating API key with full information. Additional information compared to /v1/models includes modalities, pricing, fingerprint and alias(es).

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleImageGenerationModelsListRequestRequest
	*/
	HandleImageGenerationModelsListRequest(ctx context.Context) ApiHandleImageGenerationModelsListRequestRequest

	// HandleImageGenerationModelsListRequestExecute executes the request
	//  @return ListImageGenerationModelsResponse
	HandleImageGenerationModelsListRequestExecute(r ApiHandleImageGenerationModelsListRequestRequest) (*ListImageGenerationModelsResponse, *http.Response, error)

	/*
		HandleLanguageModelGetRequest Get full information about a chat or image understanding model with its model_id.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param modelId ID of the model to get.
		@return ApiHandleLanguageModelGetRequestRequest
	*/
	HandleLanguageModelGetRequest(ctx context.Context, modelId string) ApiHandleLanguageModelGetRequestRequest

	// HandleLanguageModelGetRequestExecute executes the request
	//  @return LanguageModel
	HandleLanguageModelGetRequestExecute(r ApiHandleLanguageModelGetRequestRequest) (*LanguageModel, *http.Response, error)

	/*
		HandleLanguageModelsListRequest List all chat and image understanding models available to the authenticating API key with full information. Additional information compared to /v1/models includes modalities, pricing, fingerprint and alias(es).

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleLanguageModelsListRequestRequest
	*/
	HandleLanguageModelsListRequest(ctx context.Context) ApiHandleLanguageModelsListRequestRequest

	// HandleLanguageModelsListRequestExecute executes the request
	//  @return ListLanguageModelsResponse
	HandleLanguageModelsListRequestExecute(r ApiHandleLanguageModelsListRequestRequest) (*ListLanguageModelsResponse, *http.Response, error)

	/*
		HandleModelGetRequest Get minimalized information about a model with its model_id.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param modelId ID of the model to get.
		@return ApiHandleModelGetRequestRequest
	*/
	HandleModelGetRequest(ctx context.Context, modelId string) ApiHandleModelGetRequestRequest

	// HandleModelGetRequestExecute executes the request
	//  @return Model
	HandleModelGetRequestExecute(r ApiHandleModelGetRequestRequest) (*Model, *http.Response, error)

	/*
		HandleModelsListRequest List all models available to the authenticating API key with minimalized information, including model names (ID), creation times, etc.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleModelsListRequestRequest
	*/
	HandleModelsListRequest(ctx context.Context) ApiHandleModelsListRequestRequest

	// HandleModelsListRequestExecute executes the request
	//  @return ListModelsResponse
	HandleModelsListRequestExecute(r ApiHandleModelsListRequestRequest) (*ListModelsResponse, *http.Response, error)

	/*
		HandleSampleRequest (Legacy - Not supported by reasoning models) Create a text completion response for a given prompt. Replaced by /v1/chat/completions.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleSampleRequestRequest
	*/
	HandleSampleRequest(ctx context.Context) ApiHandleSampleRequestRequest

	// HandleSampleRequestExecute executes the request
	//  @return SampleResponse
	HandleSampleRequestExecute(r ApiHandleSampleRequestRequest) (*SampleResponse, *http.Response, error)

	/*
		HandleTokenizeTextRequest Tokenize text with the specified model

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiHandleTokenizeTextRequestRequest
	*/
	HandleTokenizeTextRequest(ctx context.Context) ApiHandleTokenizeTextRequestRequest

	// HandleTokenizeTextRequestExecute executes the request
	//  @return TokenizeResponse
	HandleTokenizeTextRequestExecute(r ApiHandleTokenizeTextRequestRequest) (*TokenizeResponse, *http.Response, error)
}

// V1APIService V1API service
type V1APIService service

type ApiHandleEmbeddingModelGetRequestRequest struct {
	ctx        context.Context
	ApiService V1API
	modelId    string
}

func (r ApiHandleEmbeddingModelGetRequestRequest) Execute() (*EmbeddingModel, *http.Response, error) {
	return r.ApiService.HandleEmbeddingModelGetRequestExecute(r)
}

/*
HandleEmbeddingModelGetRequest Get full information about an embedding model with its model_id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId ID of the model to get.
	@return ApiHandleEmbeddingModelGetRequestRequest
*/
func (a *V1APIService) HandleEmbeddingModelGetRequest(ctx context.Context, modelId string) ApiHandleEmbeddingModelGetRequestRequest {
	return ApiHandleEmbeddingModelGetRequestRequest{
		ApiService: a,
		ctx:        ctx,
		modelId:    modelId,
	}
}

// Execute executes the request
//
//	@return EmbeddingModel
func (a *V1APIService) HandleEmbeddingModelGetRequestExecute(r ApiHandleEmbeddingModelGetRequestRequest) (*EmbeddingModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmbeddingModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleEmbeddingModelGetRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/embedding-models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleEmbeddingModelsListRequestRequest struct {
	ctx        context.Context
	ApiService V1API
}

func (r ApiHandleEmbeddingModelsListRequestRequest) Execute() (*ListEmbeddingModelsResponse, *http.Response, error) {
	return r.ApiService.HandleEmbeddingModelsListRequestExecute(r)
}

/*
HandleEmbeddingModelsListRequest List all embedding models available to the authenticating API key with full information. Additional information compared to /v1/models includes modalities, pricing, fingerprint and alias(es).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleEmbeddingModelsListRequestRequest
*/
func (a *V1APIService) HandleEmbeddingModelsListRequest(ctx context.Context) ApiHandleEmbeddingModelsListRequestRequest {
	return ApiHandleEmbeddingModelsListRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListEmbeddingModelsResponse
func (a *V1APIService) HandleEmbeddingModelsListRequestExecute(r ApiHandleEmbeddingModelsListRequestRequest) (*ListEmbeddingModelsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListEmbeddingModelsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleEmbeddingModelsListRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/embedding-models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleEmbeddingRequestRequest struct {
	ctx              context.Context
	ApiService       V1API
	embeddingRequest *EmbeddingRequest
}

func (r ApiHandleEmbeddingRequestRequest) EmbeddingRequest(embeddingRequest EmbeddingRequest) ApiHandleEmbeddingRequestRequest {
	r.embeddingRequest = &embeddingRequest
	return r
}

func (r ApiHandleEmbeddingRequestRequest) Execute() (*EmbeddingResponse, *http.Response, error) {
	return r.ApiService.HandleEmbeddingRequestExecute(r)
}

/*
HandleEmbeddingRequest Create an embedding vector representation corresponding to the input text. This is the endpoint for making requests to embedding models.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleEmbeddingRequestRequest
*/
func (a *V1APIService) HandleEmbeddingRequest(ctx context.Context) ApiHandleEmbeddingRequestRequest {
	return ApiHandleEmbeddingRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EmbeddingResponse
func (a *V1APIService) HandleEmbeddingRequestExecute(r ApiHandleEmbeddingRequestRequest) (*EmbeddingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmbeddingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleEmbeddingRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/embeddings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.embeddingRequest == nil {
		return localVarReturnValue, nil, reportError("embeddingRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.embeddingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleGenerateImageRequestRequest struct {
	ctx                  context.Context
	ApiService           V1API
	generateImageRequest *GenerateImageRequest
}

func (r ApiHandleGenerateImageRequestRequest) GenerateImageRequest(generateImageRequest GenerateImageRequest) ApiHandleGenerateImageRequestRequest {
	r.generateImageRequest = &generateImageRequest
	return r
}

func (r ApiHandleGenerateImageRequestRequest) Execute() (*GeneratedImageResponse, *http.Response, error) {
	return r.ApiService.HandleGenerateImageRequestExecute(r)
}

/*
HandleGenerateImageRequest Generate an image based on a prompt. This is the endpoint for making generation requests to image generation models.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleGenerateImageRequestRequest
*/
func (a *V1APIService) HandleGenerateImageRequest(ctx context.Context) ApiHandleGenerateImageRequestRequest {
	return ApiHandleGenerateImageRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GeneratedImageResponse
func (a *V1APIService) HandleGenerateImageRequestExecute(r ApiHandleGenerateImageRequestRequest) (*GeneratedImageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GeneratedImageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleGenerateImageRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/images/generations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generateImageRequest == nil {
		return localVarReturnValue, nil, reportError("generateImageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generateImageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleGenericCompleteRequestRequest struct {
	ctx             context.Context
	ApiService      V1API
	completeRequest *CompleteRequest
}

func (r ApiHandleGenericCompleteRequestRequest) CompleteRequest(completeRequest CompleteRequest) ApiHandleGenericCompleteRequestRequest {
	r.completeRequest = &completeRequest
	return r
}

func (r ApiHandleGenericCompleteRequestRequest) Execute() (*CompleteResponse, *http.Response, error) {
	return r.ApiService.HandleGenericCompleteRequestExecute(r)
}

/*
HandleGenericCompleteRequest (Legacy - Not supported by reasoning models) Create a text completion response. This endpoint is compatible with the Anthropic API.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleGenericCompleteRequestRequest
*/
func (a *V1APIService) HandleGenericCompleteRequest(ctx context.Context) ApiHandleGenericCompleteRequestRequest {
	return ApiHandleGenericCompleteRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompleteResponse
func (a *V1APIService) HandleGenericCompleteRequestExecute(r ApiHandleGenericCompleteRequestRequest) (*CompleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompleteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleGenericCompleteRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/complete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.completeRequest == nil {
		return localVarReturnValue, nil, reportError("completeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.completeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleGenericCompletionRequestRequest struct {
	ctx         context.Context
	ApiService  V1API
	chatRequest *ChatRequest
}

func (r ApiHandleGenericCompletionRequestRequest) ChatRequest(chatRequest ChatRequest) ApiHandleGenericCompletionRequestRequest {
	r.chatRequest = &chatRequest
	return r
}

func (r ApiHandleGenericCompletionRequestRequest) Execute() (*ChatResponse, *http.Response, error) {
	return r.ApiService.HandleGenericCompletionRequestExecute(r)
}

/*
HandleGenericCompletionRequest Create a chat response from text/image chat prompts. This is the endpoint for making requests to chat and image understanding models.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleGenericCompletionRequestRequest
*/
func (a *V1APIService) HandleGenericCompletionRequest(ctx context.Context) ApiHandleGenericCompletionRequestRequest {
	return ApiHandleGenericCompletionRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ChatResponse
func (a *V1APIService) HandleGenericCompletionRequestExecute(r ApiHandleGenericCompletionRequestRequest) (*ChatResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ChatResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleGenericCompletionRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/chat/completions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chatRequest == nil {
		return localVarReturnValue, nil, reportError("chatRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chatRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleGenericMessagesRequestRequest struct {
	ctx            context.Context
	ApiService     V1API
	messageRequest *MessageRequest
}

func (r ApiHandleGenericMessagesRequestRequest) MessageRequest(messageRequest MessageRequest) ApiHandleGenericMessagesRequestRequest {
	r.messageRequest = &messageRequest
	return r
}

func (r ApiHandleGenericMessagesRequestRequest) Execute() (*MessageResponse, *http.Response, error) {
	return r.ApiService.HandleGenericMessagesRequestExecute(r)
}

/*
HandleGenericMessagesRequest Create a messages response. This endpoint is compatible with the Anthropic API.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleGenericMessagesRequestRequest
*/
func (a *V1APIService) HandleGenericMessagesRequest(ctx context.Context) ApiHandleGenericMessagesRequestRequest {
	return ApiHandleGenericMessagesRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MessageResponse
func (a *V1APIService) HandleGenericMessagesRequestExecute(r ApiHandleGenericMessagesRequestRequest) (*MessageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MessageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleGenericMessagesRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageRequest == nil {
		return localVarReturnValue, nil, reportError("messageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.messageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleGetApiKeyInfoRequestRequest struct {
	ctx        context.Context
	ApiService V1API
}

func (r ApiHandleGetApiKeyInfoRequestRequest) Execute() (*ApiKey, *http.Response, error) {
	return r.ApiService.HandleGetApiKeyInfoRequestExecute(r)
}

/*
HandleGetApiKeyInfoRequest Get information about an API key, including name, status, permissions and users who created or modified this key.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleGetApiKeyInfoRequestRequest
*/
func (a *V1APIService) HandleGetApiKeyInfoRequest(ctx context.Context) ApiHandleGetApiKeyInfoRequestRequest {
	return ApiHandleGetApiKeyInfoRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiKey
func (a *V1APIService) HandleGetApiKeyInfoRequestExecute(r ApiHandleGetApiKeyInfoRequestRequest) (*ApiKey, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleGetApiKeyInfoRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/api-key"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleGetDeferredCompletionRequestRequest struct {
	ctx        context.Context
	ApiService V1API
	requestId  string
}

func (r ApiHandleGetDeferredCompletionRequestRequest) Execute() (*ChatResponse, *http.Response, error) {
	return r.ApiService.HandleGetDeferredCompletionRequestExecute(r)
}

/*
HandleGetDeferredCompletionRequest Tries to fetch a result for a previously-started deferred completion. Returns `200 Success` with the response body, if the request has been completed. Returns `202 Accepted` when the request is pending processing.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param requestId The deferred request id returned by a previous deferred chat request.
	@return ApiHandleGetDeferredCompletionRequestRequest
*/
func (a *V1APIService) HandleGetDeferredCompletionRequest(ctx context.Context, requestId string) ApiHandleGetDeferredCompletionRequestRequest {
	return ApiHandleGetDeferredCompletionRequestRequest{
		ApiService: a,
		ctx:        ctx,
		requestId:  requestId,
	}
}

// Execute executes the request
//
//	@return ChatResponse
func (a *V1APIService) HandleGetDeferredCompletionRequestExecute(r ApiHandleGetDeferredCompletionRequestRequest) (*ChatResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ChatResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleGetDeferredCompletionRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/chat/deferred-completion/{request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"request_id"+"}", url.PathEscape(parameterValueToString(r.requestId, "requestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleImageGenerationModelGetRequestRequest struct {
	ctx        context.Context
	ApiService V1API
	modelId    string
}

func (r ApiHandleImageGenerationModelGetRequestRequest) Execute() (*ImageGenerationModel, *http.Response, error) {
	return r.ApiService.HandleImageGenerationModelGetRequestExecute(r)
}

/*
HandleImageGenerationModelGetRequest Get full information about an image generation model with its model_id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId ID of the model to get.
	@return ApiHandleImageGenerationModelGetRequestRequest
*/
func (a *V1APIService) HandleImageGenerationModelGetRequest(ctx context.Context, modelId string) ApiHandleImageGenerationModelGetRequestRequest {
	return ApiHandleImageGenerationModelGetRequestRequest{
		ApiService: a,
		ctx:        ctx,
		modelId:    modelId,
	}
}

// Execute executes the request
//
//	@return ImageGenerationModel
func (a *V1APIService) HandleImageGenerationModelGetRequestExecute(r ApiHandleImageGenerationModelGetRequestRequest) (*ImageGenerationModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageGenerationModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleImageGenerationModelGetRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/image-generation-models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleImageGenerationModelsListRequestRequest struct {
	ctx        context.Context
	ApiService V1API
}

func (r ApiHandleImageGenerationModelsListRequestRequest) Execute() (*ListImageGenerationModelsResponse, *http.Response, error) {
	return r.ApiService.HandleImageGenerationModelsListRequestExecute(r)
}

/*
HandleImageGenerationModelsListRequest List all image generation models available to the authenticating API key with full information. Additional information compared to /v1/models includes modalities, pricing, fingerprint and alias(es).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleImageGenerationModelsListRequestRequest
*/
func (a *V1APIService) HandleImageGenerationModelsListRequest(ctx context.Context) ApiHandleImageGenerationModelsListRequestRequest {
	return ApiHandleImageGenerationModelsListRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListImageGenerationModelsResponse
func (a *V1APIService) HandleImageGenerationModelsListRequestExecute(r ApiHandleImageGenerationModelsListRequestRequest) (*ListImageGenerationModelsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListImageGenerationModelsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleImageGenerationModelsListRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/image-generation-models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleLanguageModelGetRequestRequest struct {
	ctx        context.Context
	ApiService V1API
	modelId    string
}

func (r ApiHandleLanguageModelGetRequestRequest) Execute() (*LanguageModel, *http.Response, error) {
	return r.ApiService.HandleLanguageModelGetRequestExecute(r)
}

/*
HandleLanguageModelGetRequest Get full information about a chat or image understanding model with its model_id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId ID of the model to get.
	@return ApiHandleLanguageModelGetRequestRequest
*/
func (a *V1APIService) HandleLanguageModelGetRequest(ctx context.Context, modelId string) ApiHandleLanguageModelGetRequestRequest {
	return ApiHandleLanguageModelGetRequestRequest{
		ApiService: a,
		ctx:        ctx,
		modelId:    modelId,
	}
}

// Execute executes the request
//
//	@return LanguageModel
func (a *V1APIService) HandleLanguageModelGetRequestExecute(r ApiHandleLanguageModelGetRequestRequest) (*LanguageModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LanguageModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleLanguageModelGetRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/language-models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleLanguageModelsListRequestRequest struct {
	ctx        context.Context
	ApiService V1API
}

func (r ApiHandleLanguageModelsListRequestRequest) Execute() (*ListLanguageModelsResponse, *http.Response, error) {
	return r.ApiService.HandleLanguageModelsListRequestExecute(r)
}

/*
HandleLanguageModelsListRequest List all chat and image understanding models available to the authenticating API key with full information. Additional information compared to /v1/models includes modalities, pricing, fingerprint and alias(es).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleLanguageModelsListRequestRequest
*/
func (a *V1APIService) HandleLanguageModelsListRequest(ctx context.Context) ApiHandleLanguageModelsListRequestRequest {
	return ApiHandleLanguageModelsListRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListLanguageModelsResponse
func (a *V1APIService) HandleLanguageModelsListRequestExecute(r ApiHandleLanguageModelsListRequestRequest) (*ListLanguageModelsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListLanguageModelsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleLanguageModelsListRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/language-models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleModelGetRequestRequest struct {
	ctx        context.Context
	ApiService V1API
	modelId    string
}

func (r ApiHandleModelGetRequestRequest) Execute() (*Model, *http.Response, error) {
	return r.ApiService.HandleModelGetRequestExecute(r)
}

/*
HandleModelGetRequest Get minimalized information about a model with its model_id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId ID of the model to get.
	@return ApiHandleModelGetRequestRequest
*/
func (a *V1APIService) HandleModelGetRequest(ctx context.Context, modelId string) ApiHandleModelGetRequestRequest {
	return ApiHandleModelGetRequestRequest{
		ApiService: a,
		ctx:        ctx,
		modelId:    modelId,
	}
}

// Execute executes the request
//
//	@return Model
func (a *V1APIService) HandleModelGetRequestExecute(r ApiHandleModelGetRequestRequest) (*Model, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Model
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleModelGetRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleModelsListRequestRequest struct {
	ctx        context.Context
	ApiService V1API
}

func (r ApiHandleModelsListRequestRequest) Execute() (*ListModelsResponse, *http.Response, error) {
	return r.ApiService.HandleModelsListRequestExecute(r)
}

/*
HandleModelsListRequest List all models available to the authenticating API key with minimalized information, including model names (ID), creation times, etc.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleModelsListRequestRequest
*/
func (a *V1APIService) HandleModelsListRequest(ctx context.Context) ApiHandleModelsListRequestRequest {
	return ApiHandleModelsListRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListModelsResponse
func (a *V1APIService) HandleModelsListRequestExecute(r ApiHandleModelsListRequestRequest) (*ListModelsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListModelsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleModelsListRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleSampleRequestRequest struct {
	ctx           context.Context
	ApiService    V1API
	sampleRequest *SampleRequest
}

func (r ApiHandleSampleRequestRequest) SampleRequest(sampleRequest SampleRequest) ApiHandleSampleRequestRequest {
	r.sampleRequest = &sampleRequest
	return r
}

func (r ApiHandleSampleRequestRequest) Execute() (*SampleResponse, *http.Response, error) {
	return r.ApiService.HandleSampleRequestExecute(r)
}

/*
HandleSampleRequest (Legacy - Not supported by reasoning models) Create a text completion response for a given prompt. Replaced by /v1/chat/completions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleSampleRequestRequest
*/
func (a *V1APIService) HandleSampleRequest(ctx context.Context) ApiHandleSampleRequestRequest {
	return ApiHandleSampleRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SampleResponse
func (a *V1APIService) HandleSampleRequestExecute(r ApiHandleSampleRequestRequest) (*SampleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SampleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleSampleRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/completions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sampleRequest == nil {
		return localVarReturnValue, nil, reportError("sampleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sampleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleTokenizeTextRequestRequest struct {
	ctx             context.Context
	ApiService      V1API
	tokenizeRequest *TokenizeRequest
}

func (r ApiHandleTokenizeTextRequestRequest) TokenizeRequest(tokenizeRequest TokenizeRequest) ApiHandleTokenizeTextRequestRequest {
	r.tokenizeRequest = &tokenizeRequest
	return r
}

func (r ApiHandleTokenizeTextRequestRequest) Execute() (*TokenizeResponse, *http.Response, error) {
	return r.ApiService.HandleTokenizeTextRequestExecute(r)
}

/*
HandleTokenizeTextRequest Tokenize text with the specified model

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHandleTokenizeTextRequestRequest
*/
func (a *V1APIService) HandleTokenizeTextRequest(ctx context.Context) ApiHandleTokenizeTextRequestRequest {
	return ApiHandleTokenizeTextRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TokenizeResponse
func (a *V1APIService) HandleTokenizeTextRequestExecute(r ApiHandleTokenizeTextRequestRequest) (*TokenizeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TokenizeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V1APIService.HandleTokenizeTextRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/tokenize-text"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tokenizeRequest == nil {
		return localVarReturnValue, nil, reportError("tokenizeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tokenizeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
