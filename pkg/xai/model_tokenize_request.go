/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the TokenizeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizeRequest{}

// TokenizeRequest struct for TokenizeRequest
type TokenizeRequest struct {
	// The model to tokenize with.
	Model *string `json:"model,omitempty"`
	// The text content to be tokenized.
	Text *string `json:"text,omitempty"`
	// Optional user identifier.
	User                 NullableString `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TokenizeRequest TokenizeRequest

// NewTokenizeRequest instantiates a new TokenizeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizeRequest() *TokenizeRequest {
	this := TokenizeRequest{}
	return &this
}

// NewTokenizeRequestWithDefaults instantiates a new TokenizeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizeRequestWithDefaults() *TokenizeRequest {
	this := TokenizeRequest{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *TokenizeRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizeRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *TokenizeRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *TokenizeRequest) SetModel(v string) {
	o.Model = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TokenizeRequest) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizeRequest) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TokenizeRequest) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TokenizeRequest) SetText(v string) {
	o.Text = &v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenizeRequest) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenizeRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *TokenizeRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *TokenizeRequest) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *TokenizeRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *TokenizeRequest) UnsetUser() {
	o.User.Unset()
}

func (o TokenizeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenizeRequest) UnmarshalJSON(data []byte) (err error) {
	varTokenizeRequest := _TokenizeRequest{}

	err = json.Unmarshal(data, &varTokenizeRequest)

	if err != nil {
		return err
	}

	*o = TokenizeRequest(varTokenizeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "text")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenizeRequest struct {
	value *TokenizeRequest
	isSet bool
}

func (v NullableTokenizeRequest) Get() *TokenizeRequest {
	return v.value
}

func (v *NullableTokenizeRequest) Set(val *TokenizeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizeRequest(val *TokenizeRequest) *NullableTokenizeRequest {
	return &NullableTokenizeRequest{value: val, isSet: true}
}

func (v NullableTokenizeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
