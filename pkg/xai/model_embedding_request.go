/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the EmbeddingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingRequest{}

// EmbeddingRequest struct for EmbeddingRequest
type EmbeddingRequest struct {
	// The number of dimensions the resulting output embeddings should have.
	Dimensions NullableInt32 `json:"dimensions,omitempty"`
	// The format to return the embeddings in. Can be either `float` or `base64`.
	EncodingFormat NullableString `json:"encoding_format,omitempty"`
	// Input text to embed, encoded as a string or list of tokens. To embed multiple inputs in a single request, pass a list of strings or list of token lists. The total tokens in the input must not exceed the context window for the model and cannot be an empty string. If the input is a list, the maximum length of the list is 128.
	Input *EmbeddingInput `json:"input,omitempty"`
	// ID of the model to use.
	Model *string `json:"model,omitempty"`
	// Flag to use the new format of the API.
	Preview NullableBool `json:"preview,omitempty"`
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	User                 NullableString `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbeddingRequest EmbeddingRequest

// NewEmbeddingRequest instantiates a new EmbeddingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingRequest() *EmbeddingRequest {
	this := EmbeddingRequest{}
	return &this
}

// NewEmbeddingRequestWithDefaults instantiates a new EmbeddingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingRequestWithDefaults() *EmbeddingRequest {
	this := EmbeddingRequest{}
	return &this
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingRequest) GetDimensions() int32 {
	if o == nil || IsNil(o.Dimensions.Get()) {
		var ret int32
		return ret
	}
	return *o.Dimensions.Get()
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingRequest) GetDimensionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dimensions.Get(), o.Dimensions.IsSet()
}

// HasDimensions returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasDimensions() bool {
	if o != nil && o.Dimensions.IsSet() {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given NullableInt32 and assigns it to the Dimensions field.
func (o *EmbeddingRequest) SetDimensions(v int32) {
	o.Dimensions.Set(&v)
}

// SetDimensionsNil sets the value for Dimensions to be an explicit nil
func (o *EmbeddingRequest) SetDimensionsNil() {
	o.Dimensions.Set(nil)
}

// UnsetDimensions ensures that no value is present for Dimensions, not even an explicit nil
func (o *EmbeddingRequest) UnsetDimensions() {
	o.Dimensions.Unset()
}

// GetEncodingFormat returns the EncodingFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingRequest) GetEncodingFormat() string {
	if o == nil || IsNil(o.EncodingFormat.Get()) {
		var ret string
		return ret
	}
	return *o.EncodingFormat.Get()
}

// GetEncodingFormatOk returns a tuple with the EncodingFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingRequest) GetEncodingFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncodingFormat.Get(), o.EncodingFormat.IsSet()
}

// HasEncodingFormat returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasEncodingFormat() bool {
	if o != nil && o.EncodingFormat.IsSet() {
		return true
	}

	return false
}

// SetEncodingFormat gets a reference to the given NullableString and assigns it to the EncodingFormat field.
func (o *EmbeddingRequest) SetEncodingFormat(v string) {
	o.EncodingFormat.Set(&v)
}

// SetEncodingFormatNil sets the value for EncodingFormat to be an explicit nil
func (o *EmbeddingRequest) SetEncodingFormatNil() {
	o.EncodingFormat.Set(nil)
}

// UnsetEncodingFormat ensures that no value is present for EncodingFormat, not even an explicit nil
func (o *EmbeddingRequest) UnsetEncodingFormat() {
	o.EncodingFormat.Unset()
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *EmbeddingRequest) GetInput() EmbeddingInput {
	if o == nil || IsNil(o.Input) {
		var ret EmbeddingInput
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingRequest) GetInputOk() (*EmbeddingInput, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given EmbeddingInput and assigns it to the Input field.
func (o *EmbeddingRequest) SetInput(v EmbeddingInput) {
	o.Input = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *EmbeddingRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *EmbeddingRequest) SetModel(v string) {
	o.Model = &v
}

// GetPreview returns the Preview field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingRequest) GetPreview() bool {
	if o == nil || IsNil(o.Preview.Get()) {
		var ret bool
		return ret
	}
	return *o.Preview.Get()
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingRequest) GetPreviewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preview.Get(), o.Preview.IsSet()
}

// HasPreview returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasPreview() bool {
	if o != nil && o.Preview.IsSet() {
		return true
	}

	return false
}

// SetPreview gets a reference to the given NullableBool and assigns it to the Preview field.
func (o *EmbeddingRequest) SetPreview(v bool) {
	o.Preview.Set(&v)
}

// SetPreviewNil sets the value for Preview to be an explicit nil
func (o *EmbeddingRequest) SetPreviewNil() {
	o.Preview.Set(nil)
}

// UnsetPreview ensures that no value is present for Preview, not even an explicit nil
func (o *EmbeddingRequest) UnsetPreview() {
	o.Preview.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingRequest) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *EmbeddingRequest) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *EmbeddingRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *EmbeddingRequest) UnsetUser() {
	o.User.Unset()
}

func (o EmbeddingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Dimensions.IsSet() {
		toSerialize["dimensions"] = o.Dimensions.Get()
	}
	if o.EncodingFormat.IsSet() {
		toSerialize["encoding_format"] = o.EncodingFormat.Get()
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if o.Preview.IsSet() {
		toSerialize["preview"] = o.Preview.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbeddingRequest) UnmarshalJSON(data []byte) (err error) {
	varEmbeddingRequest := _EmbeddingRequest{}

	err = json.Unmarshal(data, &varEmbeddingRequest)

	if err != nil {
		return err
	}

	*o = EmbeddingRequest(varEmbeddingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dimensions")
		delete(additionalProperties, "encoding_format")
		delete(additionalProperties, "input")
		delete(additionalProperties, "model")
		delete(additionalProperties, "preview")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbeddingRequest struct {
	value *EmbeddingRequest
	isSet bool
}

func (v NullableEmbeddingRequest) Get() *EmbeddingRequest {
	return v.value
}

func (v *NullableEmbeddingRequest) Set(val *EmbeddingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingRequest(val *EmbeddingRequest) *NullableEmbeddingRequest {
	return &NullableEmbeddingRequest{value: val, isSet: true}
}

func (v NullableEmbeddingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
