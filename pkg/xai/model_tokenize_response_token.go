/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the TokenizeResponseToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenizeResponseToken{}

// TokenizeResponseToken struct for TokenizeResponseToken
type TokenizeResponseToken struct {
	// The string of the token.
	StringToken string `json:"string_token"`
	// The bytes that constituted the token.
	TokenBytes []int32 `json:"token_bytes"`
	// The integer representation of the token for the model.
	TokenId              int32 `json:"token_id"`
	AdditionalProperties map[string]interface{}
}

type _TokenizeResponseToken TokenizeResponseToken

// NewTokenizeResponseToken instantiates a new TokenizeResponseToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizeResponseToken(stringToken string, tokenBytes []int32, tokenId int32) *TokenizeResponseToken {
	this := TokenizeResponseToken{}
	this.StringToken = stringToken
	this.TokenBytes = tokenBytes
	this.TokenId = tokenId
	return &this
}

// NewTokenizeResponseTokenWithDefaults instantiates a new TokenizeResponseToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizeResponseTokenWithDefaults() *TokenizeResponseToken {
	this := TokenizeResponseToken{}
	return &this
}

// GetStringToken returns the StringToken field value
func (o *TokenizeResponseToken) GetStringToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StringToken
}

// GetStringTokenOk returns a tuple with the StringToken field value
// and a boolean to check if the value has been set.
func (o *TokenizeResponseToken) GetStringTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StringToken, true
}

// SetStringToken sets field value
func (o *TokenizeResponseToken) SetStringToken(v string) {
	o.StringToken = v
}

// GetTokenBytes returns the TokenBytes field value
func (o *TokenizeResponseToken) GetTokenBytes() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.TokenBytes
}

// GetTokenBytesOk returns a tuple with the TokenBytes field value
// and a boolean to check if the value has been set.
func (o *TokenizeResponseToken) GetTokenBytesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenBytes, true
}

// SetTokenBytes sets field value
func (o *TokenizeResponseToken) SetTokenBytes(v []int32) {
	o.TokenBytes = v
}

// GetTokenId returns the TokenId field value
func (o *TokenizeResponseToken) GetTokenId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *TokenizeResponseToken) GetTokenIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *TokenizeResponseToken) SetTokenId(v int32) {
	o.TokenId = v
}

func (o TokenizeResponseToken) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenizeResponseToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["string_token"] = o.StringToken
	toSerialize["token_bytes"] = o.TokenBytes
	toSerialize["token_id"] = o.TokenId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenizeResponseToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"string_token",
		"token_bytes",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenizeResponseToken := _TokenizeResponseToken{}

	err = json.Unmarshal(data, &varTokenizeResponseToken)

	if err != nil {
		return err
	}

	*o = TokenizeResponseToken(varTokenizeResponseToken)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "string_token")
		delete(additionalProperties, "token_bytes")
		delete(additionalProperties, "token_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenizeResponseToken struct {
	value *TokenizeResponseToken
	isSet bool
}

func (v NullableTokenizeResponseToken) Get() *TokenizeResponseToken {
	return v.value
}

func (v *NullableTokenizeResponseToken) Set(val *TokenizeResponseToken) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizeResponseToken) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizeResponseToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizeResponseToken(val *TokenizeResponseToken) *NullableTokenizeResponseToken {
	return &NullableTokenizeResponseToken{value: val, isSet: true}
}

func (v NullableTokenizeResponseToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizeResponseToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
