/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the MessageMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageMetadata{}

// MessageMetadata struct for MessageMetadata
type MessageMetadata struct {
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	UserId               NullableString `json:"user_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MessageMetadata MessageMetadata

// NewMessageMetadata instantiates a new MessageMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageMetadata() *MessageMetadata {
	this := MessageMetadata{}
	return &this
}

// NewMessageMetadataWithDefaults instantiates a new MessageMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageMetadataWithDefaults() *MessageMetadata {
	this := MessageMetadata{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageMetadata) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageMetadata) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *MessageMetadata) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *MessageMetadata) SetUserId(v string) {
	o.UserId.Set(&v)
}

// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *MessageMetadata) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *MessageMetadata) UnsetUserId() {
	o.UserId.Unset()
}

func (o MessageMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId.IsSet() {
		toSerialize["user_id"] = o.UserId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageMetadata) UnmarshalJSON(data []byte) (err error) {
	varMessageMetadata := _MessageMetadata{}

	err = json.Unmarshal(data, &varMessageMetadata)

	if err != nil {
		return err
	}

	*o = MessageMetadata(varMessageMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageMetadata struct {
	value *MessageMetadata
	isSet bool
}

func (v NullableMessageMetadata) Get() *MessageMetadata {
	return v.value
}

func (v *NullableMessageMetadata) Set(val *MessageMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageMetadata(val *MessageMetadata) *NullableMessageMetadata {
	return &NullableMessageMetadata{value: val, isSet: true}
}

func (v NullableMessageMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
