/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
)

// checks if the ChatRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatRequest{}

// ChatRequest The chat request body for `/v1/chat/completions` endpoint.
type ChatRequest struct {
	// If set to `true`, the request returns a `request_id`. You can then get the deferred response by GET `/v1/chat/deferred-completion/{request_id}`.
	Deferred NullableBool `json:"deferred,omitempty"`
	// (Not supported by reasoning models) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty NullableFloat32 `json:"frequency_penalty,omitempty"`
	// (Unsupported) A JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias map[string]float32 `json:"logit_bias,omitempty"`
	// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
	Logprobs NullableBool `json:"logprobs,omitempty"`
	// An upper bound for the number of tokens that can be generated for a completion, including both visible output tokens and reasoning tokens. Defaults to None, meaning the model will generate as many tokens as needed up until the model's maximum context length.
	MaxCompletionTokens NullableInt32 `json:"max_completion_tokens,omitempty"`
	// [DEPRECATED] The maximum number of tokens that can be generated in the chat completion. Deprecated in favor of `max_completion_tokens`.
	MaxTokens NullableInt32 `json:"max_tokens,omitempty"`
	// A list of messages that make up the the chat conversation. Different models support different message types, such as image and text.
	Messages []Message `json:"messages,omitempty"`
	// Model name for the model to use. Obtainable from https://console.x.ai/team/default/models or https://docs.x.ai/docs/models.
	Model *string `json:"model,omitempty"`
	// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
	N NullableInt32 `json:"n,omitempty"`
	// If set to false, the model can perform maximum one tool call.
	ParallelToolCalls NullableBool `json:"parallel_tool_calls,omitempty"`
	// (Not supported by `grok-3` and reasoning models) Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	PresencePenalty NullableFloat32 `json:"presence_penalty,omitempty"`
	// Constrains how hard a reasoning model thinks before responding. Not supported by `grok-4` and will result in error if used with `grok-4`. Possible values are `low` (uses fewer reasoning tokens) and `high` (uses more reasoning tokens).
	ReasoningEffort NullableString `json:"reasoning_effort,omitempty"`
	// An object specifying the format that the model must output. Specify `{ \"type\": \"json_object\" }` for JSON output, or `{ \"type\": \"json_schema\", \"json_schema\": {...} }` for structured outputs. If `{ \\\"type\\\": \\\"text\\\" }`, the model will return a text response.
	ResponseFormat NullableResponseFormat `json:"response_format,omitempty"`
	// Set the parameters to be used for searched data. If not set, no data will be acquired by the model.
	SearchParameters NullableSearchParameters `json:"search_parameters,omitempty"`
	// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
	Seed NullableInt32 `json:"seed,omitempty"`
	// (Not supported by reasoning models) Up to 4 sequences where the API will stop generating further tokens.
	Stop []string `json:"stop,omitempty"`
	// If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.
	Stream NullableBool `json:"stream,omitempty"`
	// Options for streaming response. Only set this when you set `stream: true`.
	StreamOptions NullableStreamOptions `json:"stream_options,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. auto means the model can pick between generating a message or calling one or more tools. required means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. `none` is the default when no tools are present. `auto` is the default if tools are present.
	ToolChoice NullableToolChoice `json:"tool_choice,omitempty"`
	// A list of tools the model may call in JSON-schema. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	Tools []Tool `json:"tools,omitempty"`
	// An integer between 0 and 8 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
	TopLogprobs NullableInt32 `json:"top_logprobs,omitempty"`
	// An alternative to sampling with `temperature`, called nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. It is generally recommended to alter this or `temperature` but not both.
	TopP NullableFloat32 `json:"top_p,omitempty"`
	// A unique identifier representing your end-user, which can help xAI to monitor and detect abuse.
	User NullableString `json:"user,omitempty"`
	// Options to control the web search. This is only included for compatibility reason. Prefer the usage of `realtime_data_parameters` instead.
	WebSearchOptions     NullableWebSearchOptions `json:"web_search_options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChatRequest ChatRequest

// NewChatRequest instantiates a new ChatRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatRequest() *ChatRequest {
	this := ChatRequest{}
	var deferred bool = false
	this.Deferred = *NewNullableBool(&deferred)
	var frequencyPenalty float32 = 0
	this.FrequencyPenalty = *NewNullableFloat32(&frequencyPenalty)
	var logprobs bool = false
	this.Logprobs = *NewNullableBool(&logprobs)
	var n int32 = 1
	this.N = *NewNullableInt32(&n)
	var parallelToolCalls bool = true
	this.ParallelToolCalls = *NewNullableBool(&parallelToolCalls)
	var presencePenalty float32 = 0
	this.PresencePenalty = *NewNullableFloat32(&presencePenalty)
	var stream bool = false
	this.Stream = *NewNullableBool(&stream)
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// NewChatRequestWithDefaults instantiates a new ChatRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatRequestWithDefaults() *ChatRequest {
	this := ChatRequest{}
	var deferred bool = false
	this.Deferred = *NewNullableBool(&deferred)
	var frequencyPenalty float32 = 0
	this.FrequencyPenalty = *NewNullableFloat32(&frequencyPenalty)
	var logprobs bool = false
	this.Logprobs = *NewNullableBool(&logprobs)
	var n int32 = 1
	this.N = *NewNullableInt32(&n)
	var parallelToolCalls bool = true
	this.ParallelToolCalls = *NewNullableBool(&parallelToolCalls)
	var presencePenalty float32 = 0
	this.PresencePenalty = *NewNullableFloat32(&presencePenalty)
	var stream bool = false
	this.Stream = *NewNullableBool(&stream)
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// GetDeferred returns the Deferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetDeferred() bool {
	if o == nil || IsNil(o.Deferred.Get()) {
		var ret bool
		return ret
	}
	return *o.Deferred.Get()
}

// GetDeferredOk returns a tuple with the Deferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetDeferredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deferred.Get(), o.Deferred.IsSet()
}

// HasDeferred returns a boolean if a field has been set.
func (o *ChatRequest) HasDeferred() bool {
	if o != nil && o.Deferred.IsSet() {
		return true
	}

	return false
}

// SetDeferred gets a reference to the given NullableBool and assigns it to the Deferred field.
func (o *ChatRequest) SetDeferred(v bool) {
	o.Deferred.Set(&v)
}

// SetDeferredNil sets the value for Deferred to be an explicit nil
func (o *ChatRequest) SetDeferredNil() {
	o.Deferred.Set(nil)
}

// UnsetDeferred ensures that no value is present for Deferred, not even an explicit nil
func (o *ChatRequest) UnsetDeferred() {
	o.Deferred.Unset()
}

// GetFrequencyPenalty returns the FrequencyPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetFrequencyPenalty() float32 {
	if o == nil || IsNil(o.FrequencyPenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.FrequencyPenalty.Get()
}

// GetFrequencyPenaltyOk returns a tuple with the FrequencyPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetFrequencyPenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrequencyPenalty.Get(), o.FrequencyPenalty.IsSet()
}

// HasFrequencyPenalty returns a boolean if a field has been set.
func (o *ChatRequest) HasFrequencyPenalty() bool {
	if o != nil && o.FrequencyPenalty.IsSet() {
		return true
	}

	return false
}

// SetFrequencyPenalty gets a reference to the given NullableFloat32 and assigns it to the FrequencyPenalty field.
func (o *ChatRequest) SetFrequencyPenalty(v float32) {
	o.FrequencyPenalty.Set(&v)
}

// SetFrequencyPenaltyNil sets the value for FrequencyPenalty to be an explicit nil
func (o *ChatRequest) SetFrequencyPenaltyNil() {
	o.FrequencyPenalty.Set(nil)
}

// UnsetFrequencyPenalty ensures that no value is present for FrequencyPenalty, not even an explicit nil
func (o *ChatRequest) UnsetFrequencyPenalty() {
	o.FrequencyPenalty.Unset()
}

// GetLogitBias returns the LogitBias field value if set, zero value otherwise.
func (o *ChatRequest) GetLogitBias() map[string]float32 {
	if o == nil || IsNil(o.LogitBias) {
		var ret map[string]float32
		return ret
	}
	return o.LogitBias
}

// GetLogitBiasOk returns a tuple with the LogitBias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetLogitBiasOk() (map[string]float32, bool) {
	if o == nil || IsNil(o.LogitBias) {
		return map[string]float32{}, false
	}
	return o.LogitBias, true
}

// HasLogitBias returns a boolean if a field has been set.
func (o *ChatRequest) HasLogitBias() bool {
	if o != nil && !IsNil(o.LogitBias) {
		return true
	}

	return false
}

// SetLogitBias gets a reference to the given map[string]float32 and assigns it to the LogitBias field.
func (o *ChatRequest) SetLogitBias(v map[string]float32) {
	o.LogitBias = v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetLogprobs() bool {
	if o == nil || IsNil(o.Logprobs.Get()) {
		var ret bool
		return ret
	}
	return *o.Logprobs.Get()
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetLogprobsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logprobs.Get(), o.Logprobs.IsSet()
}

// HasLogprobs returns a boolean if a field has been set.
func (o *ChatRequest) HasLogprobs() bool {
	if o != nil && o.Logprobs.IsSet() {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given NullableBool and assigns it to the Logprobs field.
func (o *ChatRequest) SetLogprobs(v bool) {
	o.Logprobs.Set(&v)
}

// SetLogprobsNil sets the value for Logprobs to be an explicit nil
func (o *ChatRequest) SetLogprobsNil() {
	o.Logprobs.Set(nil)
}

// UnsetLogprobs ensures that no value is present for Logprobs, not even an explicit nil
func (o *ChatRequest) UnsetLogprobs() {
	o.Logprobs.Unset()
}

// GetMaxCompletionTokens returns the MaxCompletionTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetMaxCompletionTokens() int32 {
	if o == nil || IsNil(o.MaxCompletionTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCompletionTokens.Get()
}

// GetMaxCompletionTokensOk returns a tuple with the MaxCompletionTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetMaxCompletionTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxCompletionTokens.Get(), o.MaxCompletionTokens.IsSet()
}

// HasMaxCompletionTokens returns a boolean if a field has been set.
func (o *ChatRequest) HasMaxCompletionTokens() bool {
	if o != nil && o.MaxCompletionTokens.IsSet() {
		return true
	}

	return false
}

// SetMaxCompletionTokens gets a reference to the given NullableInt32 and assigns it to the MaxCompletionTokens field.
func (o *ChatRequest) SetMaxCompletionTokens(v int32) {
	o.MaxCompletionTokens.Set(&v)
}

// SetMaxCompletionTokensNil sets the value for MaxCompletionTokens to be an explicit nil
func (o *ChatRequest) SetMaxCompletionTokensNil() {
	o.MaxCompletionTokens.Set(nil)
}

// UnsetMaxCompletionTokens ensures that no value is present for MaxCompletionTokens, not even an explicit nil
func (o *ChatRequest) UnsetMaxCompletionTokens() {
	o.MaxCompletionTokens.Unset()
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxTokens.Get()
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetMaxTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxTokens.Get(), o.MaxTokens.IsSet()
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *ChatRequest) HasMaxTokens() bool {
	if o != nil && o.MaxTokens.IsSet() {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given NullableInt32 and assigns it to the MaxTokens field.
func (o *ChatRequest) SetMaxTokens(v int32) {
	o.MaxTokens.Set(&v)
}

// SetMaxTokensNil sets the value for MaxTokens to be an explicit nil
func (o *ChatRequest) SetMaxTokensNil() {
	o.MaxTokens.Set(nil)
}

// UnsetMaxTokens ensures that no value is present for MaxTokens, not even an explicit nil
func (o *ChatRequest) UnsetMaxTokens() {
	o.MaxTokens.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *ChatRequest) GetMessages() []Message {
	if o == nil || IsNil(o.Messages) {
		var ret []Message
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetMessagesOk() ([]Message, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *ChatRequest) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []Message and assigns it to the Messages field.
func (o *ChatRequest) SetMessages(v []Message) {
	o.Messages = v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ChatRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ChatRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ChatRequest) SetModel(v string) {
	o.Model = &v
}

// GetN returns the N field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetN() int32 {
	if o == nil || IsNil(o.N.Get()) {
		var ret int32
		return ret
	}
	return *o.N.Get()
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetNOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.N.Get(), o.N.IsSet()
}

// HasN returns a boolean if a field has been set.
func (o *ChatRequest) HasN() bool {
	if o != nil && o.N.IsSet() {
		return true
	}

	return false
}

// SetN gets a reference to the given NullableInt32 and assigns it to the N field.
func (o *ChatRequest) SetN(v int32) {
	o.N.Set(&v)
}

// SetNNil sets the value for N to be an explicit nil
func (o *ChatRequest) SetNNil() {
	o.N.Set(nil)
}

// UnsetN ensures that no value is present for N, not even an explicit nil
func (o *ChatRequest) UnsetN() {
	o.N.Unset()
}

// GetParallelToolCalls returns the ParallelToolCalls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetParallelToolCalls() bool {
	if o == nil || IsNil(o.ParallelToolCalls.Get()) {
		var ret bool
		return ret
	}
	return *o.ParallelToolCalls.Get()
}

// GetParallelToolCallsOk returns a tuple with the ParallelToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetParallelToolCallsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParallelToolCalls.Get(), o.ParallelToolCalls.IsSet()
}

// HasParallelToolCalls returns a boolean if a field has been set.
func (o *ChatRequest) HasParallelToolCalls() bool {
	if o != nil && o.ParallelToolCalls.IsSet() {
		return true
	}

	return false
}

// SetParallelToolCalls gets a reference to the given NullableBool and assigns it to the ParallelToolCalls field.
func (o *ChatRequest) SetParallelToolCalls(v bool) {
	o.ParallelToolCalls.Set(&v)
}

// SetParallelToolCallsNil sets the value for ParallelToolCalls to be an explicit nil
func (o *ChatRequest) SetParallelToolCallsNil() {
	o.ParallelToolCalls.Set(nil)
}

// UnsetParallelToolCalls ensures that no value is present for ParallelToolCalls, not even an explicit nil
func (o *ChatRequest) UnsetParallelToolCalls() {
	o.ParallelToolCalls.Unset()
}

// GetPresencePenalty returns the PresencePenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetPresencePenalty() float32 {
	if o == nil || IsNil(o.PresencePenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.PresencePenalty.Get()
}

// GetPresencePenaltyOk returns a tuple with the PresencePenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetPresencePenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PresencePenalty.Get(), o.PresencePenalty.IsSet()
}

// HasPresencePenalty returns a boolean if a field has been set.
func (o *ChatRequest) HasPresencePenalty() bool {
	if o != nil && o.PresencePenalty.IsSet() {
		return true
	}

	return false
}

// SetPresencePenalty gets a reference to the given NullableFloat32 and assigns it to the PresencePenalty field.
func (o *ChatRequest) SetPresencePenalty(v float32) {
	o.PresencePenalty.Set(&v)
}

// SetPresencePenaltyNil sets the value for PresencePenalty to be an explicit nil
func (o *ChatRequest) SetPresencePenaltyNil() {
	o.PresencePenalty.Set(nil)
}

// UnsetPresencePenalty ensures that no value is present for PresencePenalty, not even an explicit nil
func (o *ChatRequest) UnsetPresencePenalty() {
	o.PresencePenalty.Unset()
}

// GetReasoningEffort returns the ReasoningEffort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetReasoningEffort() string {
	if o == nil || IsNil(o.ReasoningEffort.Get()) {
		var ret string
		return ret
	}
	return *o.ReasoningEffort.Get()
}

// GetReasoningEffortOk returns a tuple with the ReasoningEffort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetReasoningEffortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReasoningEffort.Get(), o.ReasoningEffort.IsSet()
}

// HasReasoningEffort returns a boolean if a field has been set.
func (o *ChatRequest) HasReasoningEffort() bool {
	if o != nil && o.ReasoningEffort.IsSet() {
		return true
	}

	return false
}

// SetReasoningEffort gets a reference to the given NullableString and assigns it to the ReasoningEffort field.
func (o *ChatRequest) SetReasoningEffort(v string) {
	o.ReasoningEffort.Set(&v)
}

// SetReasoningEffortNil sets the value for ReasoningEffort to be an explicit nil
func (o *ChatRequest) SetReasoningEffortNil() {
	o.ReasoningEffort.Set(nil)
}

// UnsetReasoningEffort ensures that no value is present for ReasoningEffort, not even an explicit nil
func (o *ChatRequest) UnsetReasoningEffort() {
	o.ReasoningEffort.Unset()
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetResponseFormat() ResponseFormat {
	if o == nil || IsNil(o.ResponseFormat.Get()) {
		var ret ResponseFormat
		return ret
	}
	return *o.ResponseFormat.Get()
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetResponseFormatOk() (*ResponseFormat, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponseFormat.Get(), o.ResponseFormat.IsSet()
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *ChatRequest) HasResponseFormat() bool {
	if o != nil && o.ResponseFormat.IsSet() {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given NullableResponseFormat and assigns it to the ResponseFormat field.
func (o *ChatRequest) SetResponseFormat(v ResponseFormat) {
	o.ResponseFormat.Set(&v)
}

// SetResponseFormatNil sets the value for ResponseFormat to be an explicit nil
func (o *ChatRequest) SetResponseFormatNil() {
	o.ResponseFormat.Set(nil)
}

// UnsetResponseFormat ensures that no value is present for ResponseFormat, not even an explicit nil
func (o *ChatRequest) UnsetResponseFormat() {
	o.ResponseFormat.Unset()
}

// GetSearchParameters returns the SearchParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetSearchParameters() SearchParameters {
	if o == nil || IsNil(o.SearchParameters.Get()) {
		var ret SearchParameters
		return ret
	}
	return *o.SearchParameters.Get()
}

// GetSearchParametersOk returns a tuple with the SearchParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetSearchParametersOk() (*SearchParameters, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchParameters.Get(), o.SearchParameters.IsSet()
}

// HasSearchParameters returns a boolean if a field has been set.
func (o *ChatRequest) HasSearchParameters() bool {
	if o != nil && o.SearchParameters.IsSet() {
		return true
	}

	return false
}

// SetSearchParameters gets a reference to the given NullableSearchParameters and assigns it to the SearchParameters field.
func (o *ChatRequest) SetSearchParameters(v SearchParameters) {
	o.SearchParameters.Set(&v)
}

// SetSearchParametersNil sets the value for SearchParameters to be an explicit nil
func (o *ChatRequest) SetSearchParametersNil() {
	o.SearchParameters.Set(nil)
}

// UnsetSearchParameters ensures that no value is present for SearchParameters, not even an explicit nil
func (o *ChatRequest) UnsetSearchParameters() {
	o.SearchParameters.Unset()
}

// GetSeed returns the Seed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetSeed() int32 {
	if o == nil || IsNil(o.Seed.Get()) {
		var ret int32
		return ret
	}
	return *o.Seed.Get()
}

// GetSeedOk returns a tuple with the Seed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetSeedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seed.Get(), o.Seed.IsSet()
}

// HasSeed returns a boolean if a field has been set.
func (o *ChatRequest) HasSeed() bool {
	if o != nil && o.Seed.IsSet() {
		return true
	}

	return false
}

// SetSeed gets a reference to the given NullableInt32 and assigns it to the Seed field.
func (o *ChatRequest) SetSeed(v int32) {
	o.Seed.Set(&v)
}

// SetSeedNil sets the value for Seed to be an explicit nil
func (o *ChatRequest) SetSeedNil() {
	o.Seed.Set(nil)
}

// UnsetSeed ensures that no value is present for Seed, not even an explicit nil
func (o *ChatRequest) UnsetSeed() {
	o.Seed.Unset()
}

// GetStop returns the Stop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetStop() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetStopOk() ([]string, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *ChatRequest) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given []string and assigns it to the Stop field.
func (o *ChatRequest) SetStop(v []string) {
	o.Stop = v
}

// GetStream returns the Stream field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream.Get()) {
		var ret bool
		return ret
	}
	return *o.Stream.Get()
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetStreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stream.Get(), o.Stream.IsSet()
}

// HasStream returns a boolean if a field has been set.
func (o *ChatRequest) HasStream() bool {
	if o != nil && o.Stream.IsSet() {
		return true
	}

	return false
}

// SetStream gets a reference to the given NullableBool and assigns it to the Stream field.
func (o *ChatRequest) SetStream(v bool) {
	o.Stream.Set(&v)
}

// SetStreamNil sets the value for Stream to be an explicit nil
func (o *ChatRequest) SetStreamNil() {
	o.Stream.Set(nil)
}

// UnsetStream ensures that no value is present for Stream, not even an explicit nil
func (o *ChatRequest) UnsetStream() {
	o.Stream.Unset()
}

// GetStreamOptions returns the StreamOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetStreamOptions() StreamOptions {
	if o == nil || IsNil(o.StreamOptions.Get()) {
		var ret StreamOptions
		return ret
	}
	return *o.StreamOptions.Get()
}

// GetStreamOptionsOk returns a tuple with the StreamOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetStreamOptionsOk() (*StreamOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreamOptions.Get(), o.StreamOptions.IsSet()
}

// HasStreamOptions returns a boolean if a field has been set.
func (o *ChatRequest) HasStreamOptions() bool {
	if o != nil && o.StreamOptions.IsSet() {
		return true
	}

	return false
}

// SetStreamOptions gets a reference to the given NullableStreamOptions and assigns it to the StreamOptions field.
func (o *ChatRequest) SetStreamOptions(v StreamOptions) {
	o.StreamOptions.Set(&v)
}

// SetStreamOptionsNil sets the value for StreamOptions to be an explicit nil
func (o *ChatRequest) SetStreamOptionsNil() {
	o.StreamOptions.Set(nil)
}

// UnsetStreamOptions ensures that no value is present for StreamOptions, not even an explicit nil
func (o *ChatRequest) UnsetStreamOptions() {
	o.StreamOptions.Unset()
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *ChatRequest) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *ChatRequest) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}

// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *ChatRequest) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *ChatRequest) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetToolChoice() ToolChoice {
	if o == nil || IsNil(o.ToolChoice.Get()) {
		var ret ToolChoice
		return ret
	}
	return *o.ToolChoice.Get()
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetToolChoiceOk() (*ToolChoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolChoice.Get(), o.ToolChoice.IsSet()
}

// HasToolChoice returns a boolean if a field has been set.
func (o *ChatRequest) HasToolChoice() bool {
	if o != nil && o.ToolChoice.IsSet() {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given NullableToolChoice and assigns it to the ToolChoice field.
func (o *ChatRequest) SetToolChoice(v ToolChoice) {
	o.ToolChoice.Set(&v)
}

// SetToolChoiceNil sets the value for ToolChoice to be an explicit nil
func (o *ChatRequest) SetToolChoiceNil() {
	o.ToolChoice.Set(nil)
}

// UnsetToolChoice ensures that no value is present for ToolChoice, not even an explicit nil
func (o *ChatRequest) UnsetToolChoice() {
	o.ToolChoice.Unset()
}

// GetTools returns the Tools field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetTools() []Tool {
	if o == nil {
		var ret []Tool
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetToolsOk() ([]Tool, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ChatRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []Tool and assigns it to the Tools field.
func (o *ChatRequest) SetTools(v []Tool) {
	o.Tools = v
}

// GetTopLogprobs returns the TopLogprobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetTopLogprobs() int32 {
	if o == nil || IsNil(o.TopLogprobs.Get()) {
		var ret int32
		return ret
	}
	return *o.TopLogprobs.Get()
}

// GetTopLogprobsOk returns a tuple with the TopLogprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetTopLogprobsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopLogprobs.Get(), o.TopLogprobs.IsSet()
}

// HasTopLogprobs returns a boolean if a field has been set.
func (o *ChatRequest) HasTopLogprobs() bool {
	if o != nil && o.TopLogprobs.IsSet() {
		return true
	}

	return false
}

// SetTopLogprobs gets a reference to the given NullableInt32 and assigns it to the TopLogprobs field.
func (o *ChatRequest) SetTopLogprobs(v int32) {
	o.TopLogprobs.Set(&v)
}

// SetTopLogprobsNil sets the value for TopLogprobs to be an explicit nil
func (o *ChatRequest) SetTopLogprobsNil() {
	o.TopLogprobs.Set(nil)
}

// UnsetTopLogprobs ensures that no value is present for TopLogprobs, not even an explicit nil
func (o *ChatRequest) UnsetTopLogprobs() {
	o.TopLogprobs.Unset()
}

// GetTopP returns the TopP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP.Get()) {
		var ret float32
		return ret
	}
	return *o.TopP.Get()
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetTopPOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopP.Get(), o.TopP.IsSet()
}

// HasTopP returns a boolean if a field has been set.
func (o *ChatRequest) HasTopP() bool {
	if o != nil && o.TopP.IsSet() {
		return true
	}

	return false
}

// SetTopP gets a reference to the given NullableFloat32 and assigns it to the TopP field.
func (o *ChatRequest) SetTopP(v float32) {
	o.TopP.Set(&v)
}

// SetTopPNil sets the value for TopP to be an explicit nil
func (o *ChatRequest) SetTopPNil() {
	o.TopP.Set(nil)
}

// UnsetTopP ensures that no value is present for TopP, not even an explicit nil
func (o *ChatRequest) UnsetTopP() {
	o.TopP.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *ChatRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *ChatRequest) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *ChatRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *ChatRequest) UnsetUser() {
	o.User.Unset()
}

// GetWebSearchOptions returns the WebSearchOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatRequest) GetWebSearchOptions() WebSearchOptions {
	if o == nil || IsNil(o.WebSearchOptions.Get()) {
		var ret WebSearchOptions
		return ret
	}
	return *o.WebSearchOptions.Get()
}

// GetWebSearchOptionsOk returns a tuple with the WebSearchOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatRequest) GetWebSearchOptionsOk() (*WebSearchOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebSearchOptions.Get(), o.WebSearchOptions.IsSet()
}

// HasWebSearchOptions returns a boolean if a field has been set.
func (o *ChatRequest) HasWebSearchOptions() bool {
	if o != nil && o.WebSearchOptions.IsSet() {
		return true
	}

	return false
}

// SetWebSearchOptions gets a reference to the given NullableWebSearchOptions and assigns it to the WebSearchOptions field.
func (o *ChatRequest) SetWebSearchOptions(v WebSearchOptions) {
	o.WebSearchOptions.Set(&v)
}

// SetWebSearchOptionsNil sets the value for WebSearchOptions to be an explicit nil
func (o *ChatRequest) SetWebSearchOptionsNil() {
	o.WebSearchOptions.Set(nil)
}

// UnsetWebSearchOptions ensures that no value is present for WebSearchOptions, not even an explicit nil
func (o *ChatRequest) UnsetWebSearchOptions() {
	o.WebSearchOptions.Unset()
}

func (o ChatRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Deferred.IsSet() {
		toSerialize["deferred"] = o.Deferred.Get()
	}
	if o.FrequencyPenalty.IsSet() {
		toSerialize["frequency_penalty"] = o.FrequencyPenalty.Get()
	}
	if !IsNil(o.LogitBias) {
		toSerialize["logit_bias"] = o.LogitBias
	}
	if o.Logprobs.IsSet() {
		toSerialize["logprobs"] = o.Logprobs.Get()
	}
	if o.MaxCompletionTokens.IsSet() {
		toSerialize["max_completion_tokens"] = o.MaxCompletionTokens.Get()
	}
	if o.MaxTokens.IsSet() {
		toSerialize["max_tokens"] = o.MaxTokens.Get()
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if o.N.IsSet() {
		toSerialize["n"] = o.N.Get()
	}
	if o.ParallelToolCalls.IsSet() {
		toSerialize["parallel_tool_calls"] = o.ParallelToolCalls.Get()
	}
	if o.PresencePenalty.IsSet() {
		toSerialize["presence_penalty"] = o.PresencePenalty.Get()
	}
	if o.ReasoningEffort.IsSet() {
		toSerialize["reasoning_effort"] = o.ReasoningEffort.Get()
	}
	if o.ResponseFormat.IsSet() {
		toSerialize["response_format"] = o.ResponseFormat.Get()
	}
	if o.SearchParameters.IsSet() {
		toSerialize["search_parameters"] = o.SearchParameters.Get()
	}
	if o.Seed.IsSet() {
		toSerialize["seed"] = o.Seed.Get()
	}
	if o.Stop != nil {
		toSerialize["stop"] = o.Stop
	}
	if o.Stream.IsSet() {
		toSerialize["stream"] = o.Stream.Get()
	}
	if o.StreamOptions.IsSet() {
		toSerialize["stream_options"] = o.StreamOptions.Get()
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.ToolChoice.IsSet() {
		toSerialize["tool_choice"] = o.ToolChoice.Get()
	}
	if o.Tools != nil {
		toSerialize["tools"] = o.Tools
	}
	if o.TopLogprobs.IsSet() {
		toSerialize["top_logprobs"] = o.TopLogprobs.Get()
	}
	if o.TopP.IsSet() {
		toSerialize["top_p"] = o.TopP.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.WebSearchOptions.IsSet() {
		toSerialize["web_search_options"] = o.WebSearchOptions.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChatRequest) UnmarshalJSON(data []byte) (err error) {
	varChatRequest := _ChatRequest{}

	err = json.Unmarshal(data, &varChatRequest)

	if err != nil {
		return err
	}

	*o = ChatRequest(varChatRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deferred")
		delete(additionalProperties, "frequency_penalty")
		delete(additionalProperties, "logit_bias")
		delete(additionalProperties, "logprobs")
		delete(additionalProperties, "max_completion_tokens")
		delete(additionalProperties, "max_tokens")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "model")
		delete(additionalProperties, "n")
		delete(additionalProperties, "parallel_tool_calls")
		delete(additionalProperties, "presence_penalty")
		delete(additionalProperties, "reasoning_effort")
		delete(additionalProperties, "response_format")
		delete(additionalProperties, "search_parameters")
		delete(additionalProperties, "seed")
		delete(additionalProperties, "stop")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "stream_options")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "tool_choice")
		delete(additionalProperties, "tools")
		delete(additionalProperties, "top_logprobs")
		delete(additionalProperties, "top_p")
		delete(additionalProperties, "user")
		delete(additionalProperties, "web_search_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChatRequest struct {
	value *ChatRequest
	isSet bool
}

func (v NullableChatRequest) Get() *ChatRequest {
	return v.value
}

func (v *NullableChatRequest) Set(val *ChatRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChatRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChatRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatRequest(val *ChatRequest) *NullableChatRequest {
	return &NullableChatRequest{value: val, isSet: true}
}

func (v NullableChatRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
