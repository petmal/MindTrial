/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Tool - Definition of one tool that the model can call.
type Tool struct {
	ToolOneOf  *ToolOneOf
	ToolOneOf1 *ToolOneOf1
}

// ToolOneOfAsTool is a convenience function that returns ToolOneOf wrapped in Tool
func ToolOneOfAsTool(v *ToolOneOf) Tool {
	return Tool{
		ToolOneOf: v,
	}
}

// ToolOneOf1AsTool is a convenience function that returns ToolOneOf1 wrapped in Tool
func ToolOneOf1AsTool(v *ToolOneOf1) Tool {
	return Tool{
		ToolOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Tool) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ToolOneOf
	err = newStrictDecoder(data).Decode(&dst.ToolOneOf)
	if err == nil {
		jsonToolOneOf, _ := json.Marshal(dst.ToolOneOf)
		if string(jsonToolOneOf) == "{}" { // empty struct
			dst.ToolOneOf = nil
		} else {
			if err = validator.Validate(dst.ToolOneOf); err != nil {
				dst.ToolOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolOneOf = nil
	}

	// try to unmarshal data into ToolOneOf1
	err = newStrictDecoder(data).Decode(&dst.ToolOneOf1)
	if err == nil {
		jsonToolOneOf1, _ := json.Marshal(dst.ToolOneOf1)
		if string(jsonToolOneOf1) == "{}" { // empty struct
			dst.ToolOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ToolOneOf1); err != nil {
				dst.ToolOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ToolOneOf = nil
		dst.ToolOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Tool)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Tool)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Tool) MarshalJSON() ([]byte, error) {
	if src.ToolOneOf != nil {
		return json.Marshal(&src.ToolOneOf)
	}

	if src.ToolOneOf1 != nil {
		return json.Marshal(&src.ToolOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Tool) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ToolOneOf != nil {
		return obj.ToolOneOf
	}

	if obj.ToolOneOf1 != nil {
		return obj.ToolOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Tool) GetActualInstanceValue() interface{} {
	if obj.ToolOneOf != nil {
		return *obj.ToolOneOf
	}

	if obj.ToolOneOf1 != nil {
		return *obj.ToolOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableTool struct {
	value *Tool
	isSet bool
}

func (v NullableTool) Get() *Tool {
	return v.value
}

func (v *NullableTool) Set(val *Tool) {
	v.value = val
	v.isSet = true
}

func (v NullableTool) IsSet() bool {
	return v.isSet
}

func (v *NullableTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTool(val *Tool) *NullableTool {
	return &NullableTool{value: val, isSet: true}
}

func (v NullableTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
