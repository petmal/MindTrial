/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the FunctionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionDefinition{}

// FunctionDefinition Definition of the tool call made available to the model.
type FunctionDefinition struct {
	// A description of the function to indicate to the model when to call it.
	Description NullableString `json:"description,omitempty"`
	// The name of the function. If the model calls the function, this name is used in the response.
	Name       string      `json:"name"`
	Parameters interface{} `json:"parameters"`
	// Not supported. Only maintained for compatibility reasons.
	Strict               NullableBool `json:"strict,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FunctionDefinition FunctionDefinition

// NewFunctionDefinition instantiates a new FunctionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionDefinition(name string, parameters interface{}) *FunctionDefinition {
	this := FunctionDefinition{}
	this.Name = name
	this.Parameters = parameters
	return &this
}

// NewFunctionDefinitionWithDefaults instantiates a new FunctionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionDefinitionWithDefaults() *FunctionDefinition {
	this := FunctionDefinition{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *FunctionDefinition) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *FunctionDefinition) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *FunctionDefinition) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *FunctionDefinition) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value
func (o *FunctionDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FunctionDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FunctionDefinition) SetName(v string) {
	o.Name = v
}

// GetParameters returns the Parameters field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *FunctionDefinition) GetParameters() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionDefinition) GetParametersOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return &o.Parameters, true
}

// SetParameters sets field value
func (o *FunctionDefinition) SetParameters(v interface{}) {
	o.Parameters = v
}

// GetStrict returns the Strict field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionDefinition) GetStrict() bool {
	if o == nil || IsNil(o.Strict.Get()) {
		var ret bool
		return ret
	}
	return *o.Strict.Get()
}

// GetStrictOk returns a tuple with the Strict field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionDefinition) GetStrictOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Strict.Get(), o.Strict.IsSet()
}

// HasStrict returns a boolean if a field has been set.
func (o *FunctionDefinition) HasStrict() bool {
	if o != nil && o.Strict.IsSet() {
		return true
	}

	return false
}

// SetStrict gets a reference to the given NullableBool and assigns it to the Strict field.
func (o *FunctionDefinition) SetStrict(v bool) {
	o.Strict.Set(&v)
}

// SetStrictNil sets the value for Strict to be an explicit nil
func (o *FunctionDefinition) SetStrictNil() {
	o.Strict.Set(nil)
}

// UnsetStrict ensures that no value is present for Strict, not even an explicit nil
func (o *FunctionDefinition) UnsetStrict() {
	o.Strict.Unset()
}

func (o FunctionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["name"] = o.Name
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Strict.IsSet() {
		toSerialize["strict"] = o.Strict.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionDefinition := _FunctionDefinition{}

	err = json.Unmarshal(data, &varFunctionDefinition)

	if err != nil {
		return err
	}

	*o = FunctionDefinition(varFunctionDefinition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parameters")
		delete(additionalProperties, "strict")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionDefinition struct {
	value *FunctionDefinition
	isSet bool
}

func (v NullableFunctionDefinition) Get() *FunctionDefinition {
	return v.value
}

func (v *NullableFunctionDefinition) Set(val *FunctionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionDefinition(val *FunctionDefinition) *NullableFunctionDefinition {
	return &NullableFunctionDefinition{value: val, isSet: true}
}

func (v NullableFunctionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
