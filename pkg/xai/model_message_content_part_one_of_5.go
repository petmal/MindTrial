/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageContentPartOneOf5 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageContentPartOneOf5{}

// MessageContentPartOneOf5 Thinking of the model.
type MessageContentPartOneOf5 struct {
	// Thinking.
	Thinking             string `json:"thinking"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageContentPartOneOf5 MessageContentPartOneOf5

// NewMessageContentPartOneOf5 instantiates a new MessageContentPartOneOf5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageContentPartOneOf5(thinking string, type_ string) *MessageContentPartOneOf5 {
	this := MessageContentPartOneOf5{}
	this.Thinking = thinking
	this.Type = type_
	return &this
}

// NewMessageContentPartOneOf5WithDefaults instantiates a new MessageContentPartOneOf5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageContentPartOneOf5WithDefaults() *MessageContentPartOneOf5 {
	this := MessageContentPartOneOf5{}
	return &this
}

// GetThinking returns the Thinking field value
func (o *MessageContentPartOneOf5) GetThinking() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Thinking
}

// GetThinkingOk returns a tuple with the Thinking field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf5) GetThinkingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thinking, true
}

// SetThinking sets field value
func (o *MessageContentPartOneOf5) SetThinking(v string) {
	o.Thinking = v
}

// GetType returns the Type field value
func (o *MessageContentPartOneOf5) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf5) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageContentPartOneOf5) SetType(v string) {
	o.Type = v
}

func (o MessageContentPartOneOf5) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageContentPartOneOf5) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["thinking"] = o.Thinking
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageContentPartOneOf5) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"thinking",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageContentPartOneOf5 := _MessageContentPartOneOf5{}

	err = json.Unmarshal(data, &varMessageContentPartOneOf5)

	if err != nil {
		return err
	}

	*o = MessageContentPartOneOf5(varMessageContentPartOneOf5)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "thinking")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageContentPartOneOf5 struct {
	value *MessageContentPartOneOf5
	isSet bool
}

func (v NullableMessageContentPartOneOf5) Get() *MessageContentPartOneOf5 {
	return v.value
}

func (v *NullableMessageContentPartOneOf5) Set(val *MessageContentPartOneOf5) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentPartOneOf5) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentPartOneOf5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentPartOneOf5(val *MessageContentPartOneOf5) *NullableMessageContentPartOneOf5 {
	return &NullableMessageContentPartOneOf5{value: val, isSet: true}
}

func (v NullableMessageContentPartOneOf5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentPartOneOf5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
