/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SystemMessageContent - struct for SystemMessageContent
type SystemMessageContent struct {
	ArrayOfSystemMessagePart *[]SystemMessagePart
	String                   *string
}

// []SystemMessagePartAsSystemMessageContent is a convenience function that returns []SystemMessagePart wrapped in SystemMessageContent
func ArrayOfSystemMessagePartAsSystemMessageContent(v *[]SystemMessagePart) SystemMessageContent {
	return SystemMessageContent{
		ArrayOfSystemMessagePart: v,
	}
}

// stringAsSystemMessageContent is a convenience function that returns string wrapped in SystemMessageContent
func StringAsSystemMessageContent(v *string) SystemMessageContent {
	return SystemMessageContent{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SystemMessageContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfSystemMessagePart
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSystemMessagePart)
	if err == nil {
		jsonArrayOfSystemMessagePart, _ := json.Marshal(dst.ArrayOfSystemMessagePart)
		if string(jsonArrayOfSystemMessagePart) == "{}" { // empty struct
			dst.ArrayOfSystemMessagePart = nil
		} else {
			if err = validator.Validate(dst.ArrayOfSystemMessagePart); err != nil {
				dst.ArrayOfSystemMessagePart = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfSystemMessagePart = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfSystemMessagePart = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SystemMessageContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SystemMessageContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SystemMessageContent) MarshalJSON() ([]byte, error) {
	if src.ArrayOfSystemMessagePart != nil {
		return json.Marshal(&src.ArrayOfSystemMessagePart)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SystemMessageContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfSystemMessagePart != nil {
		return obj.ArrayOfSystemMessagePart
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SystemMessageContent) GetActualInstanceValue() interface{} {
	if obj.ArrayOfSystemMessagePart != nil {
		return *obj.ArrayOfSystemMessagePart
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableSystemMessageContent struct {
	value *SystemMessageContent
	isSet bool
}

func (v NullableSystemMessageContent) Get() *SystemMessageContent {
	return v.value
}

func (v *NullableSystemMessageContent) Set(val *SystemMessageContent) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemMessageContent) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemMessageContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemMessageContent(val *SystemMessageContent) *NullableSystemMessageContent {
	return &NullableSystemMessageContent{value: val, isSet: true}
}

func (v NullableSystemMessageContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemMessageContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
