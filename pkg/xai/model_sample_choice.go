/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the SampleChoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SampleChoice{}

// SampleChoice struct for SampleChoice
type SampleChoice struct {
	// Finish reason. `\"stop\"` means the inference has reached a model-defined or user-supplied stop sequence in `stop`. `\"length\"` means the inference result has reached models' maximum allowed token length or user defined value in `max_tokens`. `\"end_turn\"` or `null` in streaming mode when the chunk is not the last.
	FinishReason string `json:"finish_reason"`
	// Index of the choice.
	Index int32 `json:"index"`
	// Text response.
	Text                 string `json:"text"`
	AdditionalProperties map[string]interface{}
}

type _SampleChoice SampleChoice

// NewSampleChoice instantiates a new SampleChoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSampleChoice(finishReason string, index int32, text string) *SampleChoice {
	this := SampleChoice{}
	this.FinishReason = finishReason
	this.Index = index
	this.Text = text
	return &this
}

// NewSampleChoiceWithDefaults instantiates a new SampleChoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampleChoiceWithDefaults() *SampleChoice {
	this := SampleChoice{}
	return &this
}

// GetFinishReason returns the FinishReason field value
func (o *SampleChoice) GetFinishReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FinishReason
}

// GetFinishReasonOk returns a tuple with the FinishReason field value
// and a boolean to check if the value has been set.
func (o *SampleChoice) GetFinishReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinishReason, true
}

// SetFinishReason sets field value
func (o *SampleChoice) SetFinishReason(v string) {
	o.FinishReason = v
}

// GetIndex returns the Index field value
func (o *SampleChoice) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *SampleChoice) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *SampleChoice) SetIndex(v int32) {
	o.Index = v
}

// GetText returns the Text field value
func (o *SampleChoice) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SampleChoice) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SampleChoice) SetText(v string) {
	o.Text = v
}

func (o SampleChoice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SampleChoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["finish_reason"] = o.FinishReason
	toSerialize["index"] = o.Index
	toSerialize["text"] = o.Text

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SampleChoice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"finish_reason",
		"index",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSampleChoice := _SampleChoice{}

	err = json.Unmarshal(data, &varSampleChoice)

	if err != nil {
		return err
	}

	*o = SampleChoice(varSampleChoice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "finish_reason")
		delete(additionalProperties, "index")
		delete(additionalProperties, "text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSampleChoice struct {
	value *SampleChoice
	isSet bool
}

func (v NullableSampleChoice) Get() *SampleChoice {
	return v.value
}

func (v *NullableSampleChoice) Set(val *SampleChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleChoice(val *SampleChoice) *NullableSampleChoice {
	return &NullableSampleChoice{value: val, isSet: true}
}

func (v NullableSampleChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
