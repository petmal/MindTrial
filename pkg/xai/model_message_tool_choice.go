/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// MessageToolChoice - Tool choice option.
type MessageToolChoice struct {
	MessageToolChoiceOneOf  *MessageToolChoiceOneOf
	MessageToolChoiceOneOf1 *MessageToolChoiceOneOf1
	MessageToolChoiceOneOf2 *MessageToolChoiceOneOf2
}

// MessageToolChoiceOneOfAsMessageToolChoice is a convenience function that returns MessageToolChoiceOneOf wrapped in MessageToolChoice
func MessageToolChoiceOneOfAsMessageToolChoice(v *MessageToolChoiceOneOf) MessageToolChoice {
	return MessageToolChoice{
		MessageToolChoiceOneOf: v,
	}
}

// MessageToolChoiceOneOf1AsMessageToolChoice is a convenience function that returns MessageToolChoiceOneOf1 wrapped in MessageToolChoice
func MessageToolChoiceOneOf1AsMessageToolChoice(v *MessageToolChoiceOneOf1) MessageToolChoice {
	return MessageToolChoice{
		MessageToolChoiceOneOf1: v,
	}
}

// MessageToolChoiceOneOf2AsMessageToolChoice is a convenience function that returns MessageToolChoiceOneOf2 wrapped in MessageToolChoice
func MessageToolChoiceOneOf2AsMessageToolChoice(v *MessageToolChoiceOneOf2) MessageToolChoice {
	return MessageToolChoice{
		MessageToolChoiceOneOf2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MessageToolChoice) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageToolChoiceOneOf
	err = newStrictDecoder(data).Decode(&dst.MessageToolChoiceOneOf)
	if err == nil {
		jsonMessageToolChoiceOneOf, _ := json.Marshal(dst.MessageToolChoiceOneOf)
		if string(jsonMessageToolChoiceOneOf) == "{}" { // empty struct
			dst.MessageToolChoiceOneOf = nil
		} else {
			if err = validator.Validate(dst.MessageToolChoiceOneOf); err != nil {
				dst.MessageToolChoiceOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageToolChoiceOneOf = nil
	}

	// try to unmarshal data into MessageToolChoiceOneOf1
	err = newStrictDecoder(data).Decode(&dst.MessageToolChoiceOneOf1)
	if err == nil {
		jsonMessageToolChoiceOneOf1, _ := json.Marshal(dst.MessageToolChoiceOneOf1)
		if string(jsonMessageToolChoiceOneOf1) == "{}" { // empty struct
			dst.MessageToolChoiceOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MessageToolChoiceOneOf1); err != nil {
				dst.MessageToolChoiceOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageToolChoiceOneOf1 = nil
	}

	// try to unmarshal data into MessageToolChoiceOneOf2
	err = newStrictDecoder(data).Decode(&dst.MessageToolChoiceOneOf2)
	if err == nil {
		jsonMessageToolChoiceOneOf2, _ := json.Marshal(dst.MessageToolChoiceOneOf2)
		if string(jsonMessageToolChoiceOneOf2) == "{}" { // empty struct
			dst.MessageToolChoiceOneOf2 = nil
		} else {
			if err = validator.Validate(dst.MessageToolChoiceOneOf2); err != nil {
				dst.MessageToolChoiceOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageToolChoiceOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageToolChoiceOneOf = nil
		dst.MessageToolChoiceOneOf1 = nil
		dst.MessageToolChoiceOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MessageToolChoice)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MessageToolChoice)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MessageToolChoice) MarshalJSON() ([]byte, error) {
	if src.MessageToolChoiceOneOf != nil {
		return json.Marshal(&src.MessageToolChoiceOneOf)
	}

	if src.MessageToolChoiceOneOf1 != nil {
		return json.Marshal(&src.MessageToolChoiceOneOf1)
	}

	if src.MessageToolChoiceOneOf2 != nil {
		return json.Marshal(&src.MessageToolChoiceOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MessageToolChoice) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageToolChoiceOneOf != nil {
		return obj.MessageToolChoiceOneOf
	}

	if obj.MessageToolChoiceOneOf1 != nil {
		return obj.MessageToolChoiceOneOf1
	}

	if obj.MessageToolChoiceOneOf2 != nil {
		return obj.MessageToolChoiceOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj MessageToolChoice) GetActualInstanceValue() interface{} {
	if obj.MessageToolChoiceOneOf != nil {
		return *obj.MessageToolChoiceOneOf
	}

	if obj.MessageToolChoiceOneOf1 != nil {
		return *obj.MessageToolChoiceOneOf1
	}

	if obj.MessageToolChoiceOneOf2 != nil {
		return *obj.MessageToolChoiceOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableMessageToolChoice struct {
	value *MessageToolChoice
	isSet bool
}

func (v NullableMessageToolChoice) Get() *MessageToolChoice {
	return v.value
}

func (v *NullableMessageToolChoice) Set(val *MessageToolChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageToolChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageToolChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageToolChoice(val *MessageToolChoice) *NullableMessageToolChoice {
	return &NullableMessageToolChoice{value: val, isSet: true}
}

func (v NullableMessageToolChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageToolChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
