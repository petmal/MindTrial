/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ChatResponseChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatResponseChunk{}

// ChatResponseChunk struct for ChatResponseChunk
type ChatResponseChunk struct {
	// A list of response choices from the model. The length corresponds to the `n` in request body (default to 1).
	Choices []ChoiceChunk `json:"choices"`
	// List of all the external pages used by the model to answer. Only populated for the last chunk.
	Citations []string `json:"citations,omitempty"`
	// The chat completion creation time in Unix timestamp.
	Created int64 `json:"created"`
	// Debug output. Only available to trusted testers.
	DebugOutput NullableDebugOutput `json:"debug_output,omitempty"`
	// A unique ID for the chat response chunk.
	Id string `json:"id"`
	// The model ID used to create chat completion.
	Model string `json:"model"`
	// The object type, which is always `\"chat.completion.chunk\"`.
	Object string `json:"object"`
	// System fingerprint, used to indicate xAI system configuration changes.
	SystemFingerprint NullableString `json:"system_fingerprint,omitempty"`
	// Token usage information.
	Usage                NullableUsage `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChatResponseChunk ChatResponseChunk

// NewChatResponseChunk instantiates a new ChatResponseChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatResponseChunk(choices []ChoiceChunk, created int64, id string, model string, object string) *ChatResponseChunk {
	this := ChatResponseChunk{}
	this.Choices = choices
	this.Created = created
	this.Id = id
	this.Model = model
	this.Object = object
	return &this
}

// NewChatResponseChunkWithDefaults instantiates a new ChatResponseChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatResponseChunkWithDefaults() *ChatResponseChunk {
	this := ChatResponseChunk{}
	return &this
}

// GetChoices returns the Choices field value
func (o *ChatResponseChunk) GetChoices() []ChoiceChunk {
	if o == nil {
		var ret []ChoiceChunk
		return ret
	}

	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value
// and a boolean to check if the value has been set.
func (o *ChatResponseChunk) GetChoicesOk() ([]ChoiceChunk, bool) {
	if o == nil {
		return nil, false
	}
	return o.Choices, true
}

// SetChoices sets field value
func (o *ChatResponseChunk) SetChoices(v []ChoiceChunk) {
	o.Choices = v
}

// GetCitations returns the Citations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatResponseChunk) GetCitations() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Citations
}

// GetCitationsOk returns a tuple with the Citations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatResponseChunk) GetCitationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Citations) {
		return nil, false
	}
	return o.Citations, true
}

// HasCitations returns a boolean if a field has been set.
func (o *ChatResponseChunk) HasCitations() bool {
	if o != nil && !IsNil(o.Citations) {
		return true
	}

	return false
}

// SetCitations gets a reference to the given []string and assigns it to the Citations field.
func (o *ChatResponseChunk) SetCitations(v []string) {
	o.Citations = v
}

// GetCreated returns the Created field value
func (o *ChatResponseChunk) GetCreated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ChatResponseChunk) GetCreatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ChatResponseChunk) SetCreated(v int64) {
	o.Created = v
}

// GetDebugOutput returns the DebugOutput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatResponseChunk) GetDebugOutput() DebugOutput {
	if o == nil || IsNil(o.DebugOutput.Get()) {
		var ret DebugOutput
		return ret
	}
	return *o.DebugOutput.Get()
}

// GetDebugOutputOk returns a tuple with the DebugOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatResponseChunk) GetDebugOutputOk() (*DebugOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.DebugOutput.Get(), o.DebugOutput.IsSet()
}

// HasDebugOutput returns a boolean if a field has been set.
func (o *ChatResponseChunk) HasDebugOutput() bool {
	if o != nil && o.DebugOutput.IsSet() {
		return true
	}

	return false
}

// SetDebugOutput gets a reference to the given NullableDebugOutput and assigns it to the DebugOutput field.
func (o *ChatResponseChunk) SetDebugOutput(v DebugOutput) {
	o.DebugOutput.Set(&v)
}

// SetDebugOutputNil sets the value for DebugOutput to be an explicit nil
func (o *ChatResponseChunk) SetDebugOutputNil() {
	o.DebugOutput.Set(nil)
}

// UnsetDebugOutput ensures that no value is present for DebugOutput, not even an explicit nil
func (o *ChatResponseChunk) UnsetDebugOutput() {
	o.DebugOutput.Unset()
}

// GetId returns the Id field value
func (o *ChatResponseChunk) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChatResponseChunk) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChatResponseChunk) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *ChatResponseChunk) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ChatResponseChunk) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ChatResponseChunk) SetModel(v string) {
	o.Model = v
}

// GetObject returns the Object field value
func (o *ChatResponseChunk) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ChatResponseChunk) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ChatResponseChunk) SetObject(v string) {
	o.Object = v
}

// GetSystemFingerprint returns the SystemFingerprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatResponseChunk) GetSystemFingerprint() string {
	if o == nil || IsNil(o.SystemFingerprint.Get()) {
		var ret string
		return ret
	}
	return *o.SystemFingerprint.Get()
}

// GetSystemFingerprintOk returns a tuple with the SystemFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatResponseChunk) GetSystemFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemFingerprint.Get(), o.SystemFingerprint.IsSet()
}

// HasSystemFingerprint returns a boolean if a field has been set.
func (o *ChatResponseChunk) HasSystemFingerprint() bool {
	if o != nil && o.SystemFingerprint.IsSet() {
		return true
	}

	return false
}

// SetSystemFingerprint gets a reference to the given NullableString and assigns it to the SystemFingerprint field.
func (o *ChatResponseChunk) SetSystemFingerprint(v string) {
	o.SystemFingerprint.Set(&v)
}

// SetSystemFingerprintNil sets the value for SystemFingerprint to be an explicit nil
func (o *ChatResponseChunk) SetSystemFingerprintNil() {
	o.SystemFingerprint.Set(nil)
}

// UnsetSystemFingerprint ensures that no value is present for SystemFingerprint, not even an explicit nil
func (o *ChatResponseChunk) UnsetSystemFingerprint() {
	o.SystemFingerprint.Unset()
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatResponseChunk) GetUsage() Usage {
	if o == nil || IsNil(o.Usage.Get()) {
		var ret Usage
		return ret
	}
	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatResponseChunk) GetUsageOk() (*Usage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// HasUsage returns a boolean if a field has been set.
func (o *ChatResponseChunk) HasUsage() bool {
	if o != nil && o.Usage.IsSet() {
		return true
	}

	return false
}

// SetUsage gets a reference to the given NullableUsage and assigns it to the Usage field.
func (o *ChatResponseChunk) SetUsage(v Usage) {
	o.Usage.Set(&v)
}

// SetUsageNil sets the value for Usage to be an explicit nil
func (o *ChatResponseChunk) SetUsageNil() {
	o.Usage.Set(nil)
}

// UnsetUsage ensures that no value is present for Usage, not even an explicit nil
func (o *ChatResponseChunk) UnsetUsage() {
	o.Usage.Unset()
}

func (o ChatResponseChunk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatResponseChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choices"] = o.Choices
	if o.Citations != nil {
		toSerialize["citations"] = o.Citations
	}
	toSerialize["created"] = o.Created
	if o.DebugOutput.IsSet() {
		toSerialize["debug_output"] = o.DebugOutput.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	toSerialize["object"] = o.Object
	if o.SystemFingerprint.IsSet() {
		toSerialize["system_fingerprint"] = o.SystemFingerprint.Get()
	}
	if o.Usage.IsSet() {
		toSerialize["usage"] = o.Usage.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChatResponseChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"choices",
		"created",
		"id",
		"model",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatResponseChunk := _ChatResponseChunk{}

	err = json.Unmarshal(data, &varChatResponseChunk)

	if err != nil {
		return err
	}

	*o = ChatResponseChunk(varChatResponseChunk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "choices")
		delete(additionalProperties, "citations")
		delete(additionalProperties, "created")
		delete(additionalProperties, "debug_output")
		delete(additionalProperties, "id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "object")
		delete(additionalProperties, "system_fingerprint")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChatResponseChunk struct {
	value *ChatResponseChunk
	isSet bool
}

func (v NullableChatResponseChunk) Get() *ChatResponseChunk {
	return v.value
}

func (v *NullableChatResponseChunk) Set(val *ChatResponseChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableChatResponseChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableChatResponseChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatResponseChunk(val *ChatResponseChunk) *NullableChatResponseChunk {
	return &NullableChatResponseChunk{value: val, isSet: true}
}

func (v NullableChatResponseChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatResponseChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
