/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Content - Content of each chat message.
type Content struct {
	ArrayOfContentPart *[]ContentPart
	String             *string
}

// []ContentPartAsContent is a convenience function that returns []ContentPart wrapped in Content
func ArrayOfContentPartAsContent(v *[]ContentPart) Content {
	return Content{
		ArrayOfContentPart: v,
	}
}

// stringAsContent is a convenience function that returns string wrapped in Content
func StringAsContent(v *string) Content {
	return Content{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Content) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfContentPart
	err = newStrictDecoder(data).Decode(&dst.ArrayOfContentPart)
	if err == nil {
		jsonArrayOfContentPart, _ := json.Marshal(dst.ArrayOfContentPart)
		if string(jsonArrayOfContentPart) == "{}" { // empty struct
			dst.ArrayOfContentPart = nil
		} else {
			if err = validator.Validate(dst.ArrayOfContentPart); err != nil {
				dst.ArrayOfContentPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfContentPart = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfContentPart = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Content)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Content)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Content) MarshalJSON() ([]byte, error) {
	if src.ArrayOfContentPart != nil {
		return json.Marshal(&src.ArrayOfContentPart)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Content) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfContentPart != nil {
		return obj.ArrayOfContentPart
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Content) GetActualInstanceValue() interface{} {
	if obj.ArrayOfContentPart != nil {
		return *obj.ArrayOfContentPart
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableContent struct {
	value *Content
	isSet bool
}

func (v NullableContent) Get() *Content {
	return v.value
}

func (v *NullableContent) Set(val *Content) {
	v.value = val
	v.isSet = true
}

func (v NullableContent) IsSet() bool {
	return v.isSet
}

func (v *NullableContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContent(val *Content) *NullableContent {
	return &NullableContent{value: val, isSet: true}
}

func (v NullableContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
