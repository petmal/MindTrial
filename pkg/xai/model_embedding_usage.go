/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbeddingUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingUsage{}

// EmbeddingUsage struct for EmbeddingUsage
type EmbeddingUsage struct {
	// Prompt token used.
	PromptTokens int32 `json:"prompt_tokens"`
	// Total token used.
	TotalTokens          int32 `json:"total_tokens"`
	AdditionalProperties map[string]interface{}
}

type _EmbeddingUsage EmbeddingUsage

// NewEmbeddingUsage instantiates a new EmbeddingUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingUsage(promptTokens int32, totalTokens int32) *EmbeddingUsage {
	this := EmbeddingUsage{}
	this.PromptTokens = promptTokens
	this.TotalTokens = totalTokens
	return &this
}

// NewEmbeddingUsageWithDefaults instantiates a new EmbeddingUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingUsageWithDefaults() *EmbeddingUsage {
	this := EmbeddingUsage{}
	return &this
}

// GetPromptTokens returns the PromptTokens field value
func (o *EmbeddingUsage) GetPromptTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PromptTokens
}

// GetPromptTokensOk returns a tuple with the PromptTokens field value
// and a boolean to check if the value has been set.
func (o *EmbeddingUsage) GetPromptTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromptTokens, true
}

// SetPromptTokens sets field value
func (o *EmbeddingUsage) SetPromptTokens(v int32) {
	o.PromptTokens = v
}

// GetTotalTokens returns the TotalTokens field value
func (o *EmbeddingUsage) GetTotalTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalTokens
}

// GetTotalTokensOk returns a tuple with the TotalTokens field value
// and a boolean to check if the value has been set.
func (o *EmbeddingUsage) GetTotalTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTokens, true
}

// SetTotalTokens sets field value
func (o *EmbeddingUsage) SetTotalTokens(v int32) {
	o.TotalTokens = v
}

func (o EmbeddingUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prompt_tokens"] = o.PromptTokens
	toSerialize["total_tokens"] = o.TotalTokens

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbeddingUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prompt_tokens",
		"total_tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingUsage := _EmbeddingUsage{}

	err = json.Unmarshal(data, &varEmbeddingUsage)

	if err != nil {
		return err
	}

	*o = EmbeddingUsage(varEmbeddingUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prompt_tokens")
		delete(additionalProperties, "total_tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbeddingUsage struct {
	value *EmbeddingUsage
	isSet bool
}

func (v NullableEmbeddingUsage) Get() *EmbeddingUsage {
	return v.value
}

func (v *NullableEmbeddingUsage) Set(val *EmbeddingUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingUsage(val *EmbeddingUsage) *NullableEmbeddingUsage {
	return &NullableEmbeddingUsage{value: val, isSet: true}
}

func (v NullableEmbeddingUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
