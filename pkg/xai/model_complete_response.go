/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the CompleteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteResponse{}

// CompleteResponse (Legacy) Anthropic compatible complete response on `/v1/complete` endpoint.
type CompleteResponse struct {
	// The completion content up to and excluding stop sequences.
	Completion string `json:"completion"`
	// ID of the completion response.
	Id string `json:"id"`
	// The model that handled the request.
	Model string `json:"model"`
	// The reason to stop completion. `\"stop_sequence\"` means the inference has reached a model-defined or user-supplied stop sequence in `stop`. `\"length\"` means the inference result has reached models' maximum allowed token length or user defined value in `max_tokens`. `\"end_turn\"` or `null` in streaming mode when the chunk is not the last.
	StopReason NullableString `json:"stop_reason,omitempty"`
	// Completion response object type. This is always `\"completion\"`.
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _CompleteResponse CompleteResponse

// NewCompleteResponse instantiates a new CompleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteResponse(completion string, id string, model string, type_ string) *CompleteResponse {
	this := CompleteResponse{}
	this.Completion = completion
	this.Id = id
	this.Model = model
	this.Type = type_
	return &this
}

// NewCompleteResponseWithDefaults instantiates a new CompleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteResponseWithDefaults() *CompleteResponse {
	this := CompleteResponse{}
	return &this
}

// GetCompletion returns the Completion field value
func (o *CompleteResponse) GetCompletion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Completion
}

// GetCompletionOk returns a tuple with the Completion field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetCompletionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completion, true
}

// SetCompletion sets field value
func (o *CompleteResponse) SetCompletion(v string) {
	o.Completion = v
}

// GetId returns the Id field value
func (o *CompleteResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CompleteResponse) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *CompleteResponse) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *CompleteResponse) SetModel(v string) {
	o.Model = v
}

// GetStopReason returns the StopReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteResponse) GetStopReason() string {
	if o == nil || IsNil(o.StopReason.Get()) {
		var ret string
		return ret
	}
	return *o.StopReason.Get()
}

// GetStopReasonOk returns a tuple with the StopReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteResponse) GetStopReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StopReason.Get(), o.StopReason.IsSet()
}

// HasStopReason returns a boolean if a field has been set.
func (o *CompleteResponse) HasStopReason() bool {
	if o != nil && o.StopReason.IsSet() {
		return true
	}

	return false
}

// SetStopReason gets a reference to the given NullableString and assigns it to the StopReason field.
func (o *CompleteResponse) SetStopReason(v string) {
	o.StopReason.Set(&v)
}

// SetStopReasonNil sets the value for StopReason to be an explicit nil
func (o *CompleteResponse) SetStopReasonNil() {
	o.StopReason.Set(nil)
}

// UnsetStopReason ensures that no value is present for StopReason, not even an explicit nil
func (o *CompleteResponse) UnsetStopReason() {
	o.StopReason.Unset()
}

// GetType returns the Type field value
func (o *CompleteResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CompleteResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CompleteResponse) SetType(v string) {
	o.Type = v
}

func (o CompleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["completion"] = o.Completion
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	if o.StopReason.IsSet() {
		toSerialize["stop_reason"] = o.StopReason.Get()
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompleteResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"completion",
		"id",
		"model",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteResponse := _CompleteResponse{}

	err = json.Unmarshal(data, &varCompleteResponse)

	if err != nil {
		return err
	}

	*o = CompleteResponse(varCompleteResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "completion")
		delete(additionalProperties, "id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "stop_reason")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompleteResponse struct {
	value *CompleteResponse
	isSet bool
}

func (v NullableCompleteResponse) Get() *CompleteResponse {
	return v.value
}

func (v *NullableCompleteResponse) Set(val *CompleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteResponse(val *CompleteResponse) *NullableCompleteResponse {
	return &NullableCompleteResponse{value: val, isSet: true}
}

func (v NullableCompleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
