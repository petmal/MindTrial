/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolCall{}

// ToolCall struct for ToolCall
type ToolCall struct {
	// Function to call for the tool call.
	Function Function `json:"function"`
	// A unique ID of the tool call generated by xAI. After performing tool call's function, user provides this ID with tool call's result in the subsequent request to xAI. xAI can then match the tool call result sent with tool call request.
	Id string `json:"id"`
	// Index of the tool call.
	Index NullableInt32 `json:"index,omitempty"`
	// Type of tool call, should always be `\"function\"`
	Type                 NullableString `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ToolCall ToolCall

// NewToolCall instantiates a new ToolCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolCall(function Function, id string) *ToolCall {
	this := ToolCall{}
	this.Function = function
	this.Id = id
	return &this
}

// NewToolCallWithDefaults instantiates a new ToolCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolCallWithDefaults() *ToolCall {
	this := ToolCall{}
	return &this
}

// GetFunction returns the Function field value
func (o *ToolCall) GetFunction() Function {
	if o == nil {
		var ret Function
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetFunctionOk() (*Function, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *ToolCall) SetFunction(v Function) {
	o.Function = v
}

// GetId returns the Id field value
func (o *ToolCall) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ToolCall) SetId(v string) {
	o.Id = v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolCall) GetIndex() int32 {
	if o == nil || IsNil(o.Index.Get()) {
		var ret int32
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolCall) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *ToolCall) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableInt32 and assigns it to the Index field.
func (o *ToolCall) SetIndex(v int32) {
	o.Index.Set(&v)
}

// SetIndexNil sets the value for Index to be an explicit nil
func (o *ToolCall) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *ToolCall) UnsetIndex() {
	o.Index.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolCall) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolCall) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ToolCall) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ToolCall) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *ToolCall) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ToolCall) UnsetType() {
	o.Type.Unset()
}

func (o ToolCall) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["function"] = o.Function
	toSerialize["id"] = o.Id
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolCall := _ToolCall{}

	err = json.Unmarshal(data, &varToolCall)

	if err != nil {
		return err
	}

	*o = ToolCall(varToolCall)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "function")
		delete(additionalProperties, "id")
		delete(additionalProperties, "index")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolCall struct {
	value *ToolCall
	isSet bool
}

func (v NullableToolCall) Get() *ToolCall {
	return v.value
}

func (v *NullableToolCall) Set(val *ToolCall) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCall) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCall(val *ToolCall) *NullableToolCall {
	return &NullableToolCall{value: val, isSet: true}
}

func (v NullableToolCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
