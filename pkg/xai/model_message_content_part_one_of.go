/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the MessageContentPartOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageContentPartOneOf{}

// MessageContentPartOneOf Text prompt message content part.
type MessageContentPartOneOf struct {
	CacheControl interface{} `json:"cache_control,omitempty"`
	// Text prompt.
	Text                 string `json:"text"`
	Type                 string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _MessageContentPartOneOf MessageContentPartOneOf

// NewMessageContentPartOneOf instantiates a new MessageContentPartOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageContentPartOneOf(text string, type_ string) *MessageContentPartOneOf {
	this := MessageContentPartOneOf{}
	this.Text = text
	this.Type = type_
	return &this
}

// NewMessageContentPartOneOfWithDefaults instantiates a new MessageContentPartOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageContentPartOneOfWithDefaults() *MessageContentPartOneOf {
	this := MessageContentPartOneOf{}
	return &this
}

// GetCacheControl returns the CacheControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageContentPartOneOf) GetCacheControl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CacheControl
}

// GetCacheControlOk returns a tuple with the CacheControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageContentPartOneOf) GetCacheControlOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CacheControl) {
		return nil, false
	}
	return &o.CacheControl, true
}

// HasCacheControl returns a boolean if a field has been set.
func (o *MessageContentPartOneOf) HasCacheControl() bool {
	if o != nil && !IsNil(o.CacheControl) {
		return true
	}

	return false
}

// SetCacheControl gets a reference to the given interface{} and assigns it to the CacheControl field.
func (o *MessageContentPartOneOf) SetCacheControl(v interface{}) {
	o.CacheControl = v
}

// GetText returns the Text field value
func (o *MessageContentPartOneOf) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MessageContentPartOneOf) SetText(v string) {
	o.Text = v
}

// GetType returns the Type field value
func (o *MessageContentPartOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageContentPartOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageContentPartOneOf) SetType(v string) {
	o.Type = v
}

func (o MessageContentPartOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageContentPartOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CacheControl != nil {
		toSerialize["cache_control"] = o.CacheControl
	}
	toSerialize["text"] = o.Text
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageContentPartOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageContentPartOneOf := _MessageContentPartOneOf{}

	err = json.Unmarshal(data, &varMessageContentPartOneOf)

	if err != nil {
		return err
	}

	*o = MessageContentPartOneOf(varMessageContentPartOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cache_control")
		delete(additionalProperties, "text")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageContentPartOneOf struct {
	value *MessageContentPartOneOf
	isSet bool
}

func (v NullableMessageContentPartOneOf) Get() *MessageContentPartOneOf {
	return v.value
}

func (v *NullableMessageContentPartOneOf) Set(val *MessageContentPartOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentPartOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentPartOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentPartOneOf(val *MessageContentPartOneOf) *NullableMessageContentPartOneOf {
	return &NullableMessageContentPartOneOf{value: val, isSet: true}
}

func (v NullableMessageContentPartOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentPartOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
