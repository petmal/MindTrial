/*
xAI's REST API

REST API for xAI compatible with other providers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xai

import (
	"encoding/json"
	"fmt"
)

// checks if the StartDeferredChatResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartDeferredChatResponse{}

// StartDeferredChatResponse struct for StartDeferredChatResponse
type StartDeferredChatResponse struct {
	// A unique request ID for the chat response.
	RequestId            string `json:"request_id"`
	AdditionalProperties map[string]interface{}
}

type _StartDeferredChatResponse StartDeferredChatResponse

// NewStartDeferredChatResponse instantiates a new StartDeferredChatResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartDeferredChatResponse(requestId string) *StartDeferredChatResponse {
	this := StartDeferredChatResponse{}
	this.RequestId = requestId
	return &this
}

// NewStartDeferredChatResponseWithDefaults instantiates a new StartDeferredChatResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartDeferredChatResponseWithDefaults() *StartDeferredChatResponse {
	this := StartDeferredChatResponse{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *StartDeferredChatResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *StartDeferredChatResponse) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *StartDeferredChatResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o StartDeferredChatResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartDeferredChatResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["request_id"] = o.RequestId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StartDeferredChatResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"request_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStartDeferredChatResponse := _StartDeferredChatResponse{}

	err = json.Unmarshal(data, &varStartDeferredChatResponse)

	if err != nil {
		return err
	}

	*o = StartDeferredChatResponse(varStartDeferredChatResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStartDeferredChatResponse struct {
	value *StartDeferredChatResponse
	isSet bool
}

func (v NullableStartDeferredChatResponse) Get() *StartDeferredChatResponse {
	return v.value
}

func (v *NullableStartDeferredChatResponse) Set(val *StartDeferredChatResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStartDeferredChatResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStartDeferredChatResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartDeferredChatResponse(val *StartDeferredChatResponse) *NullableStartDeferredChatResponse {
	return &NullableStartDeferredChatResponse{value: val, isSet: true}
}

func (v NullableStartDeferredChatResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartDeferredChatResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
