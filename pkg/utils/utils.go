// Copyright (C) 2025 Petr Malik
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at <https://mozilla.org/MPL/2.0/>.

// Package utils provides general-purpose utilities for JSON handling and panic recovery.
package utils

import (
	"encoding/json"
	"errors"
	"fmt"
	"regexp"

	"github.com/kaptinlin/jsonrepair"
)

var (
	// ErrRecoveredPanic is returned when a panic is recovered and converted to an error.
	ErrRecoveredPanic = errors.New("recovered panic")

	// ErrCouldNotRepairJSON is returned when malformed JSON cannot be automatically fixed.
	ErrCouldNotRepairJSON = errors.New("malformed JSON could not be repaired")

	jsonMarkdownMatcher = regexp.MustCompile("(?s)```json\\s*(\\{.*?\\})\\s*```")
)

// NoPanic executes the provided function and recovers from any panic by converting it to error if that occurs.
func NoPanic(fn func() error) (err error) {
	defer func() {
		if p := recover(); p != nil {
			err = fmt.Errorf("%w: %v", ErrRecoveredPanic, p)
		}
	}()
	return fn()
}

// RepairTextJSON attempts to repair common issues with plain-text JSON generated by LLMs.
// If the input is already valid JSON, it is returned as-is.
func RepairTextJSON(content string) (string, error) {
	if json.Valid([]byte(content)) {
		return content, nil
	}
	repaired, err := jsonrepair.JSONRepair(JSONFromMarkdown(content))
	if err != nil {
		return content, fmt.Errorf("%w: %v", ErrCouldNotRepairJSON, err)
	}

	return repaired, nil
}

// JSONFromMarkdown extracts JSON content from a given Markdown string.
// If a JSON block is found, it returns the JSON content as a string.
// If no JSON block is found, it returns the original content.
func JSONFromMarkdown(content string) string {
	if found := jsonMarkdownMatcher.FindStringSubmatch(content); len(found) > 0 {
		return found[1]
	}
	return content
}
