/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistralai

import (
	"encoding/json"
	"fmt"
)

// checks if the ListLibraryOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListLibraryOut{}

// ListLibraryOut struct for ListLibraryOut
type ListLibraryOut struct {
	Data                 []LibraryOut `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _ListLibraryOut ListLibraryOut

// NewListLibraryOut instantiates a new ListLibraryOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListLibraryOut(data []LibraryOut) *ListLibraryOut {
	this := ListLibraryOut{}
	this.Data = data
	return &this
}

// NewListLibraryOutWithDefaults instantiates a new ListLibraryOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListLibraryOutWithDefaults() *ListLibraryOut {
	this := ListLibraryOut{}
	return &this
}

// GetData returns the Data field value
func (o *ListLibraryOut) GetData() []LibraryOut {
	if o == nil {
		var ret []LibraryOut
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListLibraryOut) GetDataOk() ([]LibraryOut, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListLibraryOut) SetData(v []LibraryOut) {
	o.Data = v
}

func (o ListLibraryOut) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListLibraryOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListLibraryOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListLibraryOut := _ListLibraryOut{}

	err = json.Unmarshal(data, &varListLibraryOut)

	if err != nil {
		return err
	}

	*o = ListLibraryOut(varListLibraryOut)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListLibraryOut struct {
	value *ListLibraryOut
	isSet bool
}

func (v NullableListLibraryOut) Get() *ListLibraryOut {
	return v.value
}

func (v *NullableListLibraryOut) Set(val *ListLibraryOut) {
	v.value = val
	v.isSet = true
}

func (v NullableListLibraryOut) IsSet() bool {
	return v.isSet
}

func (v *NullableListLibraryOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLibraryOut(val *ListLibraryOut) *NullableListLibraryOut {
	return &NullableListLibraryOut{value: val, isSet: true}
}

func (v NullableListLibraryOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListLibraryOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
