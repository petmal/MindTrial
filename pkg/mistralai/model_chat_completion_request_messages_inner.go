/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistralai

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ChatCompletionRequestMessagesInner - struct for ChatCompletionRequestMessagesInner
type ChatCompletionRequestMessagesInner struct {
	AssistantMessage *AssistantMessage
	SystemMessage *SystemMessage
	ToolMessage *ToolMessage
	UserMessage *UserMessage
}

// AssistantMessageAsChatCompletionRequestMessagesInner is a convenience function that returns AssistantMessage wrapped in ChatCompletionRequestMessagesInner
func AssistantMessageAsChatCompletionRequestMessagesInner(v *AssistantMessage) ChatCompletionRequestMessagesInner {
	return ChatCompletionRequestMessagesInner{
		AssistantMessage: v,
	}
}

// SystemMessageAsChatCompletionRequestMessagesInner is a convenience function that returns SystemMessage wrapped in ChatCompletionRequestMessagesInner
func SystemMessageAsChatCompletionRequestMessagesInner(v *SystemMessage) ChatCompletionRequestMessagesInner {
	return ChatCompletionRequestMessagesInner{
		SystemMessage: v,
	}
}

// ToolMessageAsChatCompletionRequestMessagesInner is a convenience function that returns ToolMessage wrapped in ChatCompletionRequestMessagesInner
func ToolMessageAsChatCompletionRequestMessagesInner(v *ToolMessage) ChatCompletionRequestMessagesInner {
	return ChatCompletionRequestMessagesInner{
		ToolMessage: v,
	}
}

// UserMessageAsChatCompletionRequestMessagesInner is a convenience function that returns UserMessage wrapped in ChatCompletionRequestMessagesInner
func UserMessageAsChatCompletionRequestMessagesInner(v *UserMessage) ChatCompletionRequestMessagesInner {
	return ChatCompletionRequestMessagesInner{
		UserMessage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChatCompletionRequestMessagesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssistantMessage
	err = newStrictDecoder(data).Decode(&dst.AssistantMessage)
	if err == nil {
		jsonAssistantMessage, _ := json.Marshal(dst.AssistantMessage)
		if string(jsonAssistantMessage) == "{}" { // empty struct
			dst.AssistantMessage = nil
		} else {
			if err = validator.Validate(dst.AssistantMessage); err != nil {
				dst.AssistantMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.AssistantMessage = nil
	}

	// try to unmarshal data into SystemMessage
	err = newStrictDecoder(data).Decode(&dst.SystemMessage)
	if err == nil {
		jsonSystemMessage, _ := json.Marshal(dst.SystemMessage)
		if string(jsonSystemMessage) == "{}" { // empty struct
			dst.SystemMessage = nil
		} else {
			if err = validator.Validate(dst.SystemMessage); err != nil {
				dst.SystemMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.SystemMessage = nil
	}

	// try to unmarshal data into ToolMessage
	err = newStrictDecoder(data).Decode(&dst.ToolMessage)
	if err == nil {
		jsonToolMessage, _ := json.Marshal(dst.ToolMessage)
		if string(jsonToolMessage) == "{}" { // empty struct
			dst.ToolMessage = nil
		} else {
			if err = validator.Validate(dst.ToolMessage); err != nil {
				dst.ToolMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolMessage = nil
	}

	// try to unmarshal data into UserMessage
	err = newStrictDecoder(data).Decode(&dst.UserMessage)
	if err == nil {
		jsonUserMessage, _ := json.Marshal(dst.UserMessage)
		if string(jsonUserMessage) == "{}" { // empty struct
			dst.UserMessage = nil
		} else {
			if err = validator.Validate(dst.UserMessage); err != nil {
				dst.UserMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssistantMessage = nil
		dst.SystemMessage = nil
		dst.ToolMessage = nil
		dst.UserMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChatCompletionRequestMessagesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChatCompletionRequestMessagesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChatCompletionRequestMessagesInner) MarshalJSON() ([]byte, error) {
	if src.AssistantMessage != nil {
		return json.Marshal(&src.AssistantMessage)
	}

	if src.SystemMessage != nil {
		return json.Marshal(&src.SystemMessage)
	}

	if src.ToolMessage != nil {
		return json.Marshal(&src.ToolMessage)
	}

	if src.UserMessage != nil {
		return json.Marshal(&src.UserMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChatCompletionRequestMessagesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssistantMessage != nil {
		return obj.AssistantMessage
	}

	if obj.SystemMessage != nil {
		return obj.SystemMessage
	}

	if obj.ToolMessage != nil {
		return obj.ToolMessage
	}

	if obj.UserMessage != nil {
		return obj.UserMessage
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ChatCompletionRequestMessagesInner) GetActualInstanceValue() (interface{}) {
	if obj.AssistantMessage != nil {
		return *obj.AssistantMessage
	}

	if obj.SystemMessage != nil {
		return *obj.SystemMessage
	}

	if obj.ToolMessage != nil {
		return *obj.ToolMessage
	}

	if obj.UserMessage != nil {
		return *obj.UserMessage
	}

	// all schemas are nil
	return nil
}

type NullableChatCompletionRequestMessagesInner struct {
	value *ChatCompletionRequestMessagesInner
	isSet bool
}

func (v NullableChatCompletionRequestMessagesInner) Get() *ChatCompletionRequestMessagesInner {
	return v.value
}

func (v *NullableChatCompletionRequestMessagesInner) Set(val *ChatCompletionRequestMessagesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRequestMessagesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRequestMessagesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRequestMessagesInner(val *ChatCompletionRequestMessagesInner) *NullableChatCompletionRequestMessagesInner {
	return &NullableChatCompletionRequestMessagesInner{value: val, isSet: true}
}

func (v NullableChatCompletionRequestMessagesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRequestMessagesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


